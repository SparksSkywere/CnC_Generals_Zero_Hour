<doc>
  <assembly>
    <name>Microsoft.DirectX.Direct3D</name>
  </assembly>
  <members>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterInformation">
      <summary>Adapter information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.GetWhqlInformation">
      <summary>Retrieve adapter information including Windows Hardware Quality Labs (Whql) information.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.Adapter">
      <summary>Adapter ordinal</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.CurrentDisplayMode">
      <summary>Returns the current display mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.Information">
      <summary>Adapter information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.SupportedDisplayModes">
      <summary>Returns a collection of supported display modes for this adapter.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterListEnumerator">
      <summary>Collection of adapters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.GetEnumerator">
      <summary>Gets an enumerator for this collection.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Count">
      <summary>Gets the number of elements.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Default">
      <summary>Default adapter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Item">
      <summary>Gets the element with the specified index.</summary>
      <param name="adapter" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BaseTexture">
      <summary>Applications use the methods of the BaseTexture object to manipulate texture resources including cube and volume textures.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.BaseTexture.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GenerateMipSubLevels">
      <summary>Generate mipmap sublevels.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.op_Equality(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.op_Inequality(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.SetLevelOfDetail(System.Int32)">
      <summary>Sets the most detailed level of detail (LOD) for a managed texture. </summary>
      <param name="lodNew" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.AutoGenerateFilterType">
      <summary>Get the filter type that is used for automatically generated mipmap sublevels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelCount">
      <summary>Returns the number of texture levels in a multilevel texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelOfDetail">
      <summary>Returns a value clamped to the maximum level of detail (LOD) set for a managed texture.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipPlane">
      <summary>Clip planes for a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlane.GetSingleArray">
      <summary>Retrieves the coefficients of a user-defined clipping plane for the device.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlane.SetSingleArray(System.Single[])">
      <summary>Sets the coefficients of a user-defined clipping plane for the device.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlane.Enabled">
      <summary>Enables or disables a clip plane.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlane.Plane">
      <summary>Retrieves or sets the coefficients of a user-defined clipping plane for the device.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipPlanes">
      <summary>Clip planes on the device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlanes.DisableAll">
      <summary>Disable all clip planes on the device.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlanes.EnableAll">
      <summary>Enable all clip planes that have been set.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlanes.Item">
      <summary>Gets the element with the specified index.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingRenderStateException">
      <summary>The currently set render states cannot be used together.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException">
      <summary>The current texture filters cannot be used together.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException">
      <summary>The current textures cannot be used simultaneously.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CubeTexture">
      <summary>Applications use the methods of the CubeTexture object to manipulate a cube texture resource.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle(Microsoft.DirectX.Direct3D.CubeMapFace)">
      <summary>Adds a dirty region to a cube texture resource.</summary>
      <param name="faceType" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Drawing.Rectangle)">
      <summary>Adds a dirty region to a cube texture resource.</summary>
      <param name="faceType" />
      <param name="rect" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="edgeLength" />
      <param name="levels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetCubeMapSurface(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)">
      <summary>Retrieves a cube texture map surface.</summary>
      <param name="faceType" />
      <param name="level" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a description of one face of the specified cube texture level.</summary>
      <param name="level" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType" />
      <param name="level" />
      <param name="rect" />
      <param name="flags" />
      <param name="pitch" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType" />
      <param name="level" />
      <param name="flags" />
      <param name="pitch" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType" />
      <param name="level" />
      <param name="rect" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType" />
      <param name="level" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock" />
      <param name="faceType" />
      <param name="level" />
      <param name="rect" />
      <param name="flags" />
      <param name="pitch" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock" />
      <param name="faceType" />
      <param name="level" />
      <param name="flags" />
      <param name="pitch" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock" />
      <param name="faceType" />
      <param name="level" />
      <param name="rect" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock" />
      <param name="faceType" />
      <param name="level" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.UnlockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)">
      <summary>Unlocks a rectangle on a cube texture resource.</summary>
      <param name="faceType" />
      <param name="level" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex">
      <summary>Various custom fixed format vertex types.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Device">
      <summary>Applications use the methods of the Device object to perform DrawPrimitive-based rendering, create resources, work with system-level variables, adjust gamma ramp levels, work with palettes, and create shaders.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceCreated">
      <summary>Occurs when the device has been created.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceLost">
      <summary>Occurs when the device is about to be lost (for example, just before a reset).</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceReset">
      <summary>Occurs after the device has been reset, allowing an application to recreate all Pool.Default resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceResizing">
      <summary>Occurs when the device is resizing, allowing the application to cancel the default handling of the resize.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.BeginScene">
      <summary>Begins a scene. </summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.BeginStateBlock">
      <summary>Signals  to begin recording a device-state block.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CheckCooperativeLevel">
      <summary>Reports the current cooperative-level status of the  device for a windowed or full-screen application.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CheckCooperativeLevel(System.Int32@)">
      <summary>Reports the current cooperative-level status of the  device for a windowed or full-screen application.</summary>
      <param name="result" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Drawing.Color,System.Single,System.Int32)">
      <summary>Clears the viewport, or a set of rectangles in the viewport, to a specified RGBA color, clears the depth buffer, and erases the stencil buffer. </summary>
      <param name="flags" />
      <param name="color" />
      <param name="zdepth" />
      <param name="stencil" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Drawing.Color,System.Single,System.Int32,System.Drawing.Rectangle[])">
      <summary>Clears the viewport, or a set of rectangles in the viewport, to a specified RGBA color, clears the depth buffer, and erases the stencil buffer. </summary>
      <param name="flags" />
      <param name="color" />
      <param name="zdepth" />
      <param name="stencil" />
      <param name="rect" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Int32,System.Single,System.Int32)">
      <summary>Clears the viewport, or a set of rectangles in the viewport, to a specified RGBA color, clears the depth buffer, and erases the stencil buffer. </summary>
      <param name="flags" />
      <param name="color" />
      <param name="zdepth" />
      <param name="stencil" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Int32,System.Single,System.Int32,System.Drawing.Rectangle[])">
      <summary>Clears the viewport, or a set of rectangles in the viewport, to a specified RGBA color, clears the depth buffer, and erases the stencil buffer. </summary>
      <param name="flags" />
      <param name="color" />
      <param name="zdepth" />
      <param name="stencil" />
      <param name="regions" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ColorFill(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>Allows an application to fill a rectangular area of a D3DPOOL_DEFAULT surface with a specified color.</summary>
      <param name="surface" />
      <param name="rect" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ColorFill(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.Int32)">
      <summary>Allows an application to fill a rectangular area of a D3DPOOL_DEFAULT surface with a specified color.</summary>
      <param name="surface" />
      <param name="rect" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.DepthFormat,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)">
      <summary>Creates a depth-stencil resource.</summary>
      <param name="width" />
      <param name="height" />
      <param name="format" />
      <param name="multiSample" />
      <param name="multiSampleQuality" />
      <param name="discard" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateOffscreenPlainSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Create an off-screen surface.</summary>
      <param name="width" />
      <param name="height" />
      <param name="format" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateRenderTarget(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)">
      <summary>Creates a render target surface.</summary>
      <param name="width" />
      <param name="height" />
      <param name="format" />
      <param name="multiSample" />
      <param name="multiSampleQuality" />
      <param name="lockable" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.CreateFlags,Microsoft.DirectX.Direct3D.PresentParameters)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="renderWindow" />
      <param name="behaviorFlags" />
      <param name="presentationParameters" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DeletePatch(System.Int32)">
      <summary>Frees a cached high-order patch.</summary>
      <param name="handle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Renders the specified geometric primitive, based on indexing into an array of vertices.</summary>
      <param name="primitiveType" />
      <param name="baseVertex" />
      <param name="minVertexIndex" />
      <param name="numVertices" />
      <param name="startIndex" />
      <param name="primCount" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedUserPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Object,System.Boolean,System.Object)">
      <summary>Renders the specified geometric primitive with data specified by a user memory reference.</summary>
      <param name="primitiveType" />
      <param name="minVertexIndex" />
      <param name="numVertexIndices" />
      <param name="primitiveCount" />
      <param name="indexData" />
      <param name="sixteenBitIndices" />
      <param name="vertexStreamZeroData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32)">
      <summary>Renders a sequence of nonindexed, geometric primitives of the specified type from the current set of data input streams.</summary>
      <param name="primitiveType" />
      <param name="startVertex" />
      <param name="primitiveCount" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,Microsoft.DirectX.Plane,Microsoft.DirectX.Direct3D.RectanglePatchInformation@)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle" />
      <param name="numSegs" />
      <param name="rectPatchInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,System.Single[],Microsoft.DirectX.Direct3D.RectanglePatchInformation@)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle" />
      <param name="numSegs" />
      <param name="rectPatchInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,Microsoft.DirectX.Plane)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle" />
      <param name="numSegs" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,System.Single[])">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle" />
      <param name="numSegs" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,Microsoft.DirectX.Plane,Microsoft.DirectX.Direct3D.TrianglePatchInformation@)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle" />
      <param name="numSegs" />
      <param name="triPatchInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,System.Single[],Microsoft.DirectX.Direct3D.TrianglePatchInformation@)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle" />
      <param name="numSegs" />
      <param name="triPatchInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,Microsoft.DirectX.Plane)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle" />
      <param name="numSegs" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,System.Single[])">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle" />
      <param name="numSegs" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawUserPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Object)">
      <summary>Renders data specified by a user memory reference as a sequence of geometric primitives of the specified type.</summary>
      <param name="primitiveType" />
      <param name="primitiveCount" />
      <param name="vertexStreamZeroData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EndScene">
      <summary>Ends a scene that was begun by calling the  method.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EndStateBlock">
      <summary>Signals  to stop recording a device-state block and retrieve a handle to the state block.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EvictManagedResources">
      <summary>Evicts all managed resources, including both  and driver-managed resources.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetBackBuffer(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.BackBufferType)">
      <summary>Retrieves a back buffer from the device's swap chain.</summary>
      <param name="swapChain" />
      <param name="backBuffer" />
      <param name="backBufferType" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetFrontBufferData(System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Generates a copy of the device's front buffer and places that copy in a system memory buffer provided by the application. </summary>
      <param name="swapChain" />
      <param name="buffer" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetGammaRamp(System.Int32)">
      <summary>Retrieves the gamma correction ramp for the swap chain.</summary>
      <param name="swapChain" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPaletteEntries(System.Int32)">
      <summary>Retrieves palette entries.</summary>
      <param name="paletteNumber" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Get a Boolean shader constant.</summary>
      <param name="startRegister" />
      <param name="constantCount" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Get an integer shader constant.</summary>
      <param name="startRegister" />
      <param name="constantCount" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Get a floating-point shader constant.</summary>
      <param name="startRegister" />
      <param name="constantCount" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRasterStatus(System.Int32)">
      <summary>Returns information describing the raster of the monitor on which the swap chain is presented.</summary>
      <param name="swapChain" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderTarget(System.Int32)">
      <summary>Retrieves a render target surface.</summary>
      <param name="renderTargetIndex" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderTargetData(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies the render target data from device memory to system memory.</summary>
      <param name="renderTarget" />
      <param name="destSurface" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetStreamSource(System.Int32,System.Int32@,System.Int32@)">
      <summary>Retrieves a vertex buffer bound to the specified data stream.</summary>
      <param name="streamNumber" />
      <param name="offsetInBytes" />
      <param name="stride" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetStreamSourceFrequency(System.Int32)">
      <summary>Get the stream source frequency divider value.</summary>
      <param name="streamNumber" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetSwapChain(System.Int32)">
      <summary>Get a reference to a swap chain.</summary>
      <param name="swapChain" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTexture(System.Int32)">
      <summary>Retrieves a  assigned to a stage for a device.</summary>
      <param name="stage" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTransform(Microsoft.DirectX.Direct3D.TransformType)">
      <summary>Retrieves a matrix describing a transformation state.</summary>
      <param name="state" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Get a Boolean vertex shader constant.</summary>
      <param name="startRegister" />
      <param name="constantCount" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Get an integer vertex shader constant.</summary>
      <param name="startRegister" />
      <param name="constantCount" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Get a floating-point vertex shader constant.</summary>
      <param name="startRegister" />
      <param name="constantCount" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.MultiplyTransform(Microsoft.DirectX.Direct3D.TransformType,Microsoft.DirectX.Matrix)">
      <summary>Multiplies a device's world, view, or projection matrices by a specified matrix. </summary>
      <param name="state" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.op_Equality(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Device)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.op_Inequality(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Device)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="rectPresent" />
      <param name="sourceRectangle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="rectPresent" />
      <param name="overrideWindow" />
      <param name="sourceRectangle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Windows.Forms.Control)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="overrideWindow" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="sourceRectangle" />
      <param name="destRectangle" />
      <param name="overrideWindow" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary>Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer. </summary>
      <param name="srcStartIndex" />
      <param name="destIndex" />
      <param name="vertexCount" />
      <param name="destBuffer" />
      <param name="vertexDeclaration" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,Microsoft.DirectX.Direct3D.VertexDeclaration,System.Boolean)">
      <summary>Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer. </summary>
      <param name="srcStartIndex" />
      <param name="destIndex" />
      <param name="vertexCount" />
      <param name="destBuffer" />
      <param name="vertexDeclaration" />
      <param name="copyData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceCreated(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceLost(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceReset(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceResizing(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters)">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <param name="presentationParameters" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursor(System.Windows.Forms.Cursor,System.Boolean)">
      <summary>Create an off-screen surface.</summary>
      <param name="cursor" />
      <param name="addWaterMark" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursorPosition(System.Int32,System.Int32,System.Boolean)">
      <summary>Sets the cursor position and update options.</summary>
      <param name="positionX" />
      <param name="positionY" />
      <param name="updateImmediate" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursorProperties(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Sets properties for the cursor.</summary>
      <param name="hotSpotX" />
      <param name="hotSpotY" />
      <param name="cursorBitmap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetDialogBoxesEnabled(System.Boolean)">
      <summary>This method allows the use of  dialog boxes in full-screen mode applications.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetGammaRamp(System.Int32,System.Boolean,Microsoft.DirectX.Direct3D.GammaRamp)">
      <summary>Sets the gamma correction ramp for the implicit swap chain.</summary>
      <param name="swapChain" />
      <param name="calibrate" />
      <param name="ramp" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPaletteEntries(System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[])">
      <summary>Sets palette entries.</summary>
      <param name="paletteNumber" />
      <param name="entries" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Boolean[])">
      <summary>Set a floating-point shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Int32[])">
      <summary>Set a floating-point shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Vector4[])">
      <summary>Set a floating-point shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Matrix[])">
      <summary>Set a floating-point shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Single[])">
      <summary>Set a floating-point shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Sets a new color buffer for the device.</summary>
      <param name="renderTargetIndex" />
      <param name="renderTarget" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSource(System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,System.Int32)">
      <summary>Binds a vertex buffer to a device data stream. For more information, see .</summary>
      <param name="streamNumber" />
      <param name="streamData" />
      <param name="offsetInBytes" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSource(System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,System.Int32,System.Int32)">
      <summary>Binds a vertex buffer to a device data stream. For more information, see .</summary>
      <param name="streamNumber" />
      <param name="streamData" />
      <param name="offsetInBytes" />
      <param name="stride" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSourceFrequency(System.Int32,System.Int32)">
      <summary>Set the stream source frequency divider value.</summary>
      <param name="streamNumber" />
      <param name="divider" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTexture(System.Int32,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Assigns a texture to a stage for a device.</summary>
      <param name="stage" />
      <param name="texture" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTransform(Microsoft.DirectX.Direct3D.TransformType,Microsoft.DirectX.Matrix)">
      <summary>Sets a single device transformation-related state.</summary>
      <param name="state" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Boolean[])">
      <summary>Set a floating-point vertex shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Int32[])">
      <summary>Set a floating-point vertex shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Vector4[])">
      <summary>Set a floating-point vertex shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Matrix[])">
      <summary>Set a floating-point vertex shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Single[])">
      <summary>Set a floating-point vertex shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ShowCursor(System.Boolean)">
      <summary>Displays or hides the cursor.</summary>
      <param name="canShow" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.StretchRectangle(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.TextureFilter)">
      <summary>Copy the contents of the source rectangle to the destination rectangle. The source rectangle can be stretched and filtered by the copy. This function is often used to change the aspect ratio of a video stream.</summary>
      <param name="sourceSurface" />
      <param name="sourceRectangle" />
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="filter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.TestCooperativeLevel">
      <summary>Reports the current cooperative-level status of the  device for a windowed or full-screen application.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface" />
      <param name="destinationSurface" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Point)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface" />
      <param name="destinationSurface" />
      <param name="destPoint" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface" />
      <param name="sourceRect" />
      <param name="destinationSurface" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Point)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface" />
      <param name="sourceRect" />
      <param name="destinationSurface" />
      <param name="destPoint" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Updates the dirty portions of a texture.</summary>
      <param name="sourceTexture" />
      <param name="destinationTexture" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ValidateDevice">
      <summary>Reports the device's ability to render the current texture-blending operations and arguments in a single pass.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.AvailableTextureMemory">
      <summary>Returns an estimate of the amount of available texture memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ClipPlanes">
      <summary>The clip planes on this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ClipStatus">
      <summary>Retrieves the clip status.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.CreationParameters">
      <summary>Retrieves the creation parameters of the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.CurrentTexturePalette">
      <summary>Retrieves the current texture palette.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface">
      <summary>Gets the depth-stencil surface owned by the Direct3DDevice object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DeviceCaps">
      <summary>Retrieves the capabilities of the rendering device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DisplayMode">
      <summary>Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Indices">
      <summary>Retrieves index data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Lights">
      <summary>The lights on this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Material">
      <summary>Retrieves the current material properties for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.NPatchMode">
      <summary>Get the N-patch mode segments.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.NumberOfSwapChains">
      <summary>Get the number of implicit swap chains.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.PixelShader">
      <summary>Retrieves the currently set pixel shader.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.PresentationParameters">
      <summary>Describes the presentation parameters.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.RasterStatus">
      <summary>Returns information describing the raster of the monitor on which the swap chain is presented.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.RenderState">
      <summary>Retrieves a render-state value for a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.SamplerState">
      <summary>Gets the sampler state value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ScissorRectangle">
      <summary>Get the scissor rectangle.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.SoftwareVertexProcessing">
      <summary>Get the vertex processing (hardware or software) mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.TextureState">
      <summary>Retrieves a state value for an assigned texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Transform">
      <summary>Retrieves a matrix describing a transformation state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexDeclaration">
      <summary>Get a vertex shader declaration.Create a vertex shader declaration from the device and the vertex elements.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexFormat">
      <summary>Get the fixed vertex function declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexShader">
      <summary>Retrieves the currently set vertex shader.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Viewport">
      <summary>Retrieves the viewport parameters currently set for the device.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceLostException">
      <summary>The device has been lost but cannot be reset at this time. Therefore, rendering is not possible.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceNotResetException">
      <summary>The device has been lost but can be reset at this time.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplayModeEnumerator">
      <summary>A collection of diplay modes.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.GetEnumerator">
      <summary>Gets an enumerator for this collection.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Count">
      <summary>Gets the number of elements.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Item">
      <summary>Gets the element with the specified index.</summary>
      <param name="f" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverInternalErrorException">
      <summary>Internal driver error.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverInvalidCallException">
      <summary>The driver reports this method call is invalid. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GraphicsException">
      <summary>Base exception type for Graphics.  Derives from DirectXException.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.GetExceptionFromHResult">
      <summary>Returns a new exception from a HResult.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GraphicsStream">
      <summary>Stream containing Graphics data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Close">
      <summary>Closes the current stream and releases any resources associated with the current stream.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.#ctor(System.IntPtr,System.Int64,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="dataPointer" />
      <param name="size" />
      <param name="read" />
      <param name="write" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.#ctor(System.IntPtr,System.Int64,System.IntPtr)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="dataPointer" />
      <param name="size" />
      <param name="bufferPointer" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Flush">
      <summary>Not supported.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="buffer" />
      <param name="offset" />
      <param name="count" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Read(System.Boolean)">
      <summary>Reads from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="unicode" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Read(System.Type,System.Int32[])">
      <summary>Reads from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="returnType" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Read(System.Type)">
      <summary>Reads from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="returnType" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position within the current stream.</summary>
      <param name="newposition" />
      <param name="origin" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream.</summary>
      <param name="newLength" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer" />
      <param name="offset" />
      <param name="count" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.String)">
      <summary>Writes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.String,System.Boolean)">
      <summary>Writes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="value" />
      <param name="unicode" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.Array)">
      <summary>Writes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.ValueType)">
      <summary>Writes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports reading.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seeking.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports writing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.InternalData">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.Length">
      <summary>Gets the length in bytes of the stream.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.Position">
      <summary>Gets or sets the position within the current stream.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IndexBuffer">
      <summary>Applications use the methods of the IndexBuffer object to manipulate an index buffer resource.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.IndexBuffer.Created">
      <summary>Occurs after a device has been reset and the Index Buffer has been recreated.  Note: Only occurs on Pool.Default resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.IndexBuffer.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool,System.Boolean)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="sizeOfBufferInBytes" />
      <param name="usage" />
      <param name="pool" />
      <param name="sixteenBitIndices" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
      <param name="usage" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="typeIndexType" />
      <param name="numberIndices" />
      <param name="device" />
      <param name="usage" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of index data and obtains a reference to the index buffer memory.</summary>
      <param name="offsetToLock" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of index data and obtains a reference to the index buffer memory.</summary>
      <param name="offsetToLock" />
      <param name="sizeToLock" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a range of index data and obtains a reference to the index buffer memory.</summary>
      <param name="offsetToLock" />
      <param name="typeIndex" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.raise_Created(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.SetData(System.Object,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of index data and obtains a reference to the index buffer memory.</summary>
      <param name="data" />
      <param name="lockAtOffset" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Unlock">
      <summary>Unlocks index data.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBuffer.Description">
      <summary>Retrieves a description of the index buffer resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBuffer.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InterfaceGuid">
      <summary>Various object guids for use with the GetContainer calls.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.BaseTexture">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.CubeTexture">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Device">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.IndexBuffer">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.PixelShader">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Resource">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.StateBlock">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Surface">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.SwapChain">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexBuffer">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexDeclaration">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexShader">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Volume">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VolumeTexture">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidCallException">
      <summary>The method call is invalid. For example, a method's parameter may not be valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidDeviceException">
      <summary>The requested device type is not valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Light">
      <summary>Defines a set of lighting properties.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.Commit">
      <summary>Commit any deferred light settings on the specified light.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.FromLight(Microsoft.DirectX.Direct3D.Light)">
      <summary>Create a new light based on an existing light.</summary>
      <param name="light" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.GetCommittedData">
      <summary>Retrieve light data that has been commited.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Ambient">
      <summary>Ambient color emitted by the light. This member is a D3dcolorvalue structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation0">
      <summary>Value specifying how the light intensity changes over distance. Attenuation values are ignored for directional lights. This member represents an attenuation constant. For information on attenuation, see LightPositionRangeAndAttenuation. Valid values for this member range from 0.0 to infinity. For non-directional lights, all three attenuation values should not be set to 0.0 at the same time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation1">
      <summary>Value specifying how the light intensity changes over distance. Attenuation values are ignored for directional lights. This member represents an attenuation constant. For information on attenuation, see LightPositionRangeAndAttenuation. Valid values for this member range from 0.0 to infinity. For non-directional lights, all three attenuation values should not be set to 0.0 at the same time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation2">
      <summary>Value specifying how the light intensity changes over distance. Attenuation values are ignored for directional lights. This member represents an attenuation constant. For information on attenuation, see LightPositionRangeAndAttenuation. Valid values for this member range from 0.0 to infinity. For non-directional lights, all three attenuation values should not be set to 0.0 at the same time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Deferred">
      <summary>Gets or sets a value indicating whether light data is applied immediately or is deferred until the next call to Commit().</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Diffuse">
      <summary>Diffuse color emitted by the light. This member is a D3dcolorvalue structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Direction">
      <summary>Direction that the light is pointing in world space, specified by a Vector3 structure. This member has meaning only for directional and spotlights. This vector need not be normalized, but it should have a nonzero length. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Enabled">
      <summary>Enables or disables a set of lighting parameters within a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Falloff">
      <summary>Decrease in illumination between a spotlight's inner cone (the angle specified by Theta) and the outer edge of the outer cone (the angle specified by Phi). The effect of falloff on the lighting is subtle. Furthermore, a small performance penalty is incurred by shaping the falloff curve. For these reasons, most developers set this value to 1.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.InnerConeAngle">
      <summary>Angle, in radians, of a spotlight's inner cone—that is, the fully illuminated spotlight cone. This value must be in the range from 0 through the value specified by OutterConeAngle.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.OuterConeAngle">
      <summary>Angle, in radians, defining the outer edge of the spotlight's outer cone. Points outside this cone are not lit by the spotlight. This value must be between 0 and pi. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Position">
      <summary>Position of the light in world space, specified by a Vector3 structure. This member has no meaning for directional lights and is ignored in that case. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Range">
      <summary>Distance beyond which the light has no effect. The maximum allowable value for this member is the square root of FLT_MAX. This member does not affect directional lights.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Specular">
      <summary>Specular color emitted by the light. This member is a D3dcolorvalue structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Type">
      <summary>Type of the light source. This value is one of the members of the D3dlighttype enumerated type.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.XDirection">
      <summary>X value of direction.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.XPosition">
      <summary>X value of position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.YDirection">
      <summary>Y value of direction.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.YPosition">
      <summary>Y value of position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.ZDirection">
      <summary>Z value of direction.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.ZPosition">
      <summary>Z value of position.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Lights">
      <summary>Collection of lights.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Lights.Item">
      <summary>Gets the element with the specified index.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Manager">
      <summary>Applications use the methods of the Manager object to create Microsoft® Direct3D® objects and set up the environment. This objects includes methods for enumerating and retrieving capabilities of the device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.DepthFormat,System.Int32@)">
      <summary>Determines whether a depth-stencil format is compatible with a render target format in a particular display mode.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="adapterFormat" />
      <param name="renderTargetFormat" />
      <param name="depthStencilFormat" />
      <param name="result" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Determines whether a depth-stencil format is compatible with a render target format in a particular display mode.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="adapterFormat" />
      <param name="renderTargetFormat" />
      <param name="depthStencilFormat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="adapterFormat" />
      <param name="usage" />
      <param name="resourceType" />
      <param name="checkFormat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.DepthFormat,System.Int32@)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="adapterFormat" />
      <param name="usage" />
      <param name="resourceType" />
      <param name="checkFormat" />
      <param name="result" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.Format)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="adapterFormat" />
      <param name="usage" />
      <param name="resourceType" />
      <param name="checkFormat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.Format,System.Int32@)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="adapterFormat" />
      <param name="usage" />
      <param name="resourceType" />
      <param name="checkFormat" />
      <param name="result" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Int32@)">
      <summary>Test the device to see if it supports conversion from one display format to another.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="sourceFormat" />
      <param name="targetFormat" />
      <param name="result" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format)">
      <summary>Test the device to see if it supports conversion from one display format to another.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="sourceFormat" />
      <param name="targetFormat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32@,System.Int32@)">
      <summary>Determines if a multisampling technique is available on this device.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="surfaceFormat" />
      <param name="windowed" />
      <param name="multiSampleType" />
      <param name="result" />
      <param name="qualityLevels" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.MultiSampleType)">
      <summary>Determines if a multisampling technique is available on this device.</summary>
      <param name="adapter" />
      <param name="deviceType" />
      <param name="surfaceFormat" />
      <param name="windowed" />
      <param name="multiSampleType" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Boolean)">
      <summary>Verifies whether a hardware accelerated device type can be used on this adapter.</summary>
      <param name="adapter" />
      <param name="checkType" />
      <param name="displayFormat" />
      <param name="backBufferFormat" />
      <param name="windowed" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Boolean,System.Int32@)">
      <summary>Verifies whether a hardware accelerated device type can be used on this adapter.</summary>
      <param name="adapter" />
      <param name="checkType" />
      <param name="displayFormat" />
      <param name="backBufferFormat" />
      <param name="windowed" />
      <param name="result" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetAdapterMonitor(System.Int32)">
      <summary>Returns the handle of the monitor associated with the  object.</summary>
      <param name="adapter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetDeviceCaps(System.Int32,Microsoft.DirectX.Direct3D.DeviceType)">
      <summary>Retrieves device-specific information about a device. </summary>
      <param name="adapter" />
      <param name="deviceType" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.op_Equality(Microsoft.DirectX.Direct3D.Manager,Microsoft.DirectX.Direct3D.Manager)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.op_Inequality(Microsoft.DirectX.Direct3D.Manager,Microsoft.DirectX.Direct3D.Manager)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Manager.Adapters">
      <summary>Collection of adapters on the system.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MoreDataException">
      <summary>There is more data available than the specified buffer size can hold.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.NotAvailableException">
      <summary>This device does not support the queried technique.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.NotFoundException">
      <summary>The requested item was not found.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException">
      <summary>Direct3D does not have enough display memory to perform the operation.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PixelShader">
      <summary>Encapsulate the functionality of a pixel shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.PixelShader.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="functionToken" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="functionToken" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetFunction">
      <summary>Get a reference to the shader data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.op_Equality(Microsoft.DirectX.Direct3D.PixelShader,Microsoft.DirectX.Direct3D.PixelShader)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.op_Inequality(Microsoft.DirectX.Direct3D.PixelShader,Microsoft.DirectX.Direct3D.PixelShader)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShader.Device">
      <summary>Get the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShader.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentParameters">
      <summary>Describes the presentation parameters.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentParameters.DefaultPresentRate">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.Clone">
      <summary>Duplicates the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.#ctor(Microsoft.DirectX.Direct3D.PresentParameters)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="original" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.AutoDepthStencilFormat">
      <summary>Member of the D3dformat enumerated type. The format of the automatic depth-stencil surface that the device will create. This member is ignored unless EnableAutoDepthStencil is TRUE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferCount">
      <summary>This value can be 0, 1, 2, or 3. Note that 0 is treated as 1. If the number of back buffers cannot be created, the runtime will fail the method call and fill this value with the number of back buffers that could be created. As a result, an application can call the method twice with the same D3dpresentParameters structure and expect it to work the second time.The method fails if one back buffer cannot be created. The value of BackBufferCount influences what set of swap effects are allowed. Specifically, any D3DSWAPEFFECT_COPY swap effect requires that there be exactly one back buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferFormat">
      <summary>The back buffer format. For more information about formats, see D3dformat. This value must be one of the render target formats as validated by 9Checkdevicetype. You can use Device9Getdisplaymode to obtain the current format.For windowed applications, the back buffer format no longer needs to match the display mode format because color conversion can now be done in either software emulation or by the hardware (if the hardware supports color conversion). The set of possible back buffer formats is constrained, but the runtime will allow any valid back buffer format to be presented to any desktop format. (There is the additional requirement that the device be operable in the desktop mode; devices typically do not operate in 8 bits per pixel modes.)Full screen applications cannot do color conversion.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferHeight">
      <summary>Width and height of the new swap chain's back buffers, in pixels. If Windowed is FALSE (the presentation is full-screen), these values must equal the width and height of one of the enumerated display modes found through 9Enumadaptermodes. If Windowed is TRUE and either of these values is zero, the corresponding dimension of the client area of the hDeviceWindow (or the focus window, if hDeviceWindow is NULL) is taken.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferWidth">
      <summary>Width and height of the new swap chain's back buffers, in pixels. If Windowed is FALSE (the presentation is full-screen), these values must equal the width and height of one of the enumerated display modes found through 9Enumadaptermodes. If Windowed is TRUE and either of these values is zero, the corresponding dimension of the client area of the hDeviceWindow (or the focus window, if hDeviceWindow is NULL) is taken.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow">
      <summary>If full-screen, this is the cover window. If windowed, this will be the default target window for Present. If this value is NULL, the focus window will be taken. For applications that use multiple full-screen devices, such as a multimonitor system, exactly one device should use the focus window as the device window. All other devices should have unique device windows. Otherwise, behavior is undefined and applications will not work as expected.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.EnableAutoDepthStencil">
      <summary>If this value is TRUE, Microsoft® Direct3D® will manage depth buffers for the application. The device will create a depth-stencil buffer when it is created. The depth-stencil buffer will be automatically set as the render target of the device. When the device is reset, the depth-stencil buffer will be automatically destroyed and re-created in the new size.If EnableAutoDepthStencil is TRUE, then AutoDepthStencilFormat must be a valid depth-stencil format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.FullScreenRefreshRateInHz">
      <summary>The rate at which the display adapter refreshes the screen. For windowed mode, this value must be 0. Otherwise, this value must be one of the refresh rates returned by or one of the following values.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.MultiSample">
      <summary>Member of the D3dmultisampleType enumerated type. The value must be D3DMULTISAMPLE_NONE unless SwapEffect has been set to D3DSWAPEFFECT_DISCARD. Multisampling is supported only if the swap effect is D3DSWAPEFFECT_DISCARD.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.MultiSampleQuality">
      <summary>Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by 9Checkdevicemultisampletype. Passing a larger value returns the error D3DERR_INVALIDCALL. Paired values of render targets or depth stencil surfaces, and must match.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval">
      <summary>Maximum rate at which the swap chain's back buffers may be presented. For a windowed swap chain, this value must be D3DPRESENT_INTERVAL_DEFAULT (0). For a full-screen swap chain, it may be D3DPRESENT_INTERVAL_DEFAULT or the value corresponding to exactly one of the flags enumerated in the .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentFlag">
      <summary>Flags to control presentation</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.SwapEffect">
      <summary>Member of the D3dswapeffect enumerated type. The runtime will guarantee the implied semantics concerning buffer swap behavior. So if Windowed is TRUE and SwapEffect is set to D3DSWAPEFFECT_FLIP, the runtime will create one extra back buffer, and copy whichever becomes the front buffer at presentation time.D3DSWAPEFFECT_COPY requires that BackBufferCount be set to 1.D3DSWAPEFFECT_DISCARD will be enforced in the debug runtime by filling any buffer with noise after it is presented.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.Windowed">
      <summary>TRUE if the application runs windowed; FALSE if the application runs full-screen.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderStates">
      <summary>Defines device render states.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AdaptiveTessellateX">
      <summary>Amount to adaptively tessellate, in the x direction. Default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AdaptiveTessellateY">
      <summary>Amount to adaptively tessellate, in the y direction. Default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AdaptiveTessellateZ">
      <summary>Amount to adaptively tessellate, in the z direction. Default value is 1.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaBlendEnable">
      <summary>TRUE to enable alpha-blended transparency. The default value is FALSE. The type of alpha blending is determined by the D3DRS_SRCBLEND and D3DRS_DESTBLEND render states.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaBlendOperation">
      <summary>Value used to select the arithmetic operation applied when the alpha blending render state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaDestinationBlend">
      <summary>One member of the Blend enumerated type.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaFunction">
      <summary>One member of the D3dcmpfunc enumerated type. The default value is D3DCMP_ALWAYS. This member enables an application to accept or reject a pixel, based on its alpha value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaSourceBlend">
      <summary>One member of the Blend enumerated type.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaTestEnable">
      <summary>TRUE to enable per pixel alpha testing. If the test passes, the pixel is processed by the frame buffer. Otherwise, all frame-buffer processing is skipped for the pixel. The test is done by comparing the incoming alpha value with the reference alpha value, using the comparison function provided by the D3DRS_ALPHAFUNC render state. The reference alpha value is determined by the value set for D3DRS_ALPHAREF. For more information, see AlphaTestingState.The default value of this parameter is FALSE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Ambient">
      <summary>Ambient light color. This value is of type D3dcolor. The default value is 0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AmbientMateritalSource">
      <summary>Ambient color source for lighting calculations. Valid values are members of the enumerated type. The default value is D3DMCS_MATERIAL.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AntiAliasedLineEnable">
      <summary>TRUE to enable line antialiasing, FALSE to disable line antialiasing.When rendering to a multisample render target, D3DRS_ANTIALIASEDLINEENABLE is ignored and all lines are rendered aliased. Use LineGraphicsd3dx for antialiased line rendering in a multisample render target.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.BlendFactor">
      <summary>used for a constant blend-factor during alpha blending. This functionality is available if the D3DPBLENDCAPS_BLENDFACTOR capabilities bit is set in the SrcBlendCaps or DestBlendCaps member of the D3DCAPS9 structure for the device. Also, see D3DRS_SRCBLEND and D3DRS_ALPHABLENDENABLE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.BlendOperation">
      <summary>Value used to select the arithmetic operation applied when the alpha blending render state, D3DRS_ALPHABLENDENABLE, is set to TRUE. Valid values are defined by the D3dblendop enumerated type. The default value is D3DBLENDOP_ADD. If the D3DPMISCCAPS_BLENDOP device capability is not supported, then D3DBLENDOP_ADD is performed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Clipping">
      <summary>TRUE to enable primitive clipping by Microsoft® Direct3D®, or FALSE to disable it. The default value is TRUE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorVertex">
      <summary>TRUE to enable per-vertex color or FALSE to disable it. The default value is TRUE. Enabling per-vertex color allows the system to include the color defined for individual vertices in its lighting calculations. For more information, see the following render states.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable">
      <summary>UINT value that enables a per-channel write for the render target color buffer. A set bit results in the color channel being updated during 3-D rendering. A clear bit results in the color channel being unaffected. This functionality is available if the D3DPMISCCAPS_COLORWRITEENABLE capabilities bit is set in the PrimitiveMiscCaps member of the D3dcaps9 structure for the device. This render state does not affect the clear operation. The default value is 0x0000000F. Valid values for this render state can be any combination of the D3DCOLORWRITEENABLE_ALPHA, D3DCOLORWRITEENABLE_BLUE, D3DCOLORWRITEENABLE_GREEN, or D3DCOLORWRITEENABLE_RED flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable1">
      <summary>Additional ColorWriteEnable values for the devices. See D3DRS_COLORWRITEENABLE. This functionality is available if the D3DPMISCCAPS_INDEPENDENTWRITEMASKS capabilities bit is set in the PrimitiveMiscCaps member of the structure for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable2">
      <summary>Additional ColorWriteEnable values for the devices. See D3DRS_COLORWRITEENABLE. This functionality is available if the D3DPMISCCAPS_INDEPENDENTWRITEMASKS capabilities bit is set in the PrimitiveMiscCaps member of the structure for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable3">
      <summary>Additional ColorWriteEnable values for the devices. See D3DRS_COLORWRITEENABLE. This functionality is available if the D3DPMISCCAPS_INDEPENDENTWRITEMASKS capabilities bit is set in the PrimitiveMiscCaps member of the structure for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilFail">
      <summary>Stencil operation to perform if ccw stencil test fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilFunction">
      <summary>The comparison function. ccw stencil test passes if ((ref &amp; mask) stencil function (stencil &amp; mask)) is true.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilPass">
      <summary>Stencil operation to perform if both ccw stencil and z-tests pass.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilZBufferFail">
      <summary>Stencil operation to perform if ccw stencil test passes and z-test fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CullMode">
      <summary>Specifies how back-facing triangles are culled, if at all. This can be set to one member of the D3dcull enumerated type. The default value is D3DCULL_CCW.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DebugMonitorTokenEnabled">
      <summary>Set only for debugging the monitor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DepthBias">
      <summary>An int value in the range 0 through 16 that causes polygons that are physically coplanar to appear separate. Polygons with a high z-bias value appear in front of polygons with a low value, without requiring sorting for drawing order. Polygons with a value of 1 appear in front of polygons with a value of 0, and so on. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DestinationBlend">
      <summary>One member of the D3dblend enumerated type. The default value is D3DBLEND_ZERO.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DiffuseMateritalSource">
      <summary>Diffuse color source for lighting calculations. Valid values are members of the enumerated type. The default value is D3DMCS_COLOR1. The value for this render state is used only if the D3DRS_COLORVERTEX render state is set to TRUE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DitherEnable">
      <summary>TRUE to enable dithering. The default value is FALSE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.EmissiveMateritalSource">
      <summary>Emissive color source for lighting calculations. Valid values are members of the enumerated type. The default value is D3DMCS_MATERIAL.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.EnableAdaptiveTessellation">
      <summary>TRUE to enable adaptive tessellation, FALSE to disable it. The default value is FALSE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FillMode">
      <summary>One or more members of the D3dfillmode enumerated type. The default value is D3DFILL_SOLID.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogColor">
      <summary>Value whose type is D3dcolor. The default value is 0. For more information on fog color, see FogColor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogDensity">
      <summary>Fog density for pixel or vertex fog used in the exponential fog modes (D3DFOG_EXP and D3DFOG_EXP2). Valid density values range from 0.0 through 1.0. The default value is 1.0. For more information, see FogParameters. Values for this render state are floating-point values. Because the Device9Setrenderstate method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogEnable">
      <summary>TRUE to enable fog blending. The default value is FALSE. For more information on using fog blending, see Fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogEnd">
      <summary>Depth at which pixel or vertex fog effects end for linear fog mode. The default value is 1.0f. Depth is specified in world space for vertex fog and either device space [0.0, 1.0] or world space for pixel fog. For pixel fog, these values are in device space when the system uses z for fog calculations and in world space when the system is using eye-relative fog (w-fog). For more information, see FogParameters and PixelFog. Values for this render state are floating-point values. Because the Device9Setrenderstate method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogStart">
      <summary>Depth at which pixel or vertex fog effects begin for linear fog mode. The default value is 0.0f. Depth is specified in world space for vertex fog and either device space [0.0, 1.0] or world space for pixel fog. For pixel fog, these values are in device space when the system uses z for fog calculations and world-world space when the system is using eye-relative fog (w-fog). For more information, see FogParameters and PixelFog. Values for the this render state are floating-point values. Because the Device9Setrenderstate method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogTableMode">
      <summary>The fog formula to be used for pixel fog. Set to one of the members of the D3dfogmode enumerated type. The default value is D3DFOG_NONE. For more information on pixel fog, see PixelFog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogVertexMode">
      <summary>Fog formula to be used for vertex fog. Set to one member of the D3dfogmode enumerated type. The default value is D3DFOG_NONE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.IndexedVertexBlendEnable">
      <summary>BOOL value that enables or disables indexed vertex blending. The default value is FALSE. When set to TRUE, indexed vertex blending is enabled. When set to FALSE, indexed vertex blending is disabled. If this render state is enabled, the user must pass matrix indices as a packed DWORDwith every vertex. When the render state is disabled and vertex blending is enabled through the D3DRS_VERTEXBLEND state, it is equivalent to having matrix indices 0, 1, 2, 3 in every vertex.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.LastPixel">
      <summary>The default value is TRUE, which enables drawing of the last pixel in a line. To prevent drawing of the last pixel, set this value to FALSE. For more information, see OutlineAndFillState.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Lighting">
      <summary>TRUE to enable Microsoft® Direct3D® lighting, or FALSE to disable it. The default value is TRUE. Only vertices that include a vertex normal are properly lit; vertices that do not contain a normal employ a dot product of 0 in all lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.LocalViewer">
      <summary>TRUE to enable camera-relative specular highlights, or FALSE to use orthogonal specular highlights. The default value is TRUE. Applications that use orthogonal projection should specify false.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.MaxTessellationLevel">
      <summary>Maximum tessellation level. Default value is 1.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.MinTessellationLevel">
      <summary>Minimum tessellation level. Default value is 1.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.MultiSampleAntiAlias">
      <summary>BOOL value that determines how individual samples are computed when using a multisample render target buffer. When set to TRUE, the multiple samples are computed so that full-scene antialiasing is performed by sampling at different sample positions for each multiple sample. When set to FALSE, the multiple samples are all written with the same sample value, sampled at the pixel center, which allows non-antialiased rendering to a multisample buffer. This render state has no effect when rendering to a single sample buffer. The default value is TRUE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.MultiSampleMask">
      <summary>Each bit in this mask, starting at the least significant bit, controls modification of one of the samples in a multisample render target. Thus, for an 8-sample render target, the low byte contains the eight write enables for each of the eight samples. This render state has no effect when rendering to a single sample buffer. The default value is 0xFFFFFFFF. This render state enables use of a multisample buffer as an accumulation buffer, doing multipass rendering of geometry where each pass updates a subset of samples.This render state is not supported if the D3DPRASTERCAPS_STRETCHBLTMULTISAMPLE member of the D3dcaps9 structure is enabled.If there are n multisamples and k enabled samples, the resulting intensity of the rendered image should be k/n. Each component RGB of every pixel is factored by k/n.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.NormalDegree">
      <summary>N-patch normal interpolation degree. The values can be D3DDEGREE_LINEAR (default) or D3DDEGREE_QUADRATIC. For more information, see .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.NormalizeNormals">
      <summary>TRUE to enable automatic normalization of vertex normals, or FALSE to disable it. The default value is FALSE. Enabling this feature causes the system to normalize the vertex normals for vertices after transforming them to camera space, which can be computationally expensive.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PatchEdgeStyle">
      <summary>Sets whether patch edges will use float style tessellation. Possible values are defined by the D3dpatchedgestyle enumerated type. The default value is D3DPATCHEDGE_DISCRETE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointScaleA">
      <summary>A float value that controls for distance-based size attenuation for point primitives. Active only when D3DRS_POINTSCALEENABLE is TRUE. The default value is 1.0f. The range for this value is greater than or equal to 0.0f. Because the Device9Setrenderstate method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointScaleB">
      <summary>BOOL value that controls computation of size for point primitives. When TRUE, the point size is interpreted as a camera space value and is scaled by the distance function and the frustum to viewport y-axis scaling to compute the final screen-space point size. When FALSE, the point size is interpreted as screen space and used directly. The default value is FALSE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointScaleC">
      <summary>A float value that controls for distance-based size attenuation for point primitives. Active only when D3DRS_POINTSCALEENABLE is TRUE. The default value is 0.0f. The range for this value is greater than or equal to 0.0f. Because the Device9Setrenderstate method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointScaleEnable">
      <summary>BOOL value that controls computation of size for point primitives. When TRUE, the point size is interpreted as a camera space value and is scaled by the distance function and the frustum to viewport y-axis scaling to compute the final screen-space point size. When FALSE, the point size is interpreted as screen space and used directly. The default value is FALSE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointSize">
      <summary>A float value that specifies the size to use for point size computation in cases where point size is not specified for each vertex. This value is not used when the vertex contains point size. This value is in screen space units if D3DRS_POINTSCALEENABLE is FALSE; otherwise this value is in world space units. The default value is 1.0f. The range for this value is greater than or equal to 0.0f. Because the method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointSizeMax">
      <summary>A float value that specifies the maximum size to which point sprites will be clamped. The value must be less than or equal to the MaxPointSize member of D3dcaps9 and greater than or equal to D3DRS_POINTSIZE_MIN. The default value is 64.0f. Because the Device9Setrenderstate method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointSizeMin">
      <summary>A float value that specifies the minimum size of point primitives. Point primitives are clamped to this size during rendering. Setting this to values smaller than 1.0 results in points dropping out when the point does not cover a pixel center and antialiasing is disabled or being rendered with reduced intensity when antialiasing is enabled. The default value is 1.0f. The range for this value is greater than or equal to 0.0f. Because the Device9Setrenderstate method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointSpriteEnable">
      <summary>BOOL value. When TRUE, texture coordinates of point primitives are set so that full textures are mapped on each point. When FALSE, the vertex texture coordinates are used for the entire point. The default value is FALSE. You can achieve Microsoft® DirectX® 7.0 style single-pixel points by setting D3DRS_POINTSCALEENABLE to FALSE and D3DRS_POINTSIZE to 1.0, which are the default values.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PositionDegree">
      <summary>N-patch position interpolation degree. The values can be D3DDEGREE_CUBIC (default) or D3DDEGREE_LINEAR. For more information, see D3ddegreetype.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.RangeFogEnable">
      <summary>TRUE to enable range-based vertex fog. The default value is FALSE, in which case the system uses depth-based fog. In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the object (that is, the z-coordinate) in the scene. In range-based fog, all fog methods work as usual, except that they use range instead of depth in the computations. Range is the correct factor to use for fog computations, but depth is commonly used instead because range is expensive to compute and depth is generally already available. Using depth to calculate fog has the undesirable effect of having the fogginess of peripheral objects change as the viewer's eye moves-in this case, the depth changes and the range remains constant.Because no hardware currently supports per-pixel range-based fog, range correction is offered only for vertex fog.For more information, see VertexFog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ReferenceAlpha">
      <summary>Value that specifies a reference alpha value against which pixels are tested when alpha testing is enabled. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ReferenceStencil">
      <summary>An int reference value for the stencil test. The default value is 0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ScissorTestEnable">
      <summary>TRUE to enable scissors testing and FALSE to disable it.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SeparateAlphaBlendEnabled">
      <summary>true if separate alpha blend is enabled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ShadeMode">
      <summary>One or more members of the D3dshademode enumerated type. The default value is D3DSHADE_GOURAUD.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SlopeScaleDepthBias">
      <summary>Used to determine how much bias can be applied to co-planar primitives to reduce z fighting.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SourceBlend">
      <summary>One member of the D3dblend enumerated type. The default value is D3DBLEND_ONE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SpecularEnable">
      <summary>TRUE to enable specular highlights. The default value is FALSE. Specular highlights are calculated as though every vertex in the object being lit is at the object's origin. This gives the expected results as long as the object is modeled around the origin and the distance from the light to the object is relatively large. In other cases the results as undefined.When this member is set to TRUE, the specular color is added to the base color after the texture cascade but before alpha blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SpecularMateritalSource">
      <summary>Specular color source for lighting calculations. Valid values are members of the enumerated type. The default value is D3DMCS_COLOR2.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilEnable">
      <summary>TRUE to enable stenciling, or FALSE to disable stenciling. The default value is FALSE. For more information, see StencilBufferTechniques.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilFail">
      <summary>Stencil operation to perform if the stencil test fails. This can be one member of the D3dstencilop enumerated type. The default value is D3DSTENCILOP_KEEP. For more information, see StencilBufferTechniques.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilFunction">
      <summary>Comparison function for the stencil test. This can be one member of the D3dcmpfunc enumerated type. The default value is D3DCMP_ALWAYS. The comparison function is used to compare the reference value to a stencil buffer entry. This comparison applies only to the bits in the reference value and stencil buffer entry that are set in the stencil mask (set by the D3DRS_STENCILMASK render state). If TRUE, the stencil test passes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilMask">
      <summary>Mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. The default mask is 0xFFFFFFFF.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilPass">
      <summary>Stencil operation to perform if both the stencil and the depth (z) tests pass. This can be one member of the D3dstencilop enumerated type. The default value is D3DSTENCILOP_KEEP.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilWriteMask">
      <summary>Write mask applied to values written into the stencil buffer. The default mask is 0xFFFFFFFF.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilZBufferFail">
      <summary>Stencil operation to perform if the stencil test passes and the depth test (z-test) fails. This can be one of the members of the D3dstencilop enumerated type. The default value is D3DSTENCILOP_KEEP.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.TextureFactor">
      <summary>Color used for multiple-texture blending with the D3DTA_TFACTOR texture-blending argument or the D3DTOP_BLENDFACTORALPHA texture-blending operation. The associated value is a D3dcolor variable. The default value is opaque white (0xFFFFFFFF).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.TweenFactor">
      <summary>A float value that controls the tween factor. The default value is 0.0f. Because the Device9Setrenderstate method accepts DWORD values, your application must cast a variable that contains the value, as shown in the following code example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.TwoSidedStencilMode">
      <summary>A Boolean value. TRUE enables two-sided stenciling, FALSE disables it. The application should set D3DRS_CULLMODE to D3DCULL_NONE to enable two-sided stencil mode. If the triangle winding order is clockwise, the D3DRS_STENCIL* operations will be used. If the winding order is counterclocwise, the D3DRS_CCW_STENCIL* operations will be used.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.UseWBuffer">
      <summary>true to enable w-buffering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.VertexBlend">
      <summary>Number of matrices to use to perform geometry blending, if any. Valid values are members of the D3dvertexblendflags enumerated type. The default value is D3DVBF_DISABLE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap0">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates. Valid values for this render state can be any combination of the D3DWRAPCOORD_0 (or D3DWRAP_U), D3DWRAPCOORD_1 (or D3DWRAP_V), D3DWRAPCOORD_2 (or D3DWRAP_W), and D3DWRAPCOORD_3 flags. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture. The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap1">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates. Valid values for this render state can be any combination of the D3DWRAPCOORD_0 (or D3DWRAP_U), D3DWRAPCOORD_1 (or D3DWRAP_V), D3DWRAPCOORD_2 (or D3DWRAP_W), and D3DWRAPCOORD_3 flags. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture. The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap10">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap11">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap12">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap13">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap14">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap15">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap2">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates. Valid values for this render state can be any combination of the D3DWRAPCOORD_0 (or D3DWRAP_U), D3DWRAPCOORD_1 (or D3DWRAP_V), D3DWRAPCOORD_2 (or D3DWRAP_W), and D3DWRAPCOORD_3 flags. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture. The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap3">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates. Valid values for this render state can be any combination of the D3DWRAPCOORD_0 (or D3DWRAP_U), D3DWRAPCOORD_1 (or D3DWRAP_V), D3DWRAPCOORD_2 (or D3DWRAP_W), and D3DWRAPCOORD_3 flags. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture. The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap4">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates. Valid values for this render state can be any combination of the D3DWRAPCOORD_0 (or D3DWRAP_U), D3DWRAPCOORD_1 (or D3DWRAP_V), D3DWRAPCOORD_2 (or D3DWRAP_W), and D3DWRAPCOORD_3 flags. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture. The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap5">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates. Valid values for this render state can be any combination of the D3DWRAPCOORD_0 (or D3DWRAP_U), D3DWRAPCOORD_1 (or D3DWRAP_V), D3DWRAPCOORD_2 (or D3DWRAP_W), and D3DWRAPCOORD_3 flags. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture. The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap6">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates. Valid values for this render state can be any combination of the D3DWRAPCOORD_0 (or D3DWRAP_U), D3DWRAPCOORD_1 (or D3DWRAP_V), D3DWRAPCOORD_2 (or D3DWRAP_W), and D3DWRAPCOORD_3 flags. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture. The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap7">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates. Valid values for this render state can be any combination of the D3DWRAPCOORD_0 (or D3DWRAP_U), D3DWRAPCOORD_1 (or D3DWRAP_V), D3DWRAPCOORD_2 (or D3DWRAP_W), and D3DWRAPCOORD_3 flags. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture. The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap8">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap9">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ZBufferEnable">
      <summary>true to turn on depth-buffering state, false to disable depth buffering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ZBufferFunction">
      <summary>The depth value of the pixel is compared with the depth-buffer value. If the depth value of the pixel passes the comparison function, the pixel is written. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ZBufferWriteEnable">
      <summary>true to enable the application to write to the depth buffer. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Resource">
      <summary>Applications use the methods of the Resource object to query and prepare resources</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.FreePrivateData(System.Guid)">
      <summary>Frees the specified private data associated with this resource.</summary>
      <param name="guidData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.GetPrivateData(System.Guid)">
      <summary>Copies the private data associated with the resource to a provided buffer.</summary>
      <param name="guidData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.op_Equality(Microsoft.DirectX.Direct3D.Resource,Microsoft.DirectX.Direct3D.Resource)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.op_Inequality(Microsoft.DirectX.Direct3D.Resource,Microsoft.DirectX.Direct3D.Resource)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.PreLoad">
      <summary>Preloads a managed resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.SetPriority(System.Int32)">
      <summary>Assigns the resource-management priority for this resource. </summary>
      <param name="priorityNew" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.SetPrivateData(System.Guid,System.Byte[])">
      <summary>Associates data with the resource that is intended for use by the application, not by . Data is passed by value, and multiple sets of data can be associated with a single resource.</summary>
      <param name="guidData" />
      <param name="privateData" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Device">
      <summary>Retrieves the device associated with a resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Priority">
      <summary>Retrieves the priority for this resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Type">
      <summary>Returns the type of the resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Sampler">
      <summary>Defines the sampler state types.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.AddressU">
      <summary>Texture-address mode for the u coordinate. For more information, see .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.AddressV">
      <summary>Texture-address mode for the v coordinate. For more information, see .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.AddressW">
      <summary>Texture-address mode for the w coordinate. For more information, see .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.BorderColor">
      <summary>Border color or type D3dcolor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.DMapOffset">
      <summary>Vertex offset in the presampled displacement map. This is a constant used by the tessellator, its value is 256.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.ElementIndex">
      <summary>When a multi-element texture is assigned to the sampler, this indicates which element index to use. The default value is 0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MagFilter">
      <summary>Magnification filter of type .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MaxAnisotropy">
      <summary>DWORD maximum anisotropy.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MaxMipLevel">
      <summary>LOD index of largest map to use. Values range from 0 to (n-1) where 0 is the largest.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MinFilter">
      <summary>Minification filter of type .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MipFilter">
      <summary>Mipmap filter to use during minification. See .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MipMapLevelOfDetailBias">
      <summary>Mipmap level of detail bias.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.SrgbTexture">
      <summary>Gamma correction value. The default value is 0, which means gamma is 1.0 and no correction is required. Otherwise, this value means that the sampler should assume gamma of 2.2 on the content and convert it to linear (gamma 1.0) before presenting it to the pixel shader.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SamplerStates">
      <summary>Sampler states for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStates.SamplerState">
      <summary>Sampler state object for this stage.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StateBlock">
      <summary>An encapsulation of render states.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.StateBlock.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Apply">
      <summary>Apply the state block to the current device state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Capture">
      <summary>Capture the device's current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.StateBlockType)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="stateBlockType" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.op_Equality(Microsoft.DirectX.Direct3D.StateBlock,Microsoft.DirectX.Direct3D.StateBlock)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.op_Inequality(Microsoft.DirectX.Direct3D.StateBlock,Microsoft.DirectX.Direct3D.StateBlock)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StateBlock.Device">
      <summary>Get the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StateBlock.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Surface">
      <summary>Applications use the methods of the Surface object to query and prepare surfaces.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Surface.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="data" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="image" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(System.IntPtr,System.Object)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.FromBitmap(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Create a surface from a .NET bitmap object.</summary>
      <param name="device" />
      <param name="image" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Create a surface from a .NET stream object.</summary>
      <param name="device" />
      <param name="data" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetContainer(System.Guid)">
      <summary>Provides access to the parent cube texture or texture (mipmap) object, if this surface is a child level of a cube texture or a mipmap. This method can also provide access to the parent swap chain if the surface is a back-buffer child.</summary>
      <param name="interfaceID" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetGraphics">
      <summary>Retrieves a device context.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="rect" />
      <param name="flags" />
      <param name="pitch" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="flags" />
      <param name="pitch" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="rect" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock" />
      <param name="rect" />
      <param name="flags" />
      <param name="pitch" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock" />
      <param name="flags" />
      <param name="pitch" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock" />
      <param name="rect" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.ReleaseGraphics">
      <summary>Release a device context handle.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.UnlockRectangle">
      <summary>Unlocks a rectangle on a surface.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Surface.Description">
      <summary>Retrieves a description of the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Surface.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SwapChain">
      <summary>Applications use the methods of the SwapChain object to manipulate a swap chain.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.SwapChain.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.PresentParameters)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="presentationParameters" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetBackBuffer(System.Int32,Microsoft.DirectX.Direct3D.BackBufferType)">
      <summary>Retrieves a back buffer from the swap chain of the device.</summary>
      <param name="backBuffer" />
      <param name="typeBuffer" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetFrontBufferData(Microsoft.DirectX.Direct3D.Surface)">
      <summary>Generates a copy of the swapchain's front buffer and places that copy in a system memory buffer provided by the application.</summary>
      <param name="frontBuffer" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.op_Equality(Microsoft.DirectX.Direct3D.SwapChain,Microsoft.DirectX.Direct3D.SwapChain)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.op_Inequality(Microsoft.DirectX.Direct3D.SwapChain,Microsoft.DirectX.Direct3D.SwapChain)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Present,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent" />
      <param name="flags" />
      <param name="sourceRectangle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent" />
      <param name="overrideWindow" />
      <param name="flags" />
      <param name="sourceRectangle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="overrideWindow" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="sourceRectangle" />
      <param name="destRectangle" />
      <param name="overrideWindow" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent" />
      <param name="sourceRectangle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent" />
      <param name="overrideWindow" />
      <param name="sourceRectangle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Windows.Forms.Control)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="overrideWindow" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="sourceRectangle" />
      <param name="destRectangle" />
      <param name="overrideWindow" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.Device">
      <summary>Retrieves the device associated with the swap chain.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.DisplayMode">
      <summary>Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.PresentParamters">
      <summary>Current presentation parameters associated with this swap chain.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.RasterStatus">
      <summary>Returns information describing the raster of the monitor on which the swap chain is presented.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Texture">
      <summary>Applications use the methods of the Texture object to manipulate a texture resource.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.AddDirtyRectangle">
      <summary>Adds a dirty region to a texture resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.AddDirtyRectangle(System.Drawing.Rectangle)">
      <summary>Adds a dirty region to a texture resource.</summary>
      <param name="rect" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="data" />
      <param name="usage" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="image" />
      <param name="usage" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="width" />
      <param name="height" />
      <param name="numLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.FromBitmap(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a texture resource from a .NET bitmap.</summary>
      <param name="device" />
      <param name="image" />
      <param name="usage" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a texture resource from a .NET stream object.</summary>
      <param name="device" />
      <param name="data" />
      <param name="usage" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a level description of a texture resource.</summary>
      <param name="level" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetSurfaceLevel(System.Int32)">
      <summary>Retrieves the specified texture surface level.</summary>
      <param name="level" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level" />
      <param name="rect" />
      <param name="flags" />
      <param name="pitch" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level" />
      <param name="flags" />
      <param name="pitch" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level" />
      <param name="rect" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock" />
      <param name="level" />
      <param name="rect" />
      <param name="flags" />
      <param name="pitch" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock" />
      <param name="level" />
      <param name="flags" />
      <param name="pitch" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock" />
      <param name="level" />
      <param name="rect" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock" />
      <param name="level" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.op_Equality(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.op_Inequality(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.UnlockRectangle(System.Int32)">
      <summary>Unlocks a rectangle on a texture resource.</summary>
      <param name="level" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureState">
      <summary>Texture states for this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument0">
      <summary>Settings for the alpha channel selector operand for triadic operations (multiply add and linear interpolation), identified by D3DTAConstants. This setting is supported if the D3DTEXOPCAPS_MULTIPLYADD or D3DTEXOPCAPS_LERP device capabilities are present. The default argument is D3DTA_CURRENT. Specify D3DTA_TEMP to select a temporary register color for read or write. D3DTA_TEMP is supported if the D3DPMISCCAPS_TSSARGTEMP device capability is present. The default argument is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument1">
      <summary>The texture-stage state is the first alpha argument for the stage, identified by by D3DTAConstants. The default argument is D3DTA_TEXTURE. If no texture is set for this stage, the default argument is D3DTA_DIFFUSE. Specify D3DTA_TEMP to select a temporary register color for read or write. D3DTA_TEMP is supported if the D3DPMISCCAPS_TSSARGTEMP device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument2">
      <summary>The texture-stage state is the second alpha argument for the stage, identified by by D3DTAConstants. The default argument is D3DTA_CURRENT. Specify D3DTA_TEMP to select a temporary register color for read or write. D3DTA_TEMP is supported if the D3DPMISCCAPS_TSSARGTEMP device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.AlphaOperation">
      <summary>The texture-stage state is a texture alpha blending operation identified by one member of the D3dtextureop enumerated type. The default value for the first texture stage (stage 0) is D3DTOP_SELECTARG1, and for all other stages the default is D3DTOP_DISABLE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentLuminanceOffset">
      <summary>Floating-point offset value for bump-map luminance. The default value is 0.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentLuminanceScale">
      <summary>Floating-point scale value for bump-map luminance. The default value is 0.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentMaterial00">
      <summary>The texture-stage state is a floating-point value for the [0][0] coefficient in a bump-mapping matrix. The default value is 0.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentMaterial01">
      <summary>The texture-stage state is a floating-point value for the [0][1] coefficient in a bump-mapping matrix. The default value is 0.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentMaterial10">
      <summary>The texture-stage state is a floating-point value for the [1][0] coefficient in a bump-mapping matrix. The default value is 0.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentMaterial11">
      <summary>The texture-stage state is a floating-point value for the [1][1] coefficient in a bump-mapping matrix. The default value is 0.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument0">
      <summary>Settings for the third color operand for triadic operations (multiply add and linear interpolation), identified by D3DTAConstants. This setting is supported if the D3DTEXOPCAPS_MULTIPLYADD or D3DTEXOPCAPS_LERP device capabilities are present. The default argument is D3DTA_CURRENT. Specify D3DTA_TEMP to select a temporary register color for read or write. D3DTA_TEMP is supported if the D3DPMISCCAPS_TSSARGTEMP device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument1">
      <summary>The texture-stage state is the first color argument for the stage, identified by one of the D3DTAConstants. The default argument is D3DTA_TEXTURE. Specify D3DTA_TEMP to select a temporary register color for read or write. D3DTA_TEMP is supported if the D3DPMISCCAPS_TSSARGTEMP device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument2">
      <summary>The texture-stage state is the second color argument for the stage, identified by D3DTAConstants. The default argument is D3DTA_CURRENT. Specify D3DTA_TEMP to select a temporary register color for read or write. D3DTA_TEMP is supported if the D3DPMISCCAPS_TSSARGTEMP device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0)</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation">
      <summary>The texture-stage state is a texture color blending operation identified by one member of the D3dtextureop enumerated type. The default value for the first texture stage (stage 0) is D3DTOP_MODULATE, and for all other stages the default is D3DTOP_DISABLE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.Constant">
      <summary>Per-stage constant color. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ResultArg">
      <summary>Setting to select destination register for the result of this stage, identified by D3DTAConstants. This value can be set to D3DTA_CURRENT (the default value) or to D3DTA_TEMP, which is a single temporary register that can be read into subsequent stages as an input argument. The final color passed to the fog blender and frame buffer is taken from D3DTA_CURRENT, so the last active texture stage state must be set to write to current. This setting is supported if the D3DPMISCCAPS_TSSARGTEMP device capability is present.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.TextureCoordinateIndex">
      <summary>Index of the texture coordinate set to use with this texture stage. You can specify up to eight sets of texture coordinates per vertex. If a vertex does not include a set of texture coordinates at the specified index, the system defaults to the u and v coordinates (0,0). This flag is used only for fixed-function vertex processing. For example, it should not be used with vertex shaders. When rendering using vertex shaders, each stage's texture coordinate index must be set to its default value. The default index for each stage is equal to the stage index. Set this state to the zero-based index of the coordinate set for each vertex that this texture stage uses.Additionally, applications can include, as logical Or with the index being set, one of the following flags to request that Microsoft® Direct3D® automatically generate the input texture coordinates for a texture transformation. With the exception of D3DTSS_TCI_PASSTHRU, which resolves to zero, if any of the following values is included with the index being set, the system uses the index strictly to determine texture wrapping mode. These flags are most useful when performing environment mapping.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.TextureTransform">
      <summary>Controls the transformation of texture coordinates for this texture stage. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureStates">
      <summary>Texture states on this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStates.TextureState">
      <summary>Texture states for this stage.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TooManyOperationsException">
      <summary>The application is requesting more texture-filtering operations than the device supports.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Transforms">
      <summary>Transforms on this object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.GetWorldMatrixByIndex(System.Int32)">
      <summary>Gets the world matrix by index.</summary>
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Set the world matrix by index.</summary>
      <param name="index" />
      <param name="value" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Projection">
      <summary>Identifies the transformation matrix being set as the projection transformation matrix. The default value is NULL (the identity matrix).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture0">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture1">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture2">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture3">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture4">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture5">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture6">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture7">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.View">
      <summary>Identifies the transformation matrix being set as the view transformation matrix. The default value is NULL (the identity matrix).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World">
      <summary>First world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World1">
      <summary>Second world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World2">
      <summary>Third world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World3">
      <summary>Fourth world matrix.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException">
      <summary>The device does not support a specified texture-blending argument for the alpha channel.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException">
      <summary>The device does not support a specified texture-blending operation for the alpha channel.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException">
      <summary>The device does not support a specified texture-blending argument for color values.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException">
      <summary>The device does not support a specified texture-blending operation for color values.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException">
      <summary>The device does not support the specified texture factor value.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException">
      <summary>The device does not support the specified texture filter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBuffer">
      <summary>Applications use the methods of the VertexBuffer object to manipulate vertex buffer resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexBuffer.Created">
      <summary>Occurs after a device has been reset and the Index Buffer has been recreated.  Note: Only occurs on Pool.Default resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexBuffer.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="sizeOfBufferInBytes" />
      <param name="usage" />
      <param name="vertexFormat" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="typeVertexType" />
      <param name="numVerts" />
      <param name="device" />
      <param name="usage" />
      <param name="vertexFormat" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
      <param name="usage" />
      <param name="vertexFormat" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of vertex data and obtains a reference to the vertex buffer memory.</summary>
      <param name="offsetToLock" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of vertex data and obtains a reference to the vertex buffer memory.</summary>
      <param name="offsetToLock" />
      <param name="sizeToLock" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a range of vertex data and obtains a reference to the vertex buffer memory.</summary>
      <param name="offsetToLock" />
      <param name="typeVertex" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.raise_Created(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.SetData(System.Object,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of vertex data and obtains a reference to the vertex buffer memory.</summary>
      <param name="data" />
      <param name="lockAtOffset" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Unlock">
      <summary>Unlocks vertex data.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBuffer.Description">
      <summary>Retrieves a description of the vertex buffer resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBuffer.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexDeclaration">
      <summary>An encapsulation of the vertex shader declaration.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexDeclaration.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="vertexElements" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="vertexElements" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetDeclaration">
      <summary>Get the vertex shader declaration.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.op_Equality(Microsoft.DirectX.Direct3D.VertexDeclaration,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.op_Inequality(Microsoft.DirectX.Direct3D.VertexDeclaration,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexDeclaration.Device">
      <summary>Device used to create this vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexDeclaration.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexShader">
      <summary>Encapsulate the functionality of a vertex shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexShader.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="functionToken" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="functionToken" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="interfaceDefinition" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetFunction">
      <summary>Get a reference to the shader data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.op_Equality(Microsoft.DirectX.Direct3D.VertexShader,Microsoft.DirectX.Direct3D.VertexShader)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.op_Inequality(Microsoft.DirectX.Direct3D.VertexShader,Microsoft.DirectX.Direct3D.VertexShader)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShader.Device">
      <summary>Get the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShader.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexTextureCoordinate">
      <summary>Texture coordinate for vertex.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size1(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate formats within a flexible vertex format description. </summary>
      <param name="coordIndex" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size2">
      <summary>Constructs bit patterns that are used to identify texture coordinate formats within a flexible vertex format description. </summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size3(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate formats within a flexible vertex format description. </summary>
      <param name="coordIndex" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size4(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate formats within a flexible vertex format description. </summary>
      <param name="coordIndex" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Volume">
      <summary>Applications use the methods of the Volume object to manipulate volume resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Volume.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.VolumeTexture)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.FreePrivateData(System.Guid)">
      <summary>Frees the specified private data associated with this volume.</summary>
      <param name="guidData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetContainer(System.Guid)">
      <summary>Provides access to the parent volume texture object, if this surface is a child level of a volume texture.</summary>
      <param name="interfaceID" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetPrivateData(System.Guid)">
      <summary>Copies the private data associated with the volume to a provided buffer.</summary>
      <param name="guidData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="box" />
      <param name="flags" />
      <param name="lockedVolume" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="flags" />
      <param name="lockedVolume" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="box" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock" />
      <param name="box" />
      <param name="flags" />
      <param name="lockedVolume" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock" />
      <param name="flags" />
      <param name="lockedVolume" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock" />
      <param name="box" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.SetPrivateData(System.Guid,System.Byte[])">
      <summary>Associates data with the volume that is intended for use by the application, not by .</summary>
      <param name="guidData" />
      <param name="privateData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.UnlockBox">
      <summary>Unlocks a box on a volume resource.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Description">
      <summary>Retrieves a description of the volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Device">
      <summary>Retrieves the device associated with a volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeTexture">
      <summary>Checks volume-texture-creation parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.AddDirtyBox(Microsoft.DirectX.Direct3D.Box)">
      <summary>Adds a dirty region to a volume texture resource.</summary>
      <param name="box" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.AddDirtyBox">
      <summary>Adds a dirty region to a volume texture resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="numLevels" />
      <param name="format" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a level description of a volume texture resource.</summary>
      <param name="level" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetVolumeLevel(System.Int32)">
      <summary>Retrieves the specified volume texture level.</summary>
      <param name="level" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level" />
      <param name="box" />
      <param name="flags" />
      <param name="lockedVolume" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level" />
      <param name="flags" />
      <param name="lockedVolume" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level" />
      <param name="box" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock" />
      <param name="level" />
      <param name="box" />
      <param name="flags" />
      <param name="lockedVolume" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock" />
      <param name="level" />
      <param name="flags" />
      <param name="lockedVolume" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock" />
      <param name="level" />
      <param name="box" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock" />
      <param name="level" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.UnlockBox(System.Int32)">
      <summary>Unlocks a box on a volume texture resource.</summary>
      <param name="level" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WasStillDrawingException">
      <summary>The device was still drawing.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WrongTextureFormatException">
      <summary>The pixel format of the texture surface is not valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFile">
      <summary>Applications use the methods of the XFile object to retrieve information about Microsoft® DirectX® file objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetDataObjectById(System.Guid)">
      <summary>Retrieves the data object that has the specified globally unique identifier (GUID). </summary>
      <param name="dataId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetDataObjectByName(System.String)">
      <summary>Retrieves the data object that has the specified name. </summary>
      <param name="dataName" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFile.NextDataObject">
      <summary>Retrieves the next top-level object in the Microsoft® DirectX® file.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileBinary">
      <summary>Applications use the methods of the XFileBinary object to read and retrieve information about binary data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileBinary.#ctor(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xfile" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileBinary.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileBinary.FromXFileObject(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Create a new binary object from a XFileObject.</summary>
      <param name="xfile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileBinary.Read(System.Int32,System.Int32@)">
      <summary>Reads the binary data. </summary>
      <param name="numberBytes" />
      <param name="actualBytes" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileBinary.MimeType">
      <summary>Retrieves the Multipurpose Internet Mail Extensions (MIME) type for the binary data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileBinary.Size">
      <summary>Retrieves the size of the binary data.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileData">
      <summary>Applications use the methods of the XFileData object to build or to access the immediate hierarchy of the data object. Template restrictions determine the hierarchy. Data types allowed by the template are called optional members. The optional members are not required, but an object might miss important information without them. These optional members are saved as children of the data object. The children can be another data object, a reference to an earlier data object, or a binary object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddBinaryObject(System.String,System.String,System.Byte[])">
      <summary>Creates a binary object and adds it as a child object.</summary>
      <param name="name" />
      <param name="mimeType" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddBinaryObject(System.Guid,System.String,System.Byte[])">
      <summary>Creates a binary object and adds it as a child object.</summary>
      <param name="guid" />
      <param name="mimeType" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddBinaryObject(System.String,System.Guid,System.String,System.Byte[])">
      <summary>Creates a binary object and adds it as a child object.</summary>
      <param name="name" />
      <param name="guid" />
      <param name="mimeType" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddDataObject(Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Adds a data object as a child object. </summary>
      <param name="dataObject" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddDataReference(System.String,System.Guid)">
      <summary>Creates and adds a data reference object as a child object. </summary>
      <param name="reference" />
      <param name="guidReference" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddDataReference(System.Guid)">
      <summary>Creates and adds a data reference object as a child object. </summary>
      <param name="guidReference" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddDataReference(System.String)">
      <summary>Creates and adds a data reference object as a child object. </summary>
      <param name="reference" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xfile" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.#ctor(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xfile" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.FromXFileObject(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Creates a new XFileData object from a XFileObject.</summary>
      <param name="xfile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetData(System.String)">
      <summary>Retrieves the data for one of the object's members or the data for all members. </summary>
      <param name="member" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.NextObject">
      <summary>Retrieves the next child data object, data reference object, or binary object in the Microsoft DirectX® file.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.Type">
      <summary>Retrieves the globally unique identifier (GUID) of the object's template.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileDataReference">
      <summary>Applications use the methods of the XFileDataReference object to support data reference objects. A data reference object refers to a data object that is defined earlier in the file. This enables you to use the same object multiple times without repeating it in the file. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileDataReference.#ctor(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xfile" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileDataReference.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileDataReference.FromXFileObject(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Create a new XFileDataReference object from a XFile object.</summary>
      <param name="xfile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileDataReference.Resolve">
      <summary>Resolves data references. </summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileGuid">
      <summary>Various guids for using with XFiles.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Animation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationKey">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationOptions">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationSet">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ApplicationData">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Boolean">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Boolean2d">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Camera">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ColorRgb">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ColorRgba">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Coordinates2D">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ExternalVisual">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FloatKeys">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Frame">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FramePosition">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameRotation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameTransformMatrix">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameVelocity">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.IndexedColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Info">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.InlineData">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Light">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightAttenuation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightPenumbra">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightRange">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightUmbra">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Material">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialAmbientColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialArray">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialDiffuseColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialEmissiveColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialPower">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialSpecularColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialWrap">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Matrix4x4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Mesh">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshFace">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshFaceWraps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshMaterialList">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshNormals">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshTextureCoords">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshVertexColors">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ProgressiveMesh">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.PropertyBag">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.RightHanded">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.RmGuid">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.StringProperty">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TextureFilename">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TextureReference">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TimedFloatKeys">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Url">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Vector">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileManager">
      <summary>Used to managed XFile objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.CreateSaveObject(System.String,Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Creates a save object. </summary>
      <param name="fileName" />
      <param name="fileFormat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="obj" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.LoadFromFile(System.String)">
      <summary>Create a new xfile object from a file.</summary>
      <param name="filename" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.LoadFromStream(System.IO.Stream)">
      <summary>Create a new xfile object from a stream.</summary>
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.LoadFromStream(System.IO.Stream,System.Int32)">
      <summary>Create a new xfile object from a stream.</summary>
      <param name="data" />
      <param name="length" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.LoadFromUrl(System.String)">
      <summary>Create a new xfile object from an URL.</summary>
      <param name="url" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterDefaultTemplates">
      <summary>Registers custom templates. </summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterTemplates(System.Byte[])">
      <summary>Registers custom templates. </summary>
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterTemplates(System.String)">
      <summary>Registers custom templates. </summary>
      <param name="data" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileObject">
      <summary>Applications use the methods of the XFileObject to retrieve information about Microsoft® DirectX® file objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileObject.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileObject.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileObject.Id">
      <summary>Retrieves a reference to the GUID that identifies a Microsoft DirectX® file object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileObject.Name">
      <summary>Retrieves a reference to a Microsoft DirectX® file object's name.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileSaveObject">
      <summary>Applications use the methods of the XFileSaveObject to create data objects and to save templates and data objects. Note that templates are not required in every file. For example, you could put all templates into a single Microsoft® DirectX® file rather than duplicating them in every DirectX file. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.CreateDataObject(System.Guid,System.String,System.Guid,System.Byte[])">
      <summary>Creates a data object. </summary>
      <param name="guidTemplate" />
      <param name="name" />
      <param name="guidData" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.CreateDataObject(System.Guid,System.String,System.Guid,System.String)">
      <summary>Creates a data object. </summary>
      <param name="guidTemplate" />
      <param name="name" />
      <param name="guidData" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="obj" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.SaveData(Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Saves a data object and its children to a  file. </summary>
      <param name="dataObject" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.SaveTemplates(System.Guid[])">
      <summary>Saves templates to a  file. </summary>
      <param name="templates" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BackBufferType">
      <summary>Defines constants that describe the type of back buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.Right">
      <summary>Specifies the right side of a stereo pair in a swap chain.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.Left">
      <summary>Specifies the left side of a stereo pair in a swap chain.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.Mono">
      <summary>Specifies a nonstereo swap chain.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BasisType">
      <summary>Defines the basis type of a high-order patch surface.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.CatMullRom">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.BSpline">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.Bezier">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Blend">
      <summary>Defines the supported TermBlendMode.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvBlendFactor">
      <summary>Inverted constant color blending factor used by the frame-buffer blender. This blend mode is supported only if D3DPBLEND_BLENDFACTOR is on.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.BlendFactor">
      <summary>Constant color blending factor used by the frame-buffer blender. This blend mode is supported only if D3DPBLEND_BLENDFACTOR is on.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.BothInvSourceAlpha">
      <summary>Source blend factor is (), and destination blend factor is (); the destination blend selection is overridden. This blend mode is supported only for the D3DRS_SRCBLEND render state.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.BothSourceAlpha">
      <summary>Obsolete. For Microsoft® DirectX® 6.0 and later, you can achieve the same effect by setting the source and destination blend factors to D3DBLEND_SRCALPHA and D3DBLEND_INVSRCALPHA in separate calls.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.SourceAlphaSat">
      <summary>Blend factor is (f, f, f, 1); f = min(A, 1-A).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvDestinationColor">
      <summary>Blend factor is ().</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.DestinationColor">
      <summary>Blend factor is ().</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvDestinationAlpha">
      <summary>Blend factor is ().</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.DestinationAlpha">
      <summary>Blend factor is ().</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvSourceAlpha">
      <summary>Blend factor is ().</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.SourceAlpha">
      <summary>Blend factor is ().</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvSourceColor">
      <summary>Blend factor is ().</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.SourceColor">
      <summary>Blend factor is ().</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.One">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.Zero">
      <summary>Blend factor is (0, 0, 0, 0).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BlendOperation">
      <summary>Defines the supported blend operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.Add">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.Max">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.Min">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.RevSubtract">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.Subtract">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClearFlags">
      <summary>Defines the supported clear flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.Stencil">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.Target">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.ZBuffer">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipStatusFlags">
      <summary>Describes the current clip status.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Back">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Front">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Bottom">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Top">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Right">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Left">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.All">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane5">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane0">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorSource">
      <summary>Defines the location at which a color or color component must be accessed for lighting calculations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.Color2">
      <summary>Use the specular vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.Color1">
      <summary>Use the diffuse vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.Material">
      <summary>Use the color from the current material.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorWriteEnable">
      <summary>Flags for the ColorWriteEnable renderstate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.Alpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.Blue">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.Green">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.Red">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.RedGreenBlueAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.RedGreenBlue">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Compare">
      <summary>Defines the supported compare functions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Always">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.GreaterEqual">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.NotEqual">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Greater">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.LessEqual">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Equal">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Less">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Never">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CreateFlags">
      <summary>Flags used when creating a device.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.AdapterGroupDevice">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.DisableDriverManagement">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.MixedVertexProcessing">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.HardwareVertexProcessing">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.SoftwareVertexProcessing">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.PureDevice">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.MultiThreaded">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.FpuPreserve">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CubeMapFace">
      <summary>Defines the faces of a cubemap.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.NegativeZ">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.PositiveZ">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.NegativeY">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.PositiveY">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.NegativeX">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.PositiveX">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Cull">
      <summary>Defines the supported culling modes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.CounterClockwise">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.Clockwise">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.None">
      <summary>Do not cull back faces.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationMethod">
      <summary>Defines declaration methods for a vertex declaration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUpPresampled">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUp">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.UV">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.CrossUv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.PartialV">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.PartialU">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.Default">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationType">
      <summary>Defines declaration types for a vertex declaration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Unused">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float16Four">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float16Two">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Dec3N">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.UDec3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.UShort4N">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.UShort2N">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4N">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Short2N">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4N">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Short2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float1">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationUsage">
      <summary>Defines declaration usage for a vertex declaration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Depth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Position">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Sample">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Fog">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.PositionTransformed">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TessellateFactor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BiNormal">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Tangent">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TextureCoordinate">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.PointSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Normal">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BlendIndices">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BlendWeight">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DegreeType">
      <summary>Defines the degree of the variables in the equation that describes a curve.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.Quintic">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.Cubic">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.Quadratic">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.Linear">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DepthFormat">
      <summary>Depth buffer formats.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D24SingleS8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D32SingleLockable">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D24X4S4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D24X8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.L16">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D16">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D24S8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D15S1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D32">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D16Lockable">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceType">
      <summary>Defines device types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.Software">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.Reference">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.Hardware">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplacementMap">
      <summary>DisplacementMap constants.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.Sampler">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.VertexTextureSampler3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.VertexTextureSampler2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.VertexTextureSampler1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.VertexTextureSampler0">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FillMode">
      <summary>Defines constants describing the fill mode.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.Point">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.Solid">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.WireFrame">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FogMode">
      <summary>Defines constants that describe the fog mode.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.Linear">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.Exp2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.Exp">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.None">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Format">
      <summary>Defines the various types of surface formats. </summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.G8R8G8B8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R8G8B8G8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.CxV8U8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A32B32G32R32F">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.G32R32F">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R32F">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A16B16G16R16F">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.G16R16F">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R16F">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Multi2Argb8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Q16W16V16U16">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.VertexData">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt5">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Yuy2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Uyvy">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A2W10V10U10">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.V16U16">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Q8W8V8U8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X8L8V8U8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.L6V5U5">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.V8U8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A4L4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8L8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.L8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.P8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8P8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A16B16G16R16">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A2R10G10B10">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.G16R16">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X8B8G8R8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8B8G8R8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A2B10G10R10">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X4R4G4B4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8R3G3B2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R3G3B2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A4R4G4B4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A1R5G5B5">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X1R5G5B5">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R5G6B5">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X8R8G8B8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8R8G8B8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R8G8B8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Unknown">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GetDataFlags">
      <summary>Flags for getting data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.GetDataFlags.Flush">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IssueFlags">
      <summary>Issue flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.IssueFlags.End">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.IssueFlags.Begin">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LightType">
      <summary>Defines the light type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.Point">
      <summary>Light is a point source. The light has a position in space and radiates light in all directions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.Directional">
      <summary>Light is a TermDirectional source. This is equivalent to using a point light source at an infinite distance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.Spot">
      <summary>Light is a TermSpotlight source. This light is like a point light, except that the illumination is limited to a cone. This light type has a direction and several other parameters that determine the shape of the cone it produces. For information about these parameters, see the D3dlight9Otherstructure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LockFlags">
      <summary>Describe the type of lock to perform. </summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.Discard">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.NoOverwrite">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.None">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MultiSampleType">
      <summary>Defines levels of full-scene multisampling that the device can apply.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.SixteenSamples">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.FifteenSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.FourteenSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.ThirteenSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.TwelveSamples">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.ElevenSamples">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.TenSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.NineSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.EightSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.SevenSamples">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.SixSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.FiveSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.FourSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.ThreeSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.TwoSamples">
      <summary>The level of full-scene multisampling available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.NonMaskable">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.None">
      <summary>No level of full-scene multisampling is available.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchEdge">
      <summary>Defines whether the current tessellation mode is discrete or continuous</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchEdge.Continuous">
      <summary>Continuous edge style. In continuous mode, tessellation is specified as float values which can be smoothly varied to reduce "popping" artifacts.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchEdge.Discrete">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Pool">
      <summary>Defines the memory class that holds a resource's buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.Scratch">
      <summary>Resources are placed in system RAM and do not need to be re-created when a device is lost. These resources are not bound by device size or format restrictions. Because of this, these resources cannot be accessed by the Microsoft® Direct3D® device nor set as textures or render targets. However, these resources can always be created, locked, and copied.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory">
      <summary>Memory that is not typically accessible by the 3-D device. Consumes system RAM but does not reduce pageable RAM. These resources do not need to be re-created when a device is lost. Resources in this pool can be locked and can be used as the source for a Direct3DDevice9UpdateSurface or Device9Updatetexture operation to a memory resource created with D3DPOOL_DEFAULT.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.Managed">
      <summary>Resources are copied automatically to device-accessible memory as needed. Managed resources are backed by system memory and do not need to be re-created when a device is lost. See Managing</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.Default">
      <summary>Resources are placed in the memory pool most appropriate for the set of usages requested for the given resource. This is usually video memory, including both local video memory and accelerated graphics port memory. The D3DPOOL_DEFAULT pool is separate from D3DPOOL_MANAGED and D3DPOOL_SYTEMMEM, and it specifies that the resource is placed in the preferred memory for device access. Note that D3DPOOL_DEFAULT never indicates that either D3DPOOL_MANAGED or D3DPOOL_SYSTEMMEM should be chosen as the memory pool type for this resource. Textures placed in the D3DPOOL_DEFAULT pool cannot be locked unless they are dynamic textures or they are private (FOURCC) driver formats. To access unlockable textures, you must use functions such as Direct3DDevice9UpdateSurface and Device9Updatetexture. D3DPOOL_MANAGED is probably a better choice than D3DPOOL_DEFAULT for most applications. Note that some textures created in driver proprietary pixel formats, unknown to the Microsoft® Direct3D® runtime, can be locked. Also note that-unlike textures-swapchain back buffers, render targets, vertex buffers, and index buffers can be locked. When a device is lost, resources created using D3DPOOL_DEFAULT must be released before calling Device9Reset. For more information, see LostDevices.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Present">
      <summary>Present flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.LinearContent">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.DoNotWait">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.BackBuffersMax">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentFlag">
      <summary>Present flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.Video">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.ForceGdiDraw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.DeviceClip">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.DiscardDepthStencil">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.LockableBackBuffer">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.None">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentInterval">
      <summary>Presentation Interval constants.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Immediate">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Four">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Three">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Two">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.One">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Default">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PrimitiveType">
      <summary>Defines the primitives supported by Microsoft® Direct3D®.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.TriangleFan">
      <summary>Renders the vertices as a triangle fan.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.TriangleStrip">
      <summary>Renders the vertices as a triangle strip. The backface-culling flag is automatically flipped on even-numbered triangles.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.TriangleList">
      <summary>Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back-face culling is affected by the current winding-order render state.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.LineStrip">
      <summary>Renders the vertices as a single polyline. Calls using this primitive type fail if the count is less than two.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.LineList">
      <summary>Renders the vertices as a list of isolated straight line segments. Calls using this primitive type fail if the count is less than two or is odd.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.PointList">
      <summary>Renders the vertices as a collection of isolated points. This value is unsupported for indexed primitives.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.QueryType">
      <summary>Identifies the query type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.Event">
      <summary>Query for an event.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.ResourceManager">
      <summary>Query the resource manager.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.Occlusion">
      <summary>Issue Issuebegin and Issueend.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.VertexStats">
      <summary>Query vertex statistics.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderTargetsMax">
      <summary>Maximum render targets.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderTargetsMax.Simultaneous">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResourceType">
      <summary>Defines resource types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.IndexBuffer">
      <summary>Index buffer resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.VertexBuffer">
      <summary>Vertex buffer resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.CubeTexture">
      <summary>Cube texture resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.VolumeTexture">
      <summary>Volume texture resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.Volume">
      <summary>Volume resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.Surface">
      <summary>Surface resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.Textures">
      <summary>Texture resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResultCode">
      <summary>Result codes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.InvalidCall">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.InvalidDevice">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.NotAvailable">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.DeviceNotReset">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.DeviceLost">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedTextureFilter">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedFactorValue">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.ConflictingTextureFilter">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.TooManyOperations">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedAlphaArgument">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedAlphaOperation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedColorArgument">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedColorOperation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.WrongTextureFormat">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.Success">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShadeMode">
      <summary>Defines constants that describe the supported shading modes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.Phong">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.Gouraud">
      <summary>Gouraud shading mode. The color and specular components of the face are determined by a linear interpolation between all three of the triangle's vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.Flat">
      <summary>Flat shading mode. The color and specular component of the first vertex in the triangle are used to determine the color and specular component of the face. These colors remain constant across the triangle; that is, they are not interpolated. The specular alpha is interpolated. See Remarks.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StateBlockType">
      <summary>Defines logical groups of device states.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.VertexState">
      <summary>Capture all the current lights, the current vertex shader and vertex shader constants, and the texture stage states specified by D3DTSS_TEXCOORDINDEX and D3DTSS_TEXTURETRANSFORMFLAGS. In addition, this flag captures all of the following vertex-related device states. Render States</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.PixelState">
      <summary>Capture the current pixel shader and pixel shader constants, as well as all of the following pixel-related device states. Render StatesTexture Stage States</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.All">
      <summary>Capture all of the following device states.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StencilOperation">
      <summary>Supported stencil operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Replace">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Decrement">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Increment">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Invert">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.DecrementSaturation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.IncrementSaturation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Zero">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Keep">
      <summary>Do not update the entry in the stencil buffer. This is the default value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SwapEffect">
      <summary>Defines swap effects.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy">
      <summary>This swap effect may be specified only for a swap chain comprising a single back buffer. Whether the swap chain is windowed or full-screen, the runtime will guarantee the semantics implied by a copy-based Present operation, namely that the operation leaves the content of the back buffer unchanged, instead of replacing it with the content of the front buffer as a flip-based Present operation would. For a windowed swap chain, a Present operation causes the back buffer content to be copied to the client area of the target window immediately. No attempt is made to synchronize the copy with the vertical retrace period of the display adapter, so "tearing" effects may be observed.For a full-screen swap chain, the runtime uses a combination of flip operations and copy operations, supported if necessary by hidden back buffers, to accomplish the Present operation. Accordingly, the presentation is synchronized with the display adapter's vertical retrace and its rate is constrained by the chosen presentation interval. A swap chain specified with the D3DPRESENT_INTERVAL_IMMEDIATE flag is the only exception. (Refer to the description of the FullScreen_PresentationInterval member of the D3dpresentParameters structure.) In this case, a Present operation copies the back buffer content directly to the front buffer without waiting for the vertical retrace.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard">
      <summary>When a swap chain is created with a swap effect of D3DSWAPEFFECT_FLIP or D3DSWAPEFFECT_COPY, the runtime will guarantee that a Device9Present operation will not affect the content of any of the back buffers. Unfortunately, meeting this guarantee can involve substantial video memory or processing overheads, especially when implementing flip semantics for a windowed swap chain or copy semantics for a full-screen swap chain. An application may use the D3DSWAPEFFECT_DISCARD swap effect to avoid these overheads and to enable the display driver to select the most efficient presentation technique for the swap chain. This is also the only swap effect that may be used when specifying a value other than D3DMULTISAMPLE_NONE for the MultiSampleType member of D3dpresentParameters. Like a swap chain that uses D3DSWAPEFFECT_FLIP, a swap chain that uses D3DSWAPEFFECT_DISCARD might include more than one back buffer, any of which may be accessed using Device9Getbackbuffer or Swapchain9Getbackbuffer. The swap chain is best envisaged as a queue in which 0 always indexes the back buffer that will be displayed by the next Present operation and from which buffers are discarded once they have been displayed.An application that uses this swap effect cannot make any assumptions about the contents of a discarded back buffer and should therefore update an entire back buffer before invoking a Present operation that would display it. Although this is not enforced, the debug version of the runtime will overwrite the contents of discarded back buffers with random data to enable developers to verify that their applications are updating the entire back buffer surfaces correctly.For a full-screen swap chain, the presentation rate is determined by the value assigned to the FullScreen_PresentationInterval member of the D3dpresentParameters structure when the device or swap chain is created. Unless this value is D3DPRESENT_INTERVAL_IMMEDIATE, the presentation will be synchronized with the vertical sync of the monitor. For a windowed swap chain, the presentation is implemented by means of copy operations and always occurs immediately.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip">
      <summary>The swap chain might include multiple back buffers and is best envisaged as a circular queue that includes the front buffer. Within this queue, the back buffers are always numbered sequentially from 0 to (n - 1), where n is the number of back buffers, so that 0 denotes the least recently presented buffer. When Present is invoked, the queue is "rotated" so that the front buffer becomes back buffer (n - 1), while the back buffer 0 becomes the new front buffer.For a full-screen swap chain, the presentation rate is determined by the value assigned to the FullScreen_PresentationInterval member of the D3DPRESENT_PARAMETERS structure when the device or swap chain is created. Unless this value is D3DPRESENT_INTERVAL_IMMEDIATE, the presentation will be synchronized with the vertical sync of the monitor. For a windowed swap chain, the flipping is implemented by means of copy operations and the presentation always occurs immediately.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureAddress">
      <summary>Defines constants that describe the supported texture-addressing modes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.MirrorOnce">
      <summary>Similar to D3DTADDRESS_MIRROR and D3DTADDRESS_CLAMP. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. The most common usage is for volume textures, where support for the full D3DTADDRESS_MIRRORONCE texture-addressing mode is not necessary, but the data is symmetric around the one axis.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.Border">
      <summary>Texture coordinates outside the range [0.0, 1.0] are set to the border color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.Clamp">
      <summary>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.Mirror">
      <summary>Similar to D3DTADDRESS_WRAP, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.Wrap">
      <summary>Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times; no mirroring is performed.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureArgument">
      <summary>Supported texture arguments.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Current">
      <summary>Gets the current element in the collection.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Specular">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Diffuse">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Constant">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.AlphaReplicate">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Complement">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Temp">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.TFactor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.SelectMask">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureCoordinateIndex">
      <summary>Supported Texture Coordinate Index.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.SphereMap">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.CameraSpaceReflectionVector">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.CameraSpacePosition">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.CameraSpaceNormal">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.PassThru">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureFilter">
      <summary>Defines texture filtering modes for a texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.Point">
      <summary>Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter to be used between mipmap levels is nearest-point mipmap filtering. The rasterizer uses the color from the texel of the nearest mipmap texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.GaussianQuad">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.PyramidalQuad">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.Anisotropic">
      <summary>Anisotropic texture filtering used as a texture magnification or minification filter. Compensates for distortion caused by the difference in angle between the texture polygon and the plane of the screen.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.Linear">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.None">
      <summary>Mipmapping disabled. The rasterizer should use the magnification filter instead.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureOperation">
      <summary>Supported texture operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Add">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Lerp">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.MultiplyAdd">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.DotProduct3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BumpEnvironmentMapLuminance">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BumpEnvironmentMap">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateInvColorAddAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateInvAlphaAddColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateColorAddAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateAlphaAddColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.PreModulate">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendCurrentAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendTextureAlphaPM">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendFactorAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendTextureAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendDiffuseAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.AddSmooth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Subtract">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.AddSigned2X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.AddSigned">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Modulate4X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Modulate2X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Modulate">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.SelectArg2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.SelectArg1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Disable">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureTransform">
      <summary>Supported texture transforms.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Projected">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Count4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Count3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Count2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Count1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Disable">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TransformType">
      <summary>Defines constants that describe transformation state values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.View">
      <summary>Identifies the transformation matrix being set as the view transformation matrix. The default value is NULL (the identity matrix).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.World3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.World2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.World1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.World">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture7">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture6">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture5">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture4">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture3">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture2">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture0">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Projection">
      <summary>Identifies the transformation matrix being set as the projection transformation matrix. The default value is NULL (the identity matrix).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Usage">
      <summary>Supported Usage types for this resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryVertexTexture">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryPostPixelShaderBlending">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QuerySrgbWrite">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryFilter">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QuerySrgbRead">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryLegacyBumpMap">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryDisplacementMap">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.AutoGenerateMipMap">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.Dynamic">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.NPatches">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.RTPatches">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.Points">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.DoNotClip">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.SoftwareProcessing">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.WriteOnly">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.DepthStencil">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBlend">
      <summary>Supported vertex blend types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.ZeroWeights">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.Tweening">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.ThreeWeights">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.TwoWeights">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.OneWeights">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.Disable">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexFormats">
      <summary>Supported flexible vertex formats.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Specular">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Diffuse">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Position">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionNormal">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.TextureFormat4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.TextureFormat3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.TextureFormat1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.TextureFormat2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.LastBetaD3DColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.LastBetaUByte4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture8">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture7">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture6">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture5">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture0">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.TextureCountShift">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.TextureCountMask">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PointSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Normal">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionW">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend5">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend3">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend2">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend1">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Transformed">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionMask">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Wrap">
      <summary>Supported wrap modes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.W">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.V">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.U">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WrapCoordinates">
      <summary>Supported Wrap coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.Three">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.Two">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.One">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.Zero">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileErrorCodes">
      <summary>Error codes returned from XFile objects.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoInternet">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadCacheFile">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoMoreData">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoMoreStreamHandles">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadIntrinsics">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoMoreObjects">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.InternalError">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadDataReference">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadArraySize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoTemplate">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.ParseError">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFile">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFileCompressionType">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFileFloatSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFileVersion">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFileType">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadResource">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.UrlNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.ResourceNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.FileNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NotDoneYet">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NotFound">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadAlloc">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadStreamHandle">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadType">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadValue">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.Badobject">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileFormat">
      <summary>File format of XFiles.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.Binary">
      <summary>Indicates a binary file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.Text">
      <summary>Indicates a text file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.Compressed">
      <summary>Indicates a compressed file.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterDetails">
      <summary>Contains information identifying the adapter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterDetails.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterDetails.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.Description">
      <summary>Used for presentation to the user.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceId">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the type of chip set. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceIdentifier">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the type of chip set. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceName">
      <summary>Device name for Microsoft® Windows® Graphics Device Interface (GDI).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DriverName">
      <summary>Used for presentation to the user. This should not be used to identify particular drivers, because many different strings might be associated with the same device and driver from different vendors.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DriverVersion">
      <summary>Identify the version of the Microsoft Direct3D® driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.Revision">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the revision level of the chip set. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.SubSystemId">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the subsystem, typically the particular board. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.VendorId">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the manufacturer. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.WhqlLevel">
      <summary>Used to determine the Windows Hardware Quality Labs (WHQL) validation level for this driver and device pair.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AddressCaps">
      <summary>Texture-addressing capabilities for Direct3DTexture objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AddressCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsBorder">
      <summary>Device supports setting coordinates outside the range [0.0, 1.0] to the border color, as specified by the BorderColor texture-stage state. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsClamp">
      <summary>Device can clamp textures to addresses.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsIndependentUV">
      <summary>Device can separate the texture-addressing modes of the u and v coordinates of the texture. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsMirror">
      <summary>Device can mirror textures to addresses.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsMirrorOnce">
      <summary>Device can take the absolute value of the texture coordinate (thus, mirroring around 0) and then clamp to the maximum value. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsWrap">
      <summary>Device can wrap textures to addresses. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BehaviorFlags">
      <summary>A combination of one or more D3DCREATEConstants constants that control global behavior of the device. These constants mirror the constants passed to when the device was created.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor(Microsoft.DirectX.Direct3D.CreateFlags[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="newBehavior" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor(Microsoft.DirectX.Direct3D.CreateFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="initialBehavior" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.AdapterGroupDevice">
      <summary>Application asks the device to drive all the heads that this master adapter owns. The flag is illegal on non-master adapters. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.DisableDriverManagement">
      <summary>Specifies that Direct3D should manage resources instead of the driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.FpuPreserve">
      <summary>Indicates that the application needs either double-precision floating-point unit (FPU) or FPU exceptions enabled. Microsoft® Direct3D® sets the FPU state each time it is called. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.HardwareVertexProcessing">
      <summary>Specifies hardware vertex processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.MixedVertexProcessing">
      <summary>Specifies mixed (both software and hardware) vertex processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.MultiThreaded">
      <summary>Indicates that the application requests Direct3D to be multithread safe. This makes Direct3D take its global critical section more frequently, which can degrade performance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.PureDevice">
      <summary>Specifies that Direct3D does not support Get* calls for anything that can be stored in state blocks. It also tells Direct3D not to provide any emulation services for vertex processing. This means that if the device does not support vertex processing, then the application can use only post-transformed vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.SoftwareVertexProcessing">
      <summary>Specifies software vertex processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.Value">
      <summary>A combination of one or more D3DCREATEConstants constants that control global behavior of the device. These constants mirror the constants passed to when the device was created.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BlendCaps">
      <summary>Blending capabilities</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BlendCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBlendFactor">
      <summary>The driver supports both BlendFactor and InverseBlendFactor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBothInverseSourceAlpha">
      <summary>Source blend factor is (1-As,1-As,1-As,1-As) and destination blend factor is (As,As,As,As); the destination blend selection is overridden. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBothSourceAlpha">
      <summary>This blend mode is obsolete.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsDestinationAlpha">
      <summary>Blend factor is (Ad, Ad, Ad, Ad). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsDestinationColor">
      <summary>Blend factor is (Rd, Gd, Bd, Ad). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseDestinationAlpha">
      <summary>Blend factor is (1-Ad, 1-Ad, 1-Ad, 1-Ad). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseDestinationColor">
      <summary>Blend factor is (1-Rd, 1-Gd, 1-Bd, 1-Ad). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseSourceAlpha">
      <summary>Blend factor is (1-As, 1-As, 1-As, 1-As). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseSourceColor">
      <summary>Blend factor is (1-Rs, 1-Gs, 1-Bs, 1-As). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsOne">
      <summary>Blend factor is (1, 1, 1, 1). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceAlpha">
      <summary>Blend factor is (As, As, As, As). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceAlphaSat">
      <summary>Blend factor is (f, f, f, 1); f = min(As, 1-Ad). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceColor">
      <summary>Blend factor is (Rs, Gs, Bs, As). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsZero">
      <summary>Blend factor is (0, 0, 0, 0). </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Box">
      <summary>Defines a volume.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Box.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Box.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Back">
      <summary>Position of the back of the box on the Z axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Bottom">
      <summary>Position of the bottom of the box on the Y axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Front">
      <summary>Position of the front of the box on the Z axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Left">
      <summary>Position of the left side of the box on the X axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Right">
      <summary>Position of the right side of the box on the X axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Top">
      <summary>Position of the top of the box on the Y axis.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Caps">
      <summary>Represents the capabilities of the hardware exposed through the Microsoft® Direct3D® object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Caps.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Caps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AdapterOrdinal">
      <summary>Adapter on which this Direct3DDevice object was created. This ordinal is valid only to pass to methods of the Direct3d object that created this Direct3DDevice object. The Direct3d object can always be retrieved by calling Device9Getdirect3d.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AdapterOrdinalInGroup">
      <summary>This number indicates the order in which heads are referenced by the application programming object. The master adapter always has AdapterOrdinalInGroup = 0. These values do not correspond to the adapter ordinals passed to the IDirect3D9 methods. They apply only to heads within a group.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AlphaCompareCaps">
      <summary>Alpha-test comparison capabilities. This member can include the same capability flags defined for the ZCmpCaps member. If this member contains only the ZCmpCaps capability or only the ZCmpCaps capability, the driver does not support alpha tests. Otherwise, the flags identify the individual comparisons that are supported for alpha testing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.CubeTextureFilterCaps">
      <summary>Texture-filtering capabilities for a Direct3DCubeTexture object. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending with the Device object. This member can be any combination of the per-stage texture-filtering flags defined for the TextureFilterCaps member.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.CursorCaps">
      <summary>Bit mask indicating what hardware support is available for cursors. Microsoft® DirectX® 9.0 does not define alpha-blending cursor capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeclTypes">
      <summary>A combination of one or more data types contained in a vertex declaration. See D3DDTCAPSConstants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DestinationBlendCaps">
      <summary>Destination-blending capabilities. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeviceCaps">
      <summary>Flags identifying the capabilities of the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeviceType">
      <summary>Member of the D3ddevtype enumerated type, which identifies what type of resources are used for processing vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DriverCaps">
      <summary>Driver-specific capabilities</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ExtentsAdjust">
      <summary>Number of pixels to adjust the extents rectangle outward to accommodate antialiasing kernels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandBottom">
      <summary>Screen-space coordinate of the guard-band clipping region. Coordinates inside this rectangle but outside the viewport rectangle are automatically clipped.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandLeft">
      <summary>Screen-space coordinate of the guard-band clipping region. Coordinates inside this rectangle but outside the viewport rectangle are automatically clipped.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandRight">
      <summary>Screen-space coordinate of the guard-band clipping region. Coordinates inside this rectangle but outside the viewport rectangle are automatically clipped.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandTop">
      <summary>Screen-space coordinate of the guard-band clipping region. Coordinates inside this rectangle but outside the viewport rectangle are automatically clipped.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.LineCaps">
      <summary>Defines the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MasterAdapterOrdinal">
      <summary>This number indicates which device is the master for this subordinate. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxActiveLights">
      <summary>Maximum number of lights that can be active simultaneously. For a given physical device, this capability might vary across Direct3DDevice objects depending on the parameters supplied to .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxAnisotropy">
      <summary>Maximum valid value for the D3DTSS_MAXANISOTROPY texture-stage state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxPointSize">
      <summary>Maximum size of a point primitive. If set to 1.0f then device does not support point size control. The range is greater than or equal to 1.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxPrimitiveCount">
      <summary>Maximum number of primitives for each call. Note that when Microsoft® Direct3D® is working with a Microsoft® DirectX® 6.0 or Microsoft® DirectX® 7.0 driver, this field is set to 0xFFFF. This means that not only the number of primitives but also the number of vertices is limited by this value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxSimultaneousTextures">
      <summary>Maximum number of textures that can be simultaneously bound to the texture blending stages. This value is the number of textures that can be used in a single pass. If the same texture is used in two blending stages, it counts as two when compared against the MaxSimultaneousTextures value. In the programmable pipeline, this indicates the number of texture registers supported by pixel shaders on this particular piece of hardware, and the number of texture declaration instructions that can be present.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxStreams">
      <summary>Maximum number of concurrent data streams for Device9Setstreamsource. The valid range is 1 to 16. Note that if this value is 0, then the driver is not a Microsoft® DirectX® 9.0 driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxStreamStride">
      <summary>Maximum stride for Device9Setstreamsource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureAspectRatio">
      <summary>Maximum texture aspect ratio supported by the hardware, typically a power of 2.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureBlendStages">
      <summary>Maximum number of texture-blending stages supported. This value is the number of blenders available. In the Microsoft® DirectX® 9.0 programmable pixel pipeline, this should correspond to the number of instructions supported by pixel shaders on this particular implementation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureHeight">
      <summary>Maximum texture height for this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureRepeat">
      <summary>This number represents the maximum range of the integer bits of the post-normalized texture coordinates. A texture coordinate is stored as a 32-bit signed integer using 27 bits to store the integer part and 5 bits for the floating point fraction. The maximum integer index, 227, is used to determine the maximum texture coordinate, depending on how the hardware does texture-coordinate scaling.Some hardware reports the cap D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE. For this case, the device defers scaling texture coordinates by the texture size until after interpolation and application of the texture address mode, so the number of times a texture can be wrapped is given by the integer value in MaxTextureRepeat.Less desirably, on some hardware D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE is not set and the device scales the texture coordinates by the texture size (using the highest level of detail) prior to interpolation. This limits the number of times a texture can be wrapped to MaxTextureRepeat / texture size.For example, assume that MaxTextureRepeat is equal to 32 KB and the size of the texture is 4 KB. If the hardware sets D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE, then the number of times a texture can be wrapped is equal to MaxTextureRepeat, which is 32 KB in this example. Otherwise, the number of times a texture can be wrapped is equal to MaxTextureRepeat divided by texture size, which is 227/4 KB in this example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureWidth">
      <summary>Maximum texture width for this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxUserClipPlanes">
      <summary>Maximum number of user-defined clipping planes supported. This member can range from 0 through D3DMAXUSERCLIPPLANES. For a given physical device, this capability may vary across Direct3DDevice objects depending on the parameters supplied to .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexBlendMatrices">
      <summary>Maximum number of matrices that this device can apply when performing multimatrix vertex blending. For a given physical device, this capability may vary across Direct3DDevice objects depending on the parameters supplied to .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexBlendMatrixIndex">
      <summary>DWORD value that specifies the maximum matrix index that can be indexed into using the per-vertex indices. The number of matrices is MaxVertexBlendMatrixIndex + 1, which is the size of the matrix palette. If normals are present in the vertex data that needs to be blended for lighting, then the number of matrices is half the number specified by this capability flag. If MaxVertexBlendMatrixIndex is set to zero, the driver does not support indexed vertex blending. If this value is not zero then the valid range of indices is zero through MaxVertexBlendMatrixIndex. A zero value for MaxVertexBlendMatrixIndex indicates that the driver does not support indexed matrices.When software vertex processing is used, 256 matrices could be used for indexed vertex blending, with or without normal blending.For a given physical device, this capability may vary across Direct3DDevice objects depending on the parameters supplied to .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexIndex">
      <summary>Maximum size of indices supported for hardware vertex processing. It is possible to create 32-bit index buffers by specifying D3DFMT_INDEX32; however, you will not be able to render with the index buffer unless this value is greater than 0x0000FFFF.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexShaderConst">
      <summary>The number of vertex shader VsRegisters that are reserved for constants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexW">
      <summary>Maximum W-based depth value that the device supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent">
      <summary>Maximum value for any of the three dimensions (width, height, and depth) of a volume texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.NumberOfAdaptersInGroup">
      <summary>Number of adapters in this adapter group (only if master). This will be 1 for conventional adapters. The value will be greater than 1 for the master adapter of a multihead card. The value will be 0 for a subordinate adapter of a multihead card. Each card can have at most one master, but may have many subordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.NumberSimultaneousRts">
      <summary>Number of simultaneous render targets. This number must be at least one.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShader1xMaxValue">
      <summary>Maximum value of pixel shader arithmetic component. This value indicates the internal range of values supported for pixel color blending operations. Within the range that they report to, implementations must allow data to pass through pixel processing unmodified (unclamped). Normally, the value of this member is an absolute value. For example, a 1.0 indicates that the range is -1.0 to 1, and an 8.0 indicates that the range is -8.0 to 8.0. The value must be &gt;= 1.0 for any hardware that supports pixel shaders.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShaderCaps">
      <summary>Pixel shader capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShaderVersion">
      <summary>Two numbers that represent the pixel shader main and sub versions. For more information about the versions supported in Microsoft® DirectX® 9.0, see the pixel shader PsPs.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals">
      <summary>Bit mask of values representing what presentation swap intervals are available.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PrimitiveMiscCaps">
      <summary>General capabilities for this primitive. This member can be one or more of the following flags.Miscellaneous driver primitive capabilities. See D3DPMISCCAPSConstants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.RasterCaps">
      <summary>Information on raster-drawing capabilities. This member can be one or more of the following flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ShadeCaps">
      <summary>Shading operations capabilities. It is assumed, in general, that if a device supports a given command at all, it supports the D3DSHADE_FLAT mode (as specified in the D3dshademode enumerated type). This flag specifies whether the driver can also support Gouraud shading and whether alpha color components are supported. When alpha components are not supported, the alpha value of colors generated is implicitly 255. This is the maximum possible alpha (that is, the alpha component is at full intensity). The color, specular highlights, fog, and alpha interpolants of a triangle each have capability flags that an application can use to find out how they are implemented by the device driver.This member can be one or more of the following flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.SourceBlendCaps">
      <summary>Source-blending capabilities. This member can be one or more of the following flags. (The RGBA values of the source and destination are indicated by the subscripts s and d.)</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.StencilCaps">
      <summary>Flags specifying supported stencil-buffer operations. Stencil operations are assumed to be valid for all three stencil-buffer operation render states (D3DRS_STENCILFAIL, D3DRS_STENCILPASS, and D3DRS_STENCILFAILZFAIL).For more information, see the D3dstencilop enumerated type.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.StretchRectangleFilterCaps">
      <summary>Combination of constants that describe the operations supported by Device9Stretchrect. The flags that may be set in this field are:For more information, see and .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureAddressCaps">
      <summary>Texture-addressing capabilities for Direct3DTexture objects. This member can be one or more of the following flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureCaps">
      <summary>Miscellaneous texture-mapping capabilities. This member can be one or more of the following flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureFilterCaps">
      <summary>Texture-filtering capabilities for a Direct3DTexture object. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending with the Device object. This member can be any combination of the following per-stage texture-filtering flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureOperationCaps">
      <summary>Combination of flags describing the texture operations supported by this device. The following flags are defined.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexFormatCaps">
      <summary>Flexible vertex format capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexProcessingCaps">
      <summary>Vertex processing capabilities. For a given physical device, this capability might vary across Direct3DDevice objects depending on the parameters supplied to 9Createdevice.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexShaderCaps">
      <summary>Vertex Shader capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexShaderVersion">
      <summary>Vertex shader version, indicating the level of vertex shader supported by the device. Only vertex shaders with version numbers equal to or less than this will succeed in calls to Device9Createvertexshader. The level of shader is specified to Device9Createvertexshader as the first token in the vertex shader token stream. The main version number is encoded in the second byte. The low byte contains a sub-version number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexTextureFilterCaps">
      <summary>Device supports vertex shader texture filter capability.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VolumeTextureAddressCaps">
      <summary>Texture-addressing capabilities for Direct3DVolumeTexture objects. This member can be one or more of the flags defined for the TextureAddressCaps member.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VolumeTextureFilterCaps">
      <summary>Texture-filtering capabilities for a Direct3DVolumeTexture object. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending with the Device object. This member can be any combination of the per-stage texture-filtering flags defined for the TextureFilterCaps member.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ZCompareCaps">
      <summary>Z-buffer comparison capabilities. This member can be one or more of the following flags.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipStatus">
      <summary>Describes the current clip status.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipStatus.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipStatus.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipIntersection">
      <summary>Clip intersection flags that describe the current clip status. This member can take the same flags as ClipUnion.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipUnion">
      <summary>Clip union flags that describe the current clip status. This member can be one or more of the following flags.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ComparisonCaps">
      <summary>Comparison capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ComparisonCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsAlways">
      <summary>Always pass the test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsEqual">
      <summary>Pass the test if the new value equals the current value. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsGreater">
      <summary>Pass the test if the new value is greater than the current value. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsGreaterEqual">
      <summary>Pass the test if the new value is greater than or equal to the current value. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsLess">
      <summary>Pass the test if the new value is less than the current value. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsLessEqual">
      <summary>Pass the test if the new value is less than or equal to the current value. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsNever">
      <summary>Always fail the test. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsNotEqual">
      <summary>Pass the test if the new value does not equal the current value. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CursorCaps">
      <summary>Indicating what hardware support is available for cursors.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CursorCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CursorCaps.SupportsColor">
      <summary>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports at least a hardware color cursor in high-resolution modes (with scan lines greater than or equal to 400). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CursorCaps.SupportsLowResolution">
      <summary>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports a hardware color cursor in both high-resolution and low-resolution modes (with scan lines less than 400). </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored">
      <summary>Custom Vertex Format structure containing position and diffuse color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.#ctor(Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.#ctor(System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured">
      <summary>Custom Vertex Format structure containing position, diffuse color, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor(Microsoft.DirectX.Vector3,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="c" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="c" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.GetPosition">
      <summary>Returns the position</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal">
      <summary>Custom Vertex Format structure containing position and normal data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Nx">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Ny">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Nz">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="pos" />
      <param name="nor" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="nxvalue" />
      <param name="nyvalue" />
      <param name="nzvalue" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.GetNormal">
      <summary>Return the normal data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.SetNormal(Microsoft.DirectX.Vector3)">
      <summary>Set normal data.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored">
      <summary>Custom Vertex Format structure containing position, normal data, and diffuse color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Nx">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Ny">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Nz">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="pos" />
      <param name="nor" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="nxvalue" />
      <param name="nyvalue" />
      <param name="nzvalue" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.GetNormal">
      <summary>Return normal data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.SetNormal(Microsoft.DirectX.Vector3)">
      <summary>Set normal data.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured">
      <summary>Custom Vertex Format structure containing position, normal data, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Nx">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Ny">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Nz">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="pos" />
      <param name="nor" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="nxvalue" />
      <param name="nyvalue" />
      <param name="nzvalue" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.GetNormal">
      <summary>Get the normal data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.GetPosition">
      <summary>Returns the position</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.SetNormal(Microsoft.DirectX.Vector3)">
      <summary>Set normal data.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly">
      <summary>Custom Vertex Format structure containing position only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.#ctor(Microsoft.DirectX.Vector3)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured">
      <summary>Custom Vertex Format structure containing position and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor(Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="pos" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.Transformed">
      <summary>Custom Vertex Format structure containing transformed vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Rhw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.#ctor(Microsoft.DirectX.Vector4)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="rhwvalue" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.GetPosition">
      <summary>Get the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.SetPosition(Microsoft.DirectX.Vector4)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored">
      <summary>Custom Vertex Format structure containing transformed vertices and diffuse color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Rhw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.#ctor(Microsoft.DirectX.Vector4,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="rhwvalue" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.SetPosition(Microsoft.DirectX.Vector4)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured">
      <summary>Custom Vertex Format structure containing transformed vertices, one set of texture coordinates, and diffuse color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Rhw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor(Microsoft.DirectX.Vector4,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="c" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="rhwvalue" />
      <param name="c" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.GetPosition">
      <summary>Return the position</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.SetPosition(Microsoft.DirectX.Vector4)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured">
      <summary>Custom Vertex Format structure containing transformed vertices, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Rhw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.StrideSize">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor(Microsoft.DirectX.Vector4,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="rhwvalue" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.SetPosition(Microsoft.DirectX.Vector4)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationTypeCaps">
      <summary>Vertex data constants.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsDec3N">
      <summary>3-D signed 10 10 10 format normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsFloat16Four">
      <summary>4-D 16-bit floating point numbers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsFloat16Two">
      <summary>2-D 16-bit floating point numbers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsShort2N">
      <summary>Normalized, 2-D signed short, expanded to (first byte/32767.0, second byte/32767.0, 0, 1).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsShort4N">
      <summary>Normalized, 4-D signed short, expanded to (first byte/32767.0, second byte/32767.0, third byte/32767.0, fourth byte/32767.0).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUByte4">
      <summary>4-D unsigned byte.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUByte4N">
      <summary>Normalized, 4-D unsigned byte. Each of the four bytes is normalized by dividing to 255.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUDec3">
      <summary>3-D unsigned 10 10 10 format expanded to (value, value, value, 1).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUShort2N">
      <summary>Normalized, 2-D unsigned short, expanded to (first byte/65535.0, second byte/65535.0, 0, 1). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUShort4N">
      <summary>Normalized 4-D unsigned short, expanded to (first byte/65535.0, second byte/65535.0, third byte/65535.0, fourth byte/65535.0). </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceCaps">
      <summary>Retrieves device-specific information about a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanDrawSystemToNonLocal">
      <summary>Device supports blits from system-memory textures to nonlocal video-memory textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanRenderAfterFlip">
      <summary>Device can queue rendering commands after a page flip. Applications do not change their behavior if this flag is set; this capability means that the device is relatively fast. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanStretchRectangleFromTextures">
      <summary>Device supports StretchRectangle using a texture as the source.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsAdaptiveTessellateNPatch">
      <summary>Device supports adaptive tessellation of N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsAdaptiveTessellateRtPatch">
      <summary>Device supports adaptive tessellation of RT-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDMapNPatch">
      <summary>Device supports displacement maps for N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitives2">
      <summary>Device can support DrawPrimitives2.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitives2Ex">
      <summary>Device can support extended DrawPrimitives2; that is, this is a DirectX 7.0-compliant driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitivesTransformedVertex">
      <summary>Device exports a DrawPrimitive-aware hardware abstraction layer (HAL). </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsExecuteSystemMemory">
      <summary>Device can use execute buffers from system memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsExecuteVideoMemory">
      <summary>Device can use execute buffers from video memory. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsHardwareRasterization">
      <summary>Device has hardware acceleration for scene rasterization. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsHardwareTransformAndLight">
      <summary>Device can support transformation and lighting in hardware. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsNPatches">
      <summary>Device supports N patches. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsPreSampledDMapNPatch">
      <summary>Device supports presampled displacement maps for N-patches. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsPureDevice">
      <summary>Device can support rasterization, transform, lighting, and shading in hardware. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsQuinticRtPatches">
      <summary>Device supports quintic Bézier curves and B-splines. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsRtPatches">
      <summary>Device supports rectangular and triangular patches. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsRtPatchHandleZero">
      <summary>When this device capability is set, the hardware architecture does not require caching of any information and uncached patches (handle zero) will be drawn as efficiently as cached ones.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsSeparateTextureMemories">
      <summary>Device is texturing from separate memory pools. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsStreamOffset">
      <summary>Device supports stream offsets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureNonLocalVideoMemory">
      <summary>Device can retrieve textures from non-local video memory. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureSystemMemory">
      <summary>Device can retrieve textures from system memory. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureVideoMemory">
      <summary>Device can retrieve textures from device memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTransformedVertexSystemMemory">
      <summary>Device can use buffers from system memory for transformed and lit vertices. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTransformedVertexVideoMemory">
      <summary>Device can use buffers from video memory for transformed and lit vertices. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceCreationParameters">
      <summary>Describes the creation parameters for a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCreationParameters.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCreationParameters.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.AdapterOrdinal">
      <summary>Ordinal number that denotes the display adapter. D3DADAPTER_DEFAULT is always the primary display adapter.Use this ordinal as the Adapter parameter for any of the Direct3d methods. Note that different instances of Microsoft® Direct3D® 9.0 objects can use different ordinals. Adapters can enter or leave a system when users, for example, add or remove monitors from a multiple-monitor system or when they hot-swap a laptop. Consequently, use this ordinal only in a Microsoft® Direct3D® 9.0 instance known to be valid, that is, either the Microsoft® Direct3D® 9.0 that created this Device object or the Microsoft® Direct3D® 9.0 returned from Device9Getdirect3d, as called through this Device object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.Behavior">
      <summary>A combination of one or more D3DCREATEConstants constants that control global behavior of the device. These constants mirror the constants passed to when the device was created.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.DeviceType">
      <summary>Member of the D3ddevtype enumerated type. Denotes the amount of emulated functionality for this device. The value of this parameter mirrors the value passed to the 9Createdevice call that created this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.FocusWindow">
      <summary>Window to which focus belongs for this Direct3D device. The value of this parameter mirrors the value passed to the constructor call that created this device. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplayMode">
      <summary>Describes the display mode.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayMode.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayMode.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format of the display mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Height">
      <summary>Screen height, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.RefreshRate">
      <summary>Refresh rate. The value of 0 indicates an adapter default.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Width">
      <summary>Screen width, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverCaps">
      <summary>Driver specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanAutoGenerateMipMap">
      <summary>The driver is capable of automatically generating mipmaps.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanCalibrateGamma">
      <summary>The system has a calibrator installed that can automatically adjust the gamma ramp so that the result is identical on all systems that have a calibrator. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanManageResource">
      <summary>The driver is capable of managing resources. On such drivers, Pool.Managed resources will be managed by the driver. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.ReadScanLine">
      <summary>Display hardware is capable of returning the current scan line.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsAlphaFullscreenFlipOrDiscard">
      <summary>Indicates that the device can respect the AlphaBlendable render state in full-screen mode while using the Flip or Discard swap effect. Copy and CopyVSync swap effects work whether or not this flag is set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsCopyToSystemMemory">
      <summary>Device can accelerate a memory copy from local video memory to system memory. This cap guarantees that Device.GetRenderTargetData calls will be hardware accelerated. If this cap is absent, this call will succeed but will be slower.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsCopyToVideoMemory">
      <summary>Device can accelerate a memory copy from system memory to local video memory. This cap guarantees that Device.UpdateSurface and Device.UpdateTexture calls will be hardware accelerated. If this cap is absent, these calls will succeed but will be slower.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsDynamicTextures">
      <summary>The driver supports dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsFullscreenGamma">
      <summary>The driver supports dynamic gamma ramp adjustment in full-screen mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsLinearToSrgbPresentation">
      <summary>Indicates that the device can perform gamma correction from a windowed back buffer (containing linear content) to an sRGB desktop.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FilterCaps">
      <summary>Texture filter capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FilterCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyAnisotropic">
      <summary>Device supports per-stage anisotropic filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyGaussianQuad">
      <summary>Device supports per-stage Guassian quad filtering for textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyLinear">
      <summary>Device supports per-stage bilinear interpolation filtering for magnifying textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyPoint">
      <summary>Device supports per-stage point-sample filtering for magnifying textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyPyramidalQuad">
      <summary>Device supports per-stage Pyramidal quad filtering for magnifying textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyAnisotropic">
      <summary>Device supports per-stage anisotropic filtering for minifying textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyGaussianQuad">
      <summary>Device supports per-stage Guassian quad filtering for minifying textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyLinear">
      <summary>Device supports per-stage bilinear interpolation filtering for minifying textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyPoint">
      <summary>Device supports per-stage point-sample filtering for minifying textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyPyramidalQuad">
      <summary>Device supports per-stage Pyramidal quad filtering for minifying textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMipMapLinear">
      <summary>Device supports per-stage trilinear interpolation filtering for mipmaps. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMipMapPoint">
      <summary>Device supports per-stage point-sample filtering for mipmaps. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GammaRamp">
      <summary>Contains red, green, and blue ramp data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetBlue">
      <summary>Return the blue component of the gamma ramp.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetGreen">
      <summary>Return the green component of the gamma ramp.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetRed">
      <summary>Return the red component of the gamma ramp.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetBlue(System.Int16[])">
      <summary>Sets the blue component of the gamma ramp.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetGreen(System.Int16[])">
      <summary>Sets the green component of the gamma ramp.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetRed(System.Int16[])">
      <summary>Sets the red component of the gamma ramp.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IndexBufferDescription">
      <summary>Describes an index buffer.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBufferDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBufferDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format of the index buffer data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Pool">
      <summary>Member of the D3dpool enumerated type, specifying the class of memory allocated for this index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Size">
      <summary>Size of the index buffer, in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Type">
      <summary>Member of the D3dresourcetype enumerated type, identifying this resource as an index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Usage">
      <summary>Combination of one or more of the following flags, specifying the usage for this resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LineCaps">
      <summary>Defines the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LineCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsAlphaCompare">
      <summary>Supports alpha-test comparisons. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsAntiAlias">
      <summary>Antialiased lines are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsBlend">
      <summary>Supports source-blending. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsFog">
      <summary>Supports fog. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsTextureMapping">
      <summary>Supports texture-mapping. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsZBufferTest">
      <summary>Supports z-buffer comparisons. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LinePattern">
      <summary>Describes a line pattern.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LinePattern.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LinePattern.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LinePattern.Linepattern">
      <summary>Bits specifying the line pattern. For example, the following value would produce a dotted line: 1100110011001100.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LinePattern.RepeatFactor">
      <summary>Number of times to repeat each series of 1s and 0s specified in the wLinePattern member. This allows an application to stretch the line pattern.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LockedBox">
      <summary>Describes a locked box (volume).</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LockedBox.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LockedBox.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LockedBox.RowPitch">
      <summary>Byte offset from the left edge of one row to the left edge of the next row.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LockedBox.SlicePitch">
      <summary>Byte offset from the top-left of one slice to the top-left of the next deepest slice.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Material">
      <summary>Specifies material properties.Returns material information saved in Microsoft® Direct3D® (.x) files.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Ambient">
      <summary>Values specifying the diffuse color, ambient color, specular color, and emissive color of the material, respectively. These values are D3dcolorvalue structures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Diffuse">
      <summary>Values specifying the diffuse color, ambient color, specular color, and emissive color of the material, respectively. These values are D3dcolorvalue structures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Emissive">
      <summary>Values specifying the diffuse color, ambient color, specular color, and emissive color of the material, respectively. These values are D3dcolorvalue structures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Specular">
      <summary>Values specifying the diffuse color, ambient color, specular color, and emissive color of the material, respectively. These values are D3dcolorvalue structures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.SpecularSharpness">
      <summary>Floating-point value specifying the sharpness of specular highlights. The higher the value, the sharper the highlight.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MiscCaps">
      <summary>Miscellaneous driver primitive capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MiscCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.IsNullReference">
      <summary>A reference device that does not render.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsBlendOperation">
      <summary>Device supports alpha-blending operations other than BlendOperation.Add.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsClipPlaneScaledPoints">
      <summary>Device correctly clips scaled points of size greater than 1.0 to user-defined clipping planes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsClipTransformedVertices">
      <summary>Device clips post-transformed vertex primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsColorWrite">
      <summary>Device supports per-channel writes for the render target color buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullClockwise">
      <summary>The driver supports clockwise triangle culling through the CullMode render state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullCounterClockwise">
      <summary>The driver supports counterclockwise triangle culling through the CullMode render state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullNone">
      <summary>The driver does not perform triangle culling. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsFogAndSpecularAlpha">
      <summary>Device supports separate fog and specular alpha. Many devices use the specular alpha channel to store the fog factor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsIndependentWriteMasks">
      <summary>Device supports independent write masks for multiple element textures or multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMaskZ">
      <summary>Device can enable and disable modification of the depth buffer on pixel operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMultipleRenderTargetsIndependentBitDepths">
      <summary>Device supports independent bit depths for multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMultipleRenderTargetsPostPixelShaderBlending">
      <summary>Device supports multiple render targets post pixel shader blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsPerStageConstant">
      <summary>Device supports per-stage constants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsSeparateAlphaBlend">
      <summary>Device supports separate alpha blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp">
      <summary>Device supports TextureArgument for temporary register.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PaletteEntry">
      <summary>Specifies the color and usage of an entry in a logical palette.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="red" />
      <param name="green" />
      <param name="blue" />
      <param name="flags" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Blue">
      <summary>The blue intensity value for the palette entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Flags">
      <summary>The alpha intensity value for the palette entry. Note that as of Microsoft® DirectX® 8.0, this member is treated differently than documented in the Microsoft Platform Software Development Kit (SDK).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Green">
      <summary>The green intensity value for the palette entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Red">
      <summary>The red intensity value for the palette entry.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PixelShaderCaps">
      <summary>Pixel shader capabilities.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxDynamicFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxNumberInstructionSlots">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxNumberTemps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxStaticFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinDynamicFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinNumberInstructionSlots">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinNumberTemps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinStaticFlowControlDepth">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShaderCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.DynamicFlowControlDepth">
      <summary>Device supports dynamic flow control (if, break, and breakc). The depth of nesting ranges from 0 to 24.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.NumberInstructionSlots">
      <summary>The number of instruction slots can range from 96 to 1024. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.NumberTemps">
      <summary>The number of temporary registers supported by the device. The range is from 12 to 32. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.StaticFlowControlDepth">
      <summary>Equal to the depth of loop/call nesting. The range is 0 to 4.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsArbitrarySwizzle">
      <summary>If set, arbitrary swizzle is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsGradientInstructions">
      <summary>If set, gradient instructions are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsNoDependentReadLimit">
      <summary>If set, there are no dependent read limits.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsNoTextureInstructionLimit">
      <summary>If set, there are no limit on texture instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsPredication">
      <summary>If set, instruction predication is supported. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RasterCaps">
      <summary>Information on raster-drawing capabilities. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsAnisotropy">
      <summary>Device supports anisotropic filtering. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsColorPerspective">
      <summary>Device iterates colors perspective correctly.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsDepthBias">
      <summary>Device supports legacy depth bias.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsDither">
      <summary>Device can dither to improve color resolution. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogRange">
      <summary>Device supports range-based fog. In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the object (that is, the z-coordinate) in the scene. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogTable">
      <summary>Device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogVertex">
      <summary>Device calculates the fog value during the lighting operation and interpolates the fog value during rasterization. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsMipMapLevelOfDetailBias">
      <summary>Device supports level of detail (LOD) bias adjustments. These bias adjustments enable an application to make a mipmap appear crisper or less sharp than it normally would.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsMultisampleToggle">
      <summary>Device supports toggling multisampling on and off between Device.BeginScene and Device.EndScene.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsScissorTest">
      <summary>Device supports scissor test. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsSlopeScaleDepthBias">
      <summary>Device performs true slope-scale based depth bias. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsWBuffer">
      <summary>Device supports depth buffering using w. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsWFog">
      <summary>Device supports w-based fog. W-based fog is used when a perspective projection matrix is specified, but affine projections still use z-based fog. The system considers a projection matrix that contains a nonzero value in the [3][4] element to be a perspective projection matrix. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZBufferLessHsr">
      <summary>Device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth-buffer. This leaves more video memory for textures. The method used to perform HSR is hardware-dependent and is transparent to the application. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZBufferTest">
      <summary>Device can perform z-test operations. This effectively renders a primitive and indicates whether any z pixels have been rendered. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZFog">
      <summary>Device supports z-based fog. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RasterStatus">
      <summary>Describes the raster status.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterStatus.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterStatus.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterStatus.InVBlank">
      <summary>TRUE if the raster is in the vertical blank period. FALSE if the raster is not in the vertical blank period.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterStatus.ScanLine">
      <summary>If InVBlank is FALSE, then this value is an integer roughly corresponding to the current scan line painted by the raster. Scan lines are numbered in the same way as Microsoft® Direct3D® surface coordinates: 0 is the top of the primary surface, extending to the value (height of the surface - 1) at the bottom of the display. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation">
      <summary>Describes a rectangular high-order patch.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RectanglePatchInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RectanglePatchInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.BasisType">
      <summary>Defining the basis type for the rectangular high-order patch. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Degree">
      <summary>Member of the D3ddegreetype enumerated type, defining the degree for the rectangular patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Height">
      <summary>Height of each vertex, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.StartVertexOffsetHeight">
      <summary>Starting vertex offset height, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.StartVertexOffsetWidth">
      <summary>Starting vertex offset width, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Stride">
      <summary>Width of the imaginary two-dimensional vertex array, which occupies the same space as the vertex buffer. For an example, see the diagram below.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Width">
      <summary>Width of each vertex, in number of vertices.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResourceStats">
      <summary>Describes a volume.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceStats.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceStats.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.ApproxBytesDownloaded">
      <summary>Approximate number of bytes downloaded by the resource manager.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.LastPri">
      <summary>Priority of last object evicted.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberEvicts">
      <summary>Number of objects evicted.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberUsed">
      <summary>Number of objects set to the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberUsedInVidMem">
      <summary>Number of objects set to the device, which are already in video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberVidCreates">
      <summary>Number of objects created in video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.Thrashing">
      <summary>Indicates if thrashing is occuring.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.TotalBytes">
      <summary>Total number of bytes of managed objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.TotalManaged">
      <summary>Total number of managed objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.WorkingSet">
      <summary>Number of objects in video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.WorkingSetBytes">
      <summary>Number of bytes in video memory.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShadeCaps">
      <summary>Shading operations capabilities. It is assumed, in general, that if a device supports a given command at all, it supports the Flat mode. This flag specifies whether the driver can also support Gouraud shading and whether alpha color components are supported. When alpha components are not supported, the alpha value of colors generated is implicitly 255. This is the maximum possible alpha (that is, the alpha component is at full intensity). </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShadeCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsAlphaGouraudBlend">
      <summary>Device can support an alpha component for Gouraud-blended transparency. In this mode, the alpha color component of a primitive is provided at vertices and interpolated across a face along with the other color components. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsColorGouraudRgb">
      <summary>Device can support colored Gouraud shading in the RGB color model. In this mode, the color component for a primitive is provided at vertices and interpolated across a face along with the other color components. In the RGB lighting model, the red, green, and blue components are interpolated. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsFogGouraud">
      <summary>Device can support fog in the Gouraud shading mode. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsSpecularGouraudRgb">
      <summary>Device supports Gouraud shading of specular highlights.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StencilCaps">
      <summary>Flags specifying supported stencil-buffer operations.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StencilCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsDecrement">
      <summary>Decrement the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsDecrementSaturation">
      <summary>Decrement the stencil-buffer entry, clamping to zero.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsIncrement">
      <summary>Increment the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsIncrementSaturation">
      <summary>Increment the stencil-buffer entry, clamping to the maximum value. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsInvert">
      <summary>Invert the bits in the stencil-buffer entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsKeep">
      <summary>Do not update the entry in the stencil buffer. This is the default value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsReplace">
      <summary>Replace the stencil-buffer entry with reference value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsTwoSided">
      <summary>The device supports two-sided stencil.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsZero">
      <summary>Set the stencil-buffer entry to 0.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SurfaceDescription">
      <summary>Describes a surface.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Height">
      <summary>Height of the surface, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.MultiSampleQuality">
      <summary>Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by 9Checkdevicemultisampletype. Passing a larger value returns the error, D3DERR_INVALIDCALL. The MultisampleQuality values of paired render targets, depth stencil surfaces and the MultiSample type in Microsoft® DirectX® 8.0 must all match.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.MultiSampleType">
      <summary>Member of the D3dmultisampleType enumerated type, specifying the levels of full-scene multisampling supported by the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Pool">
      <summary>Member of the D3dpool enumerated type, specifying the class of memory allocated for this surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Type">
      <summary>Member of the D3dresourcetype enumerated type, identifying this resource as a surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Usage">
      <summary>Either the D3DUSAGE_DEPTHSTENCIL or D3DUSAGE_RENDERTARGET values. For more information, see D3DUSAGEConstants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Width">
      <summary>Width of the surface, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureCaps">
      <summary>Miscellaneous texture-mapping capabilities. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsAlpha">
      <summary>Alpha in texture pixels is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsAlphaPalette">
      <summary>Device can draw alpha from texture palettes. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsCubeMap">
      <summary>Supports cube textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsCubeMapPower2">
      <summary>Device requires that cube texture maps have dimensions specified as powers of two. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipCubeMap">
      <summary>Device supports mipmapped cube textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipMap">
      <summary>Device supports mipmapped textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipVolumeMap">
      <summary>Device supports mipmapped volume textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsNonPower2Conditional">
      <summary>Conditionally supports the use of 2-D textures with dimensions that are not powers of two.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsNoProjectedBumpEnvironment">
      <summary>Device does not support a projected bump-environment loopkup operation in programmable and fixed function shaders. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsPerspective">
      <summary>Perspective correction texturing is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsPower2">
      <summary>All textures must have widths and heights specified as powers of two. This requirement does not apply to either cube textures or volume textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsProjected">
      <summary>Supports the Projected texture transformation flag. When applied, the device divides transformed texture coordinates by the last texture coordinate. If this capability is present, then the projective divide occurs per pixel. If this capability is not present, but the projective divide needs to occur anyway, then it is performed on a per-vertex basis by the Direct3D runtime. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsSquareOnly">
      <summary>All textures must be square. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsTextureRepeatNotScaledBySize">
      <summary>Texture indices are not scaled by the texture size prior to interpolation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMap">
      <summary>Device supports volume textures. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMapPower2">
      <summary>Device requires that volume texture maps have dimensions specified as powers of two. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureOperationCaps">
      <summary>Flags describing the texture operations supported by this device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureOperationCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAdd">
      <summary>The Add texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSigned">
      <summary>The AddSigned texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSigned2X">
      <summary>The AddSigned2x texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSmooth">
      <summary>The AddSmooth texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendCurrentAlpha">
      <summary>The BlendCurrentAlpha texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendDiffuseAlpha">
      <summary>The BlendDiffuseAlpha texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendFactorAlpha">
      <summary>The BlendFactorAlpha texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendTextureAlpha">
      <summary>The BlendTextureAlpha texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendTextureAlphaPM">
      <summary>The BlendTextureAlphaPM texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBumpEnvironmentMap">
      <summary>The BumpEnvironmentMap texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBumpEnvironmentMapLuminance">
      <summary>The BumpEnvironmentMapLuminance texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsDisable">
      <summary>The Disable texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsDotProduct3">
      <summary>The DotProduct3 texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsLerp">
      <summary>The Lerp texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate">
      <summary>The Modulate texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate2X">
      <summary>The Modulate2x texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate4X">
      <summary>The Modulate4x texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateAlphaAddColor">
      <summary>The ModulateAddColor texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateColorAddAlpha">
      <summary>The ModulateColorAddAlpha texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateInvAlphaAddColor">
      <summary>The ModulateInvAlphaAddColor texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateInvColorAddAlpha">
      <summary>The ModulateInvColorAddAlpha texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsMultiplyAdd">
      <summary>The MultiplyAdd texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsPreModulate">
      <summary>The PreModulate texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSelectArgument1">
      <summary>The SelectArgument1 texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSelectArgument2">
      <summary>The SelectArgument2 texture-blending operation is supported. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSubtract">
      <summary>The Subtract texture-blending operation is supported. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation">
      <summary>Describes a triangular high-order patch.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrianglePatchInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrianglePatchInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.BasisType">
      <summary>Defines the basis type for the triangular high-order patch. The only valid value for this member is Basis.Bezier.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.Degree">
      <summary>Defining the degree type for the triangular high-order patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.NumberVertices">
      <summary>Number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.StartVertexOffset">
      <summary>Starting vertex offset, in number of vertices. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ValidateDeviceParams">
      <summary>Number of passes and result code returned from a ValidateDevice call.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ValidateDeviceParams.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ValidateDeviceParams.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ValidateDeviceParams.Passes">
      <summary>Number of rendering passes needed to complete the desired effect through multipass rendering. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ValidateDeviceParams.Result">
      <summary>Result code of the validation.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBufferDescription">
      <summary>Describes a vertex buffer.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBufferDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBufferDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format of the vertex buffer data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Pool">
      <summary>Member of the D3dpool enumerated type, specifying the class of memory allocated for this vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Size">
      <summary>Size of the vertex buffer, in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Type">
      <summary>Member of the D3dresourcetype enumerated type, identifying this resource as a vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Usage">
      <summary>Combination of one or more D3DUSAGEConstants flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.VertexFormat">
      <summary>Combination of D3DFVFConstants that describes the vertex format of the vertices in this buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexElement">
      <summary>Defines input vertex data to the pipeline.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexElement.VertexDeclarationEnd">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexElement.#ctor(System.Int16,System.Int16,Microsoft.DirectX.Direct3D.DeclarationType,Microsoft.DirectX.Direct3D.DeclarationMethod,Microsoft.DirectX.Direct3D.DeclarationUsage,System.Byte)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="stream" />
      <param name="offset" />
      <param name="declType" />
      <param name="declMethod" />
      <param name="declUsage" />
      <param name="usageIndex" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexElement.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationMethod">
      <summary>Tessellator processing method. This method determines how the tessellator interprets/operates on the vertex data. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationType">
      <summary>Data type. One of several predefined types that define the data size. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationUsage">
      <summary>Defines the intended use of the data. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.Offset">
      <summary>Offset (if any) from the beginning of the stream to the start of the data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.Stream">
      <summary>Stream number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex">
      <summary>Modifies the usage data to allow the user to specify multiple usage types.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexFormatCaps">
      <summary>Flexible vertex format capabilities. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexFormatCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsDoNotStripElements">
      <summary>It is preferable that vertex elements not be stripped. That is, if the vertex format contains elements that are not used with the current render states, there is no need to regenerate the vertices. If this capability flag is not present, stripping extraneous elements from the vertex format provides better performance. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsPointSize">
      <summary>Point size is determined by either the render state or the vertex data. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsTextureCoordinateCountMask">
      <summary>Masks the low Int16 of VertexFormatCaps. These bits, cast to the Int16 data type, describe the total number of texture coordinate sets that the device can simultaneously use for multiple texture blending. (You can use up to eight texture coordinate sets for any vertex, but the device can blend using only the specified number of texture coordinate sets.) </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexProcessingCaps">
      <summary>Vertex processing capabilities. For a given physical device, this capability might vary across Device objects depending on the parameters supplied to device constructor.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexProcessingCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsDirectionAllLights">
      <summary>Device can do directional lights.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsLocalViewer">
      <summary>Device can do local viewer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsMaterialSource">
      <summary>Device can do Microsoft® DirectX® 7.0 colormaterialsource operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsNoTextureGenerationNonLocalViewer">
      <summary>Device does not support texture generation in non-local viewer mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsPositionAllLights">
      <summary>Device can do positional lights (includes point and spot).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTextureGeneration">
      <summary>Device can do texgen.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTextureGenerationSphereMap">
      <summary>Device supports texture generation for sphere maps.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTweening">
      <summary>Device can do vertex tweening.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexShaderCaps">
      <summary>Vertex shader capabilities.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxDynamicFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxNumberTemps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxStaticFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinDynamicFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinNumberTemps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinStaticFlowControlDepth">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShaderCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.DynamicFlowControlDepth">
      <summary>If this value is zero, then the device does not support dynamic flow control. If it is non zero, it supports dynamic flow control (instructions if, break and breakc). The value is equal to the depth of ifc-block nesting. The acceptable range of values for this is 0 to 24. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.NumberTemps">
      <summary>The number of temporary registers supported by the device. The acceptable range for this is 12 to 32. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.StaticFlowControlDepth">
      <summary>When this value is zero, then the device does not support static flow control. The value is equal to the depth of loop/call nesting. The acceptable range is 0 to 4.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.SupportsPredication">
      <summary>If true then instruction predication as defined in the predication section is supported. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexStats">
      <summary>Vertex statistics</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexStats.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexStats.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexStats.NumberExtraClippingTriangles">
      <summary>Total number of triangles that are not clipped in this frame.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexStats.NumberRenderedTriangles">
      <summary>Total number of triangles that are not clipped in this frame.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Viewport">
      <summary>Defines the window dimensions of a render target surface onto which a 3-D volume projects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Viewport.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Viewport.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Height">
      <summary>Height dimension of the viewport on the render target surface, in pixels. Unless you are rendering only to a subset of the surface, this member should be set to the height dimension of the render target surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.MaxZ">
      <summary>Value describing, together with MinZ, the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 1.0. Clipping is performed after applying the projection matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.MinZ">
      <summary>Value describing, together with MaxZ, the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 0.0. Clipping is performed after applying the projection matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Width">
      <summary>Width dimension of the viewport on the render target surface, in pixels. Unless you are rendering only to a subset of the surface, this member should be set to the width dimension of the render target surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.X">
      <summary>Pixel coordinate of the upper-left corner of the viewport on the render target surface. Unless you want to render to a subset of the surface, this member can be set to 0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Y">
      <summary>Pixel coordinate of the upper-left corner of the viewport on the render target surface. Unless you want to render to a subset of the surface, this member can be set to 0.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeDescription">
      <summary>Describes a volume.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Depth">
      <summary>Depth of the volume, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format of the volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Height">
      <summary>Height of the volume, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Pool">
      <summary>Member of the D3dpool enumerated type, specifying the class of memory allocated for this volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Type">
      <summary>Member of the D3dresourcetype enumerated type, identifying this resource as a volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Usage">
      <summary>Currently not used. Always returned as 0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Width">
      <summary>Width of the volume, in pixels.</summary>
    </member>
  </members>
</doc>