<doc>
  <assembly>
    <name>Microsoft.DirectX.Direct3DX</name>
  </assembly>
  <members>
    <member name="T:Microsoft.DirectX.Direct3D.AllocateHierarchy">
      <summary>This object is derived by the application to allocate/free frame and mesh container objects. Methods on this are called during loading and destroying frame hierarchies. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.CreateFrame(Microsoft.DirectX.Direct3D.Frame)">
      <summary>Requests allocation of a frame object.</summary>
      <param name="frame" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.CreateMeshContainer(Microsoft.DirectX.Direct3D.MeshContainer)">
      <summary>Requests allocation of a mesh container object.</summary>
      <param name="container" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.DestroyFrame(Microsoft.DirectX.Direct3D.Frame)">
      <summary>Requests deallocation of a frame object.</summary>
      <param name="frameToFree" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.DestroyMeshContainer(Microsoft.DirectX.Direct3D.MeshContainer)">
      <summary>Requests deallocation of a mesh container object. </summary>
      <param name="meshContainerToFree" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AnimationController">
      <summary>This object implements the animation controller, which is derived from the animation mixer. The animation controller adds methods to modify blending parameters over time to enable smooth transitions.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.AnimationController.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Clone">
      <summary>Duplicates the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Clone(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Duplicates the object.</summary>
      <param name="maxNumberMatrices" />
      <param name="maxNumberAnimationSets" />
      <param name="maxNumberTracks" />
      <param name="maxNumberEvents" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="maxNumberMatrices" />
      <param name="maxNumberAnimationSets" />
      <param name="maxNumberTracks" />
      <param name="maxNumberEvents" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetAnimationSet(System.Int32)">
      <summary>Get the animation set.</summary>
      <param name="animationSet" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetTrackAnimationSet(System.Int32)">
      <summary>Get the animation set for the given track.</summary>
      <param name="track" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetTrackDescription(System.Int32)">
      <summary>Get the track description.</summary>
      <param name="trackNumber" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyPriorityBlend(System.Single,System.Double,System.Double,Microsoft.DirectX.Direct3D.TransitionType)">
      <summary>Blend together the low priority and high priority blended tracks.</summary>
      <param name="newBlendWeight" />
      <param name="startTime" />
      <param name="duration" />
      <param name="method" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyTrackAnimtionTime(System.Int32,System.Double,System.Double)">
      <summary>Key, or set, the new animation time of the track.</summary>
      <param name="track" />
      <param name="newTime" />
      <param name="startTime" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyTrackEnable(System.Int32,System.Boolean,System.Double)">
      <summary>Key, or set the track enable. This enables or disables the track settings.</summary>
      <param name="track" />
      <param name="newEnable" />
      <param name="startTime" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyTrackSpeed(System.Int32,System.Single,System.Double,System.Double,System.Int32)">
      <summary>Key, or set the track speed. This is a speed modifier that adjusts the rate of play of the track.</summary>
      <param name="track" />
      <param name="newSpeed" />
      <param name="startTime" />
      <param name="duration" />
      <param name="method" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyTrackWeight(System.Int32,System.Single,System.Double,System.Double,System.Int32)">
      <summary>Key, or set the track weight. The weight is used as a multiplier when combining two tracks together.</summary>
      <param name="track" />
      <param name="newWeight" />
      <param name="startTime" />
      <param name="duration" />
      <param name="method" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.op_Equality(Microsoft.DirectX.Direct3D.AnimationController,Microsoft.DirectX.Direct3D.AnimationController)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.op_Inequality(Microsoft.DirectX.Direct3D.AnimationController,Microsoft.DirectX.Direct3D.AnimationController)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.RegisterAnimationSet(Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary>Add an animation set to the animation mixer.</summary>
      <param name="animationSet" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.RegisterMatrix(System.String,Microsoft.DirectX.Matrix)">
      <summary>Register or set the matrix in the mixer.</summary>
      <param name="name" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackAnimationSet(System.Int32,Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary>Set this track to include this animation set.</summary>
      <param name="track" />
      <param name="animationSet" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackAnimtionTime(System.Int32,System.Double)">
      <summary>Set the animation time for this track.</summary>
      <param name="track" />
      <param name="time" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackDescription(System.Int32,Microsoft.DirectX.Direct3D.TrackDescription)">
      <summary>Set the track's description.</summary>
      <param name="trackNumber" />
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackEnable(System.Int32,System.Boolean)">
      <summary>Enable or disable a track in the animation mixer.</summary>
      <param name="track" />
      <param name="enable" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackSpeed(System.Int32,System.Single)">
      <summary>Set the track speed. The track speed is like a multiplier that is used to speed up or slow down the playback of the track.</summary>
      <param name="track" />
      <param name="speed" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackWeight(System.Int32,System.Single)">
      <summary>Set the track weight. The weight is used to determine how to blend multiple tracks together.</summary>
      <param name="track" />
      <param name="weight" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UnregisterAnimationSet(Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary>Remove an animation set from the animation mixer.</summary>
      <param name="animationSet" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.MaxNumberAnimationSets">
      <summary>Get the maximum number of animation sets the controller can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.MaxNumberEvents">
      <summary>Get the maximum number of events the controller can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.MaxNumberMatrices">
      <summary>Get the maximum number of matrices the controller can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.MaxNumberTracks">
      <summary>Get the maximum number of tracks in the mixer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.NumberAnimationSets">
      <summary>Get the number of animation sets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.PriorityBlend">
      <summary>Get or set the track blending weight.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.Time">
      <summary>Get the local animation time.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AnimationSet">
      <summary>Creates an animation set, given a set of interpolators.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.AnimationSet.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.#ctor(System.String,Microsoft.DirectX.Direct3D.KeyFrameInterpolator[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="name" />
      <param name="interpolators" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetInterpolator(System.String)">
      <summary>Get an interpolator using an index into an array of interpolators.</summary>
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetInterpolator(System.Int32)">
      <summary>Get an interpolator using an index into an array of interpolators.</summary>
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.op_Equality(Microsoft.DirectX.Direct3D.AnimationSet,Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.op_Inequality(Microsoft.DirectX.Direct3D.AnimationSet,Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.Name">
      <summary>Get the animation set name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.NumberInterpolators">
      <summary>Get the number of interpolators in the animation set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.Period">
      <summary>Get the period of the animation set.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BaseEffect">
      <summary>Base effect class.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.BaseEffect.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetAnnotation(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Get an annotation. </summary>
      <param name="technique" />
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetAnnotation(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get an annotation. </summary>
      <param name="technique" />
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetFunction(System.String)">
      <summary>Get a function.</summary>
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetFunction(System.Int32)">
      <summary>Get a function.</summary>
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetFunctionDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a function description.</summary>
      <param name="shader" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameter(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Get a parameter.</summary>
      <param name="constant" />
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameter(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get a parameter.</summary>
      <param name="constant" />
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameterBySemantic(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Get a parameter by looking up its semantic.</summary>
      <param name="constant" />
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameterDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a parameter description.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameterElement(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get a unique identifier of a parameter element.</summary>
      <param name="constant" />
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetPass(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Get an identifier for a pass.</summary>
      <param name="technique" />
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetPass(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get an identifier for a pass.</summary>
      <param name="technique" />
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetPassDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves information about a pass for an effect.</summary>
      <param name="pass" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetTechnique(System.String)">
      <summary>Get a technique.</summary>
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetTechnique(System.Int32)">
      <summary>Get a technique.</summary>
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetTechniqueDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a technique description.</summary>
      <param name="technique" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValue(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get an arbitrary value.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueBoolean(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a BOOL value.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueBooleanArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get an array of BOOL values.</summary>
      <param name="parameter" />
      <param name="count" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueFloat(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a floating point value.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueFloatArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get an array of floating point values.</summary>
      <param name="parameter" />
      <param name="count" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueInteger(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get an integer.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueIntegerArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get an array of integers.</summary>
      <param name="parameter" />
      <param name="count" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueMatrix(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a nontransposed matrix.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueMatrixArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get an array of nontransposed matrices.</summary>
      <param name="parameter" />
      <param name="count" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueMatrixTranspose(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a transposed matrix.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueMatrixTransposeArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get an array of transposed matrices.</summary>
      <param name="parameter" />
      <param name="count" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValuePixelShader(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a pixel shader.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueString(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a string.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueTexture(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a texture.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueVector(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a vector.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueVectorArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Get an array of vectors.</summary>
      <param name="parameter" />
      <param name="count" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueVertexShader(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a vertex shader.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.op_Equality(Microsoft.DirectX.Direct3D.BaseEffect,Microsoft.DirectX.Direct3D.BaseEffect)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.op_Inequality(Microsoft.DirectX.Direct3D.BaseEffect,Microsoft.DirectX.Direct3D.BaseEffect)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.VertexShader)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="vertexShader" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.PixelShader)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="pixelShader" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32[])">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="n" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="n" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean[])">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="b" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="b" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="texture" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="str" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix[])">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Vector4[])">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="vector" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Vector4)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="vector" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Single[])">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="f" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Single)">
      <summary>Set an arbitrary value.</summary>
      <param name="parameter" />
      <param name="f" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValueTranspose(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix[])">
      <summary>Set a transposed matrix.</summary>
      <param name="parameter" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValueTranspose(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix)">
      <summary>Set a transposed matrix.</summary>
      <param name="parameter" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseEffect.Description">
      <summary>Get an effect description.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseEffect.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BaseMesh">
      <summary>Applications use the methods of the BaseMesh object to manipulate and query mesh and progressive mesh objects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.BaseMesh.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BaseMesh.m_pDevice">
      <summary>Retrieves the device associated with the mesh.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="vertexFormat" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ComputeNormals">
      <summary>Computes normals for each vertex in a mesh.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ComputeNormals(System.Int32[])">
      <summary>Computes normals for each vertex in a mesh.</summary>
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ComputeNormals(Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Computes normals for each vertex in a mesh.</summary>
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ConvertAdjacencyToPointReps(Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Converts mesh adjacency information to an array of point representatives.</summary>
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ConvertAdjacencyToPointReps(System.Int32[])">
      <summary>Converts mesh adjacency information to an array of point representatives.</summary>
      <param name="adjaceny" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ConvertPointRepsToAdjacency(Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Converts point representative data to mesh adjacency information.</summary>
      <param name="pointReps" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ConvertPointRepsToAdjacency(System.Int32[])">
      <summary>Converts point representative data to mesh adjacency information.</summary>
      <param name="pointReps" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.DrawSubset(System.Int32)">
      <summary>Draws a subset of a mesh.</summary>
      <param name="attributeID" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.GenerateAdjacency(System.Single,System.Int32[])">
      <summary>Generates adjacency information based on mesh indices.</summary>
      <param name="epsilon" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.LockIndexBuffer(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks an index buffer and obtains a reference to the index buffer memory.</summary>
      <param name="typeIndex" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.LockIndexBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks an index buffer and obtains a reference to the index buffer memory.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.LockVertexBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a vertex buffer and obtains a reference to the vertex buffer memory.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.LockVertexBuffer(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a vertex buffer and obtains a reference to the vertex buffer memory.</summary>
      <param name="typeVertex" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.OnLostDevice(System.Object,System.EventArgs)">
      <summary>Retrieves the mesh options enabled for this mesh at creation time.</summary>
      <param name="sender" />
      <param name="e" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.op_Equality(Microsoft.DirectX.Direct3D.BaseMesh,Microsoft.DirectX.Direct3D.BaseMesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.op_Inequality(Microsoft.DirectX.Direct3D.BaseMesh,Microsoft.DirectX.Direct3D.BaseMesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.SetIndexBufferData(System.Object,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks an index buffer and obtains a reference to the index buffer memory.</summary>
      <param name="data" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.SetVertexBufferData(System.Object,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a vertex buffer and obtains a reference to the vertex buffer memory.</summary>
      <param name="data" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UnlockIndexBuffer">
      <summary>Unlocks an index buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UnlockVertexBuffer">
      <summary>Unlocks a vertex buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UpdateSemantics(Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>This method allows the user to change the mesh declaration without changing the data layout of the vertex buffer. The call is valid only if the old and new declaration formats have the same vertex size.</summary>
      <param name="declaration" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UpdateSemantics(Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>This method allows the user to change the mesh declaration without changing the data layout of the vertex buffer. The call is valid only if the old and new declaration formats have the same vertex size.</summary>
      <param name="declaration" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.AttributeTable">
      <summary>Retrieves either an attribute table for a mesh, or the number of entries stored in an attribute table for a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.Declaration">
      <summary>Retrieves a declaration describing the vertices in the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.Device">
      <summary>Retrieves the device associated with the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.IndexBuffer">
      <summary>Retrieves the data in an index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberBytesPerVertex">
      <summary>Gets the number of bytes per vertex.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberFaces">
      <summary>Retrieves the number of faces in the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberVertices">
      <summary>Retrieves the number of vertices in the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.Options">
      <summary>Retrieves the mesh options enabled for this mesh at creation time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.VertexBuffer">
      <summary>Retrieves the data in a vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.VertexFormat">
      <summary>Get the fixed function vertex value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CannotAttributeSortException">
      <summary>Attribute sort is not supported as an optimization technique. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotAttributeSortException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotAttributeSortException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotAttributeSortException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotAttributeSortException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException">
      <summary>The index buffer cannot be modified. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorOperator">
      <summary>Contains methods for manipulating colors.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Add(System.Drawing.Color,System.Drawing.Color)">
      <summary>Adds two color values together to create a new color value.</summary>
      <param name="c1" />
      <param name="c2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.AdjustContrast(System.Drawing.Color,System.Single)">
      <summary>Adjusts the contrast value of a color.</summary>
      <param name="c" />
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.AdjustSaturation(System.Drawing.Color,System.Single)">
      <summary>Adjusts the saturation value of a color.</summary>
      <param name="c" />
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp(System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>Uses linear interpolation to create a color value.</summary>
      <param name="c1" />
      <param name="c2" />
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Modulate(System.Drawing.Color,System.Drawing.Color)">
      <summary>Blends two colors.</summary>
      <param name="c1" />
      <param name="c2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Negative(System.Drawing.Color)">
      <summary>Creates the negative color value of a color value.</summary>
      <param name="c" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Scale(System.Drawing.Color,System.Single)">
      <summary>Scales a color value.</summary>
      <param name="c" />
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Subtract(System.Drawing.Color,System.Drawing.Color)">
      <summary>Subtracts two color values to create a new color value.</summary>
      <param name="c1" />
      <param name="c2" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConstantTable">
      <summary>The ConstantTable object is used to access the constant table. This table contains the variables that are used by high-level language shaders and effects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.ConstantTable.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetConstant(System.String,System.String)">
      <summary>Get a constant by looking up its name.</summary>
      <param name="constant" />
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetConstant(System.String,System.Int32)">
      <summary>Get a constant by looking up its index.</summary>
      <param name="constant" />
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetConstantDescription(System.String,System.Int32)">
      <summary>Get a description of a constant.</summary>
      <param name="constant" />
      <param name="numberConstants" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetConstantElement(System.String,System.Int32)">
      <summary>Get a constant from an array of constants. An array is made up of elements.</summary>
      <param name="constant" />
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.op_Equality(Microsoft.DirectX.Direct3D.ConstantTable,Microsoft.DirectX.Direct3D.ConstantTable)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.op_Inequality(Microsoft.DirectX.Direct3D.ConstantTable,Microsoft.DirectX.Direct3D.ConstantTable)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetDefaults(Microsoft.DirectX.Direct3D.Device)">
      <summary>Set the constants to their default values. The default values are declared in the variable declarations in the shader.</summary>
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Matrix[])">
      <summary>Set an array of nontransposed matrices.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Matrix)">
      <summary>Set a nontransposed matrix.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Set the contents of the buffer to the constant table.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Vector4[])">
      <summary>Set an array of 4-D vectors.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="vector" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Vector4)">
      <summary>Set a 4-D vector.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="vector" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,System.Single[])">
      <summary>Set an array of floating-point numbers.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="f" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,System.Single)">
      <summary>Set a floating-point number.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="f" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32[])">
      <summary>Set an array of integers.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="n" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32)">
      <summary>Set an integer value.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="n" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,System.Boolean[])">
      <summary>Set an array of Boolean values.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="b" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,System.String,System.Boolean)">
      <summary>Set a Boolean value.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="b" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValueTranspose(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Matrix[])">
      <summary>Set an array of transposed matrices.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValueTranspose(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Matrix)">
      <summary>Set a transposed matrix.</summary>
      <param name="device" />
      <param name="constant" />
      <param name="matrix" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTable.Description">
      <summary>Get a description of the constant table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTable.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTable.StreamData">
      <summary>The buffer that contains the constant table.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.D3DX">
      <summary>Contains default constant values for D3DX.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.D3DX.Default">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.D3DX.DefaultFloat">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.D3DX.DefaultNonPowerOf2">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.D3DX.#cctor">
      <summary>Static constructor.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.D3DX.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceInformation">
      <summary>Contains functionality to get the driver level for a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceInformation.GetDriverLevel(Microsoft.DirectX.Direct3D.Device)">
      <summary>Returns the driver level for this device.</summary>
      <param name="device" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Direct3DXException">
      <summary>Base exception class for Direct3DX.  Derives from DirectXException.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.GetExceptionFromHResult">
      <summary>Returns new exception from a HResult.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException">
      <summary>There is a duplicate named fragment.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Effect">
      <summary>The Effect object is used to set and query effects, and to choose techniques. An effect object can contain multiple techniques to render the same effect.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Effect.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Effect.Lost">
      <summary>Occurs when the effect has been lost, normally just before a device has been reset.  OnLostDevice is called automatically for you.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Effect.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Effect.m_pDevice">
      <summary>Retrieves the device associated with the effect.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Begin(Microsoft.DirectX.Direct3D.FX)">
      <summary>Begins the application of the technique.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Clone(Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="dev" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.End">
      <summary>End the application of the technique.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FindNextValidTechnique(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Searches for the next valid technique starting at the technique after the specified technique.</summary>
      <param name="technique" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="sourceDataFile" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="sourceDataFile" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="sourceDataFile" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="data" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="data" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="data" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromString(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromString(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromString(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Create an effect from an ASCII or binary effect description.</summary>
      <param name="device" />
      <param name="sourceData" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="pool" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.IsParameterUsed(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Determines if a parameter is used by the technique.</summary>
      <param name="parameter" />
      <param name="technique" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.OnLostDevice(System.Object,System.EventArgs)">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <param name="sender" />
      <param name="e" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.OnResetDevice(System.Object,System.EventArgs)">
      <summary>Should be called after the device has been reset.</summary>
      <param name="sender" />
      <param name="e" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.OnResetDevice">
      <summary>Should be called after the device has been reset.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Pass(System.Int32)">
      <summary>Applies the state settings for the specified pass of the technique.</summary>
      <param name="passNumber" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.raise_Lost(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.raise_Reset(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.ValidateTechnique(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Validate a technique.</summary>
      <param name="technique" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.CurrentTechnique">
      <summary>Get the current technique.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.Device">
      <summary>Retrieves the device associated with the effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.Pool">
      <summary>Get a reference to the pool of shared parameters.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.Technique">
      <summary>Sets the active technique.</summary>
      <param name="technique" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectCompiler">
      <summary>The EffectCompiler object compiles an effect from a function or from a vertex shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.EffectCompiler.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileEffect">
      <summary>Compile an effect.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileEffect(Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Compile an effect.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileEffect(Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Compile an effect.</summary>
      <param name="flags" />
      <param name="errorMessages" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileShader(Microsoft.DirectX.Direct3D.EffectHandle,System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Compile a shader from an effect that contains one or more functions.</summary>
      <param name="functionName" />
      <param name="target" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileShader(Microsoft.DirectX.Direct3D.EffectHandle,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary>Compile a shader from an effect that contains one or more functions.</summary>
      <param name="functionName" />
      <param name="target" />
      <param name="flags" />
      <param name="table" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileShader(Microsoft.DirectX.Direct3D.EffectHandle,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Compile a shader from an effect that contains one or more functions.</summary>
      <param name="functionName" />
      <param name="target" />
      <param name="flags" />
      <param name="errorMessages" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileShader(Microsoft.DirectX.Direct3D.EffectHandle,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary>Compile a shader from an effect that contains one or more functions.</summary>
      <param name="functionName" />
      <param name="target" />
      <param name="flags" />
      <param name="errorMessages" />
      <param name="table" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceFile" />
      <param name="includeFile" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceFile" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromFile(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceFile" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceData" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromString(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceData" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.GetLiteral(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Get a literal status of a parameter. A literal parameter has a value that doesn't change during the lifetime of an effect.</summary>
      <param name="parameter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.op_Equality(Microsoft.DirectX.Direct3D.EffectCompiler,Microsoft.DirectX.Direct3D.EffectCompiler)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.op_Inequality(Microsoft.DirectX.Direct3D.EffectCompiler,Microsoft.DirectX.Direct3D.EffectCompiler)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.SetLiteral(Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean)">
      <summary>Toggle the literal status of a parameter. A literal parameter has a value that doesn't change during the lifetime of an effect.</summary>
      <param name="parameter" />
      <param name="value" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectCompiler.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectHandle">
      <summary>Type used to represent a handle to effects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.FromString(System.String)">
      <summary>Create an effect handle from a string.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.op_Implicit(System.String)">
      <summary />
      <param name="value" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectPool">
      <summary>Applications use the EffectPool object to share resources between effects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.EffectPool.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.op_Equality(Microsoft.DirectX.Direct3D.EffectPool,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.op_Inequality(Microsoft.DirectX.Direct3D.EffectPool,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectPool.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Font">
      <summary>The Font object is used to encapsulate the textures and resources needed to render a specific font on a specific device.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Font.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Font.Lost">
      <summary>Occurs when the object has been lost, normally just before a device has been reset.  OnLostDevice is called automatically for you.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Font.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.Begin">
      <summary>Prepares a device for drawing text.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="font" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.DrawText(System.String,System.Drawing.Rectangle,System.Int32,System.Drawing.Color)">
      <summary>Draws formatted text. This method supports ANSI and Unicode strings.</summary>
      <param name="text" />
      <param name="rect" />
      <param name="format" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.DrawText(System.String,System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>Draws formatted text. This method supports ANSI and Unicode strings.</summary>
      <param name="text" />
      <param name="rect" />
      <param name="format" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.End">
      <summary>Restores the device state to how it was when  was called.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.FromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font)">
      <summary>Creates a new font object from a .NET font object.</summary>
      <param name="device" />
      <param name="font" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all stateblocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.OnResetDevice">
      <summary>Should be called after the device has been reset.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.op_Equality(Microsoft.DirectX.Direct3D.Font,Microsoft.DirectX.Direct3D.Font)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.op_Inequality(Microsoft.DirectX.Direct3D.Font,Microsoft.DirectX.Direct3D.Font)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.raise_Lost(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.raise_Reset(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Font.Device">
      <summary>Retrieves the Microsoft® Direct3D® device associated with the font object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Font.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FragmentLinker">
      <summary>The FragmentLinker object is used to link shader fragments at runtime.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.FragmentLinker.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.AddFragments(Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Add fragments to existing fragments. </summary>
      <param name="fragments" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.ClearCache">
      <summary>Clear the fragment linker cache. </summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="shaderCacheSize" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromFile(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles shader fragments and create a new fragment linker object.</summary>
      <param name="file" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles shader fragments and create a new fragment linker object.</summary>
      <param name="data" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromString(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles shader fragments and create a new fragment linker object.</summary>
      <param name="data" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetFragment(System.String)">
      <summary>Get a compiled shader fragment.</summary>
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetFragmentDescription(System.String)">
      <summary>Get a fragment description.</summary>
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetFragmentHandle(System.String)">
      <summary>Get a fragment by index.</summary>
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetFragmentHandle(System.Int32)">
      <summary>Get a fragment by index.</summary>
      <param name="index" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.LinkShader(System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectHandle[],System.String@)">
      <summary>Link a compiled shader at runtime. This is a very lightweight operation.</summary>
      <param name="target" />
      <param name="flags" />
      <param name="fragmentHandles" />
      <param name="errors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.LinkVertexShader(System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectHandle[],System.String@)">
      <summary>Link a compiled vertex shader at runtime. This is a very lightweight operation.</summary>
      <param name="target" />
      <param name="flags" />
      <param name="fragmentHandles" />
      <param name="errors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.op_Equality(Microsoft.DirectX.Direct3D.FragmentLinker,Microsoft.DirectX.Direct3D.FragmentLinker)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.op_Inequality(Microsoft.DirectX.Direct3D.FragmentLinker,Microsoft.DirectX.Direct3D.FragmentLinker)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.AllFragments">
      <summary>Get all fragments.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.Device">
      <summary>Get the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.NumberOfFragments">
      <summary>Get the number of linked fragments. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Frame">
      <summary>Encapsulates a transform frame in a transformation frame hierarchy.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.AppendChild(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.Frame)">
      <summary>Add a child frame to a frame.</summary>
      <param name="parent" />
      <param name="child" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.CalculateBoundingSphere(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Vector3@)">
      <summary>Computes the bounding sphere of all the meshes in the frame hierarchy.</summary>
      <param name="frameRoot" />
      <param name="center" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.Destroy(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.AllocateHierarchy)">
      <summary>Destroys the subtree of frames under the root, including the root.</summary>
      <param name="frameRoot" />
      <param name="allocHierarchy" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.Find(Microsoft.DirectX.Direct3D.Frame,System.String)">
      <summary>Finds a child in a frame.</summary>
      <param name="frameRoot" />
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.GetNumberNamedMatrices(Microsoft.DirectX.Direct3D.Frame)">
      <summary>Counts number of frames in a subtree that have non-null names.</summary>
      <param name="frameRoot" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.RegisterNamedMatrices(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.AnimationController)">
      <summary>Given a frame hierarchy, register all the named matrices in the animation mixer.</summary>
      <param name="frameRoot" />
      <param name="animationMixer" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.FrameFirstChild">
      <summary>Return the first child of the frame.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.FrameSibling">
      <summary>Return the first sibling of this frame in the hierarchy.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.MeshContainer">
      <summary>Encapsulates a mesh object in a transformation frame hierarchy.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.Name">
      <summary>Mesh name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.TransformationMatrix">
      <summary>Transformation matrix.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Geometry">
      <summary>Miscellaneous math related functions.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.BoxBoundProbe(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines if a ray intersects the volume of a box's bounding box.</summary>
      <param name="min" />
      <param name="max" />
      <param name="rayPosition" />
      <param name="rayDirection" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingBox(Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
      <summary>Computes a coordinate-axis-oriented bounding box.</summary>
      <param name="pointsFvf" />
      <param name="numVertices" />
      <param name="vertexFormat" />
      <param name="min" />
      <param name="max" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingBox(System.Array,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
      <summary>Computes a coordinate-axis-oriented bounding box.</summary>
      <param name="pointsFvf" />
      <param name="vertexFormat" />
      <param name="min" />
      <param name="max" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingSphere(Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Vector3@)">
      <summary>Computes a bounding sphere for the mesh.</summary>
      <param name="pointsFvf" />
      <param name="numVertices" />
      <param name="vertexFormat" />
      <param name="center" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingSphere(System.Array,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Vector3@)">
      <summary>Computes a bounding sphere for the mesh.</summary>
      <param name="pointsFvf" />
      <param name="vertexFormat" />
      <param name="center" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.DegreeToRadian(System.Single)">
      <summary>Converts degrees to radians.</summary>
      <param name="degree" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.FresnelTerm(System.Single,System.Single)">
      <summary>Computes the Fresnel Term.</summary>
      <param name="cosTheta" />
      <param name="refractionIndex" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.IntersectTri(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@)">
      <summary>Computes a per-vertex coordinate system based on texture coordinate gradients.</summary>
      <param name="zero" />
      <param name="one" />
      <param name="two" />
      <param name="rayPos" />
      <param name="rayDir" />
      <param name="hitLocation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.RadianToDegree(System.Single)">
      <summary>Converts radians to degrees.</summary>
      <param name="radian" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.SphereBoundProbe(Microsoft.DirectX.Vector3,System.Single,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines if a ray intersects the volume of a sphere's bounding box.</summary>
      <param name="center" />
      <param name="radius" />
      <param name="rayPosition" />
      <param name="rayDirection" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Include">
      <summary>The Include object provides access to include file directives. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Include.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Include.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Include.Open(System.String)">
      <summary>Opens an include file.</summary>
      <param name="filename" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidDataException">
      <summary>The data is invalid. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDataException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidMeshException">
      <summary>The mesh is invalid. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidMeshException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidMeshException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidMeshException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidMeshException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.KeyFrameInterpolator">
      <summary>This object implements an interpolator.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.#ctor(System.String,Microsoft.DirectX.Direct3D.KeyVector3[],Microsoft.DirectX.Direct3D.KeyQuaternion[],Microsoft.DirectX.Direct3D.KeyVector3[],System.Double)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="name" />
      <param name="scaleKeys" />
      <param name="rotationKeys" />
      <param name="translationKeys" />
      <param name="scaleInputTimeBy" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.GetRotationKeys">
      <summary>Returns the number of rotation key frames.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.GetScaleKeys">
      <summary>Returns the number of scale key frames.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.GetScaleRotateTranslate(System.Double)">
      <summary>Returns the scale, rotation, and translation at a given time.</summary>
      <param name="time" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.GetTranslationKeys">
      <summary>Returns the number of translation key frames.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.op_Equality(Microsoft.DirectX.Direct3D.KeyFrameInterpolator,Microsoft.DirectX.Direct3D.KeyFrameInterpolator)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.op_Inequality(Microsoft.DirectX.Direct3D.KeyFrameInterpolator,Microsoft.DirectX.Direct3D.KeyFrameInterpolator)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.LastScaleRotateTranslate">
      <summary>Returns the previous scale, rotation, and translation values.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.Name">
      <summary>Get the name of the interpolator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.Period">
      <summary>Get the interpolator period.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyFrameInterpolator.SourceTicksPerSecond">
      <summary>Returns the time scale factor passed to CreatekeyframeinterpolatorGraphicsd3dx. This value is used to scale local time to global (or application) time.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Line">
      <summary>The Line object implements line drawing using textured triangles.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Line.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Line.Lost">
      <summary>Occurs when the object has been lost, normally just before a device has been reset.  OnLostDevice is called automatically for you.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Line.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Begin">
      <summary>Prepares a device for drawing lines.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.#ctor(Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Draw(Microsoft.DirectX.Vector2[],System.Drawing.Color)">
      <summary>Draws a line strip in screen space. Input is in the form of an array that defines points (of D3DXVECTOR2) on the line strip.  </summary>
      <param name="vertexList" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Draw(Microsoft.DirectX.Vector2[],System.Int32)">
      <summary>Draws a line strip in screen space. Input is in the form of an array that defines points (of D3DXVECTOR2) on the line strip.  </summary>
      <param name="vertexList" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.DrawTransform(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix,System.Drawing.Color)">
      <summary>Draws a line strip in screen space with a specified input transformation matrix.</summary>
      <param name="vertexList" />
      <param name="transform" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.DrawTransform(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Draws a line strip in screen space with a specified input transformation matrix.</summary>
      <param name="vertexList" />
      <param name="transform" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.End">
      <summary>Restores the device state to how it was when  was called.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.OnResetDevice">
      <summary>Should be called after the device has been reset.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.op_Equality(Microsoft.DirectX.Direct3D.Line,Microsoft.DirectX.Direct3D.Line)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.op_Inequality(Microsoft.DirectX.Direct3D.Line,Microsoft.DirectX.Direct3D.Line)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.raise_Lost(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.raise_Reset(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Antialias">
      <summary>Toggles line antialiasing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Device">
      <summary>Retrieves the Microsoft® Direct3D® device associated with the line object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.GlLines">
      <summary>Toggles the mode to draw OpenGL-style lines.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Pattern">
      <summary>Get the line stipple pattern.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.PatternScale">
      <summary>Stretches the stipple pattern along the line direction.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Width">
      <summary>Gets or sets the thickness of the line.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException">
      <summary>The mesh has no data. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LoadUserData">
      <summary>This object is implemented by the application to allocate/free frame and mesh container objects. Methods on this are called during loading and destroying frame hierarchies. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.LoadFrameChildData(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Load frame child data from a .x file. </summary>
      <param name="frame" />
      <param name="xofChildData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.LoadMeshChildData(Microsoft.DirectX.Direct3D.MeshContainer,Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Load top level data from a .x file.</summary>
      <param name="meshContainer" />
      <param name="xofChildData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.LoadTopLevelData(Microsoft.DirectX.Direct3D.XFileData)">
      <summary> Load top level data from a .x file. </summary>
      <param name="xofChildData" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Mesh">
      <summary>Flags used to specify creation options for a mesh.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Mesh.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Box(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Single)">
      <summary>Uses a left-handed coordinate system to create a mesh containing an axis-aligned box.</summary>
      <param name="device" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Box(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Single,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh containing an axis-aligned box.</summary>
      <param name="device" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Clean(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32[]@)">
      <summary>Cleans a mesh, preparing it for simplification.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="adjacencyOut" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Clean(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32[]@,System.String@)">
      <summary>Cleans a mesh, preparing it for simplification.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="adjacencyOut" />
      <param name="errorsAndWarnings" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Clean(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Cleans a mesh, preparing it for simplification.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="adjacencyOut" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Clean(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.GraphicsStream,System.String@)">
      <summary>Cleans a mesh, preparing it for simplification.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="adjacencyOut" />
      <param name="errorsAndWarnings" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ComputeTangent(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Computes the tangent vectors for the texture coordinates given in the texture stage.</summary>
      <param name="texStage" />
      <param name="tangentIndex" />
      <param name="binormIndex" />
      <param name="wrap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ComputeTangent(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Computes the tangent vectors for the texture coordinates given in the texture stage.</summary>
      <param name="texStage" />
      <param name="tangentIndex" />
      <param name="binormIndex" />
      <param name="wrap" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ComputeTangent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
      <summary>Computes the tangent vectors for the texture coordinates given in the texture stage.</summary>
      <param name="texStage" />
      <param name="tangentIndex" />
      <param name="binormIndex" />
      <param name="wrap" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ConvertMeshSubsetToSingleStrip(Microsoft.DirectX.Direct3D.Mesh,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32@)">
      <summary>Converts the specified mesh subset into a single triangle strip.</summary>
      <param name="mesh" />
      <param name="attributeIdentifier" />
      <param name="indexBufferOptions" />
      <param name="numIndices" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ConvertMeshSubsetToStrips(Microsoft.DirectX.Direct3D.BaseMesh,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32@,Microsoft.DirectX.Direct3D.GraphicsStream@,System.Int32@)">
      <summary>Convert the specified mesh subset into a series of strips.</summary>
      <param name="mesh" />
      <param name="attributeIdentifier" />
      <param name="indexBufferOptions" />
      <param name="numIndices" />
      <param name="stripLengths" />
      <param name="numStrips" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.#ctor(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="numFaces" />
      <param name="numVertices" />
      <param name="options" />
      <param name="vertexFormat" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.#ctor(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="numFaces" />
      <param name="numVertices" />
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.#ctor(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="numFaces" />
      <param name="numVertices" />
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Cylinder(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
      <summary>Uses a left-handed coordinate system to create a mesh containing a cylinder.</summary>
      <param name="device" />
      <param name="radius1" />
      <param name="radius2" />
      <param name="length" />
      <param name="slices" />
      <param name="stacks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Cylinder(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Single,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh containing a cylinder.</summary>
      <param name="device" />
      <param name="radius1" />
      <param name="radius2" />
      <param name="length" />
      <param name="slices" />
      <param name="stacks" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from a  .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from a  .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from a  .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a mesh from a  .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Loads a mesh from a  .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a  .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a  .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from a  .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="options" />
      <param name="device" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="options" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from memory.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from a  object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from a  object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from a  object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a mesh from a  object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Loads a mesh from a  object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a  object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a mesh from a  object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Intersect(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines if a ray intersects with a mesh.</summary>
      <param name="rayPos" />
      <param name="rayDir" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Intersect(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation[]@)">
      <summary>Determines if a ray intersects with a mesh.</summary>
      <param name="rayPos" />
      <param name="rayDir" />
      <param name="allHits" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Intersect(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@)">
      <summary>Determines if a ray intersects with a mesh.</summary>
      <param name="rayPos" />
      <param name="rayDir" />
      <param name="closestHit" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Intersect(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@,Microsoft.DirectX.Direct3D.IntersectInformation[]@)">
      <summary>Determines if a ray intersects with a mesh.</summary>
      <param name="rayPos" />
      <param name="rayDir" />
      <param name="closestHit" />
      <param name="allHits" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.IntersectSubset(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Intersects the specified ray with the given mesh subset. This provides similar functionality to .</summary>
      <param name="attribID" />
      <param name="rayPos" />
      <param name="rayDir" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.IntersectSubset(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation[]@)">
      <summary>Intersects the specified ray with the given mesh subset. This provides similar functionality to .</summary>
      <param name="attribID" />
      <param name="rayPos" />
      <param name="rayDir" />
      <param name="allHits" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.IntersectSubset(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@)">
      <summary>Intersects the specified ray with the given mesh subset. This provides similar functionality to .</summary>
      <param name="attribID" />
      <param name="rayPos" />
      <param name="rayDir" />
      <param name="closestHit" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.IntersectSubset(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@,Microsoft.DirectX.Direct3D.IntersectInformation[]@)">
      <summary>Intersects the specified ray with the given mesh subset. This provides similar functionality to .</summary>
      <param name="attribID" />
      <param name="rayPos" />
      <param name="rayDir" />
      <param name="closestHit" />
      <param name="allHits" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LoadHierarchy(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.AllocateHierarchy,Microsoft.DirectX.Direct3D.LoadUserData)">
      <summary>Loads the first frame hierarchy in a .x file.</summary>
      <param name="stream" />
      <param name="options" />
      <param name="device" />
      <param name="allocHierarcy" />
      <param name="userDataLoader" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LoadHierarchy(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.AllocateHierarchy,Microsoft.DirectX.Direct3D.LoadUserData)">
      <summary>Loads the first frame hierarchy in a .x file.</summary>
      <param name="stream" />
      <param name="readBytes" />
      <param name="options" />
      <param name="device" />
      <param name="allocHierarcy" />
      <param name="userDataLoader" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LoadHierarchyFromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.AllocateHierarchy,Microsoft.DirectX.Direct3D.LoadUserData)">
      <summary>Loads the first frame hierarchy in a .x file.</summary>
      <param name="filename" />
      <param name="options" />
      <param name="device" />
      <param name="allocHierarcy" />
      <param name="userDataLoader" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LockAttributeBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks an attribute buffer and obtains a reference to the attribute buffer memory.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance, generating an output mesh.</summary>
      <param name="flags" />
      <param name="adjacencyIn" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance, generating an output mesh.</summary>
      <param name="flags" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[])">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance, generating an output mesh.</summary>
      <param name="flags" />
      <param name="adjacencyIn" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance, generating an output mesh.</summary>
      <param name="flags" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.OptimizeInPlace(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance.</summary>
      <param name="flags" />
      <param name="adjacencyIn" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.OptimizeInPlace(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[])">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance.</summary>
      <param name="flags" />
      <param name="adjacencyIn" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.OptimizeInPlace(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance.</summary>
      <param name="flags" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.OptimizeInPlace(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance.</summary>
      <param name="flags" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.op_Equality(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.Mesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.op_Inequality(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.Mesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Polygon(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32)">
      <summary>Uses a left-handed coordinate system to create a mesh containing an n-sided polygon.</summary>
      <param name="device" />
      <param name="length" />
      <param name="sides" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Polygon(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh containing an n-sided polygon.</summary>
      <param name="device" />
      <param name="length" />
      <param name="sides" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.String,System.Int32[],Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the progressive mesh to the specified stream object.</summary>
      <param name="filename" />
      <param name="adjacency" />
      <param name="materials" />
      <param name="format" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.String,System.Int32[],Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.EffectInstance,Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the progressive mesh to the specified stream object.</summary>
      <param name="filename" />
      <param name="adjacency" />
      <param name="materials" />
      <param name="effect" />
      <param name="format" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.SaveHierarchyToFile(System.String,Microsoft.DirectX.Direct3D.XFileFormat,Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.AnimationController,Microsoft.DirectX.Direct3D.SaveUserData)">
      <summary>Saves the frame hierarchy in a .x file.</summary>
      <param name="filename" />
      <param name="format" />
      <param name="frameRoot" />
      <param name="animationMixer" />
      <param name="saveUserData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given MinValue.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="minValue" />
      <param name="options" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given MinValue.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexWeights" />
      <param name="minValue" />
      <param name="options" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given MinValue.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="minValue" />
      <param name="options" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Single[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given MinValue.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="vertexWeights" />
      <param name="minValue" />
      <param name="options" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given MinValue.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexWeights" />
      <param name="minValue" />
      <param name="options" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.AttributeWeights,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given MinValue.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="vertexWeights" />
      <param name="minValue" />
      <param name="options" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Sphere(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32,System.Int32)">
      <summary>Uses a left-handed coordinate system to create a mesh containing a sphere.</summary>
      <param name="device" />
      <param name="radius" />
      <param name="slices" />
      <param name="stacks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Sphere(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh containing a sphere.</summary>
      <param name="device" />
      <param name="radius" />
      <param name="slices" />
      <param name="stacks" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Split(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Splits a mesh into meshes smaller than the specified size.</summary>
      <param name="mesh" />
      <param name="adjacencyIn" />
      <param name="maxSize" />
      <param name="options" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Split(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Splits a mesh into meshes smaller than the specified size.</summary>
      <param name="mesh" />
      <param name="adjacencyIn" />
      <param name="maxSize" />
      <param name="options" />
      <param name="adjacencyArrayOut" />
      <param name="faceRemapArrayOut" />
      <param name="vertRemapArrayOut" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Teapot(Microsoft.DirectX.Direct3D.Device)">
      <summary>Uses a left-handed coordinate system to create a mesh containing a teapot.</summary>
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Teapot(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh containing a teapot.</summary>
      <param name="device" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TessellateNPatches(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,System.Single,System.Boolean)">
      <summary>Tessellates the given mesh using the N-patch tessellation scheme.</summary>
      <param name="mesh" />
      <param name="adjacencyIn" />
      <param name="numSegs" />
      <param name="quadraticInterpNormals" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TessellateNPatches(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,System.Single,System.Boolean,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Tessellates the given mesh using the N-patch tessellation scheme.</summary>
      <param name="mesh" />
      <param name="adjacencyIn" />
      <param name="numSegs" />
      <param name="quadraticInterpNormals" />
      <param name="adjacencyOut" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TessellateNPatches(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single,System.Boolean)">
      <summary>Tessellates the given mesh using the N-patch tessellation scheme.</summary>
      <param name="mesh" />
      <param name="adjacencyIn" />
      <param name="numSegs" />
      <param name="quadraticInterpNormals" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TessellateNPatches(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single,System.Boolean,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Tessellates the given mesh using the N-patch tessellation scheme.</summary>
      <param name="mesh" />
      <param name="adjacencyIn" />
      <param name="numSegs" />
      <param name="quadraticInterpNormals" />
      <param name="adjacencyOut" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TextFromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font,System.String,System.Single,System.Single)">
      <summary>Creates a font object for a device and a .NET font object.</summary>
      <param name="device" />
      <param name="font" />
      <param name="text" />
      <param name="deviation" />
      <param name="extrusion" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TextFromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font,System.String,System.Single,System.Single,Microsoft.DirectX.Direct3D.GlyphMetricsFloat[]@)">
      <summary>Creates a font object for a device and a .NET font object.</summary>
      <param name="device" />
      <param name="font" />
      <param name="text" />
      <param name="deviation" />
      <param name="extrusion" />
      <param name="glyphMetrics" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TextFromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font,System.String,System.Single,System.Single,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Creates a font object for a device and a .NET font object.</summary>
      <param name="device" />
      <param name="font" />
      <param name="text" />
      <param name="deviation" />
      <param name="extrusion" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TextFromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font,System.String,System.Single,System.Single,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.GlyphMetricsFloat[]@)">
      <summary>Creates a font object for a device and a .NET font object.</summary>
      <param name="device" />
      <param name="font" />
      <param name="text" />
      <param name="deviation" />
      <param name="extrusion" />
      <param name="adjacency" />
      <param name="glyphMetrics" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Torus(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Int32,System.Int32)">
      <summary>Uses a left-handed coordinate system to create a mesh containing a torus.</summary>
      <param name="device" />
      <param name="innerRadius" />
      <param name="outterRadius" />
      <param name="sides" />
      <param name="rings" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Torus(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh containing a torus.</summary>
      <param name="device" />
      <param name="innerRadius" />
      <param name="outterRadius" />
      <param name="sides" />
      <param name="rings" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.UnlockAttributeBuffer(System.Int32[])">
      <summary>Unlocks an attribute buffer.</summary>
      <param name="dataAttribute" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Validate(System.Int32[])">
      <summary>Validates a mesh.</summary>
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Validate(System.Int32[],System.String@)">
      <summary>Validates a mesh.</summary>
      <param name="adjacency" />
      <param name="errorsAndWarnings" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Validate(Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Validates a mesh.</summary>
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Validate(Microsoft.DirectX.Direct3D.GraphicsStream,System.String@)">
      <summary>Validates a mesh.</summary>
      <param name="adjacency" />
      <param name="errorsAndWarnings" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(System.Int32,Microsoft.DirectX.Direct3D.WeldEpsilons,System.Int32[],Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Welds replicated vertices together that have equal attributes. This method uses specified epsilons for equality comparisons.</summary>
      <param name="flags" />
      <param name="epsilons" />
      <param name="adjacencyIn" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(System.Int32,Microsoft.DirectX.Direct3D.WeldEpsilons,System.Int32[])">
      <summary>Welds replicated vertices together that have equal attributes. This method uses specified epsilons for equality comparisons.</summary>
      <param name="flags" />
      <param name="epsilons" />
      <param name="adjacencyIn" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(System.Int32,Microsoft.DirectX.Direct3D.WeldEpsilons,System.Int32[],System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Welds replicated vertices together that have equal attributes. This method uses specified epsilons for equality comparisons.</summary>
      <param name="flags" />
      <param name="epsilons" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(System.Int32,Microsoft.DirectX.Direct3D.WeldEpsilons,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Welds replicated vertices together that have equal attributes. This method uses specified epsilons for equality comparisons.</summary>
      <param name="flags" />
      <param name="epsilons" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(System.Int32,Microsoft.DirectX.Direct3D.WeldEpsilons,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Welds replicated vertices together that have equal attributes. This method uses specified epsilons for equality comparisons.</summary>
      <param name="flags" />
      <param name="epsilons" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Mesh.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MeshContainer">
      <summary>Encapsulates a mesh object in a transformation frame hierarchy.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.GetAdjacency">
      <summary>Reference to an array of three Int32 per triangle of the mesh that contains adjacency information.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.GetAdjacencyStream">
      <summary>Stream containing three Int32 per triangle of the mesh that contains adjacency information.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.GetMaterials">
      <summary>Array of mesh materials.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.EffectInstance">
      <summary>The effect instance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.MeshData">
      <summary>Type of data in the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.Name">
      <summary>Mesh name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.NextContainer">
      <summary>Reference to the next mesh container.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.SkinInformation">
      <summary>Reference to the skin information object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchMesh">
      <summary>This object encapsulates patch mesh functionality.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.PatchMesh.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Clone(System.Int32,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="decl" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Clone(System.Int32,Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="decl" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.GenerateAdjacency(System.Single)">
      <summary>Generates adjacency information based on mesh indices.</summary>
      <param name="tolerance" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.GetTessellateSize(System.Single,System.Int32,System.Int32@,System.Int32@)">
      <summary>Get the size of the tessellated mesh, given a tessellation level.</summary>
      <param name="tessLevel" />
      <param name="adaptive" />
      <param name="numTriangles" />
      <param name="numVertices" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LoadFromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a patch mesh from a Microsoft DirectX® .x file.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LoadFromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a patch mesh from a Microsoft DirectX® .x file.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LoadFromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a patch mesh from a Microsoft DirectX® .x file.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LoadFromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a patch mesh from a Microsoft DirectX® .x file.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockAttributeBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Get the number of patches in the mesh.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockIndexBuffer(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Lock the index buffer.</summary>
      <param name="typeIndex" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockIndexBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Lock the index buffer.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockVertexBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Lock the vertex buffer.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockVertexBuffer(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Lock the vertex buffer.</summary>
      <param name="typeVertex" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Optimize(System.Int32)">
      <summary>Optimizes the patch mesh for efficient tessellation.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.op_Equality(Microsoft.DirectX.Direct3D.PatchMesh,Microsoft.DirectX.Direct3D.PatchMesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.op_Inequality(Microsoft.DirectX.Direct3D.PatchMesh,Microsoft.DirectX.Direct3D.PatchMesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.SetIndexBufferData(System.Object,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Lock the index buffer.</summary>
      <param name="data" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.SetVertexBufferData(System.Object,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Lock the vertex buffer.</summary>
      <param name="data" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Tessellate(System.Single,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Performs uniform tessellation based on the tessellation level.</summary>
      <param name="tessLevel" />
      <param name="mesh" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.TessellateAdaptive(Microsoft.DirectX.Vector4,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Performs adaptive tessellation based on the z-based adaptive tessellation criterion.</summary>
      <param name="trans" />
      <param name="maxTessellate" />
      <param name="minTessellate" />
      <param name="mesh" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.UnlockAttributeBuffer(System.Int32[])">
      <summary>Unlock the attribute buffer.</summary>
      <param name="dataAttribute" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.UnlockIndexBuffer">
      <summary>Unlock the index buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.UnlockVertexBuffer">
      <summary>Unlock the vertex buffer.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.ControlVerticesPerPatch">
      <summary>Get the number of control vertices per patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.Declaration">
      <summary>Get the vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.Device">
      <summary>Get the device that created the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.DisplacementParameter">
      <summary>Get mesh geometry displacement parameters.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.IndexBuffer">
      <summary>Get the mesh index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.NumberPatches">
      <summary>Get the number of patches in the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.NumberVertices">
      <summary>Get the number of Vertices for a mesh</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.Options">
      <summary>Get the type of patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.PatchInformation">
      <summary>Get the attributes of the patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.VertexBuffer">
      <summary>Get the mesh vertex buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ProgressiveMesh">
      <summary>Applications use the methods of the ProgressiveMesh object to manipulate progressive mesh objects. A progressive mesh enables progressive refinement of the mesh object.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.ProgressiveMesh.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="vertexFormat" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="minValue" />
      <param name="options" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexWeights" />
      <param name="minValue" />
      <param name="options" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="minValue" />
      <param name="options" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Single[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="vertexWeights" />
      <param name="minValue" />
      <param name="options" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexWeights" />
      <param name="minValue" />
      <param name="options" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.AttributeWeights,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="vertexWeights" />
      <param name="minValue" />
      <param name="options" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance, generating an output mesh.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[]@,System.Int32[]@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance, generating an output mesh.</summary>
      <param name="flags" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance, generating an output mesh.</summary>
      <param name="flags" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.OptimizeBaseLevelOfDetail(Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Optimizes the base level of detail (LOD) part of a  object.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.OptimizeBaseLevelOfDetail(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[]@)">
      <summary>Optimizes the base level of detail (LOD) part of a  object.</summary>
      <param name="flags" />
      <param name="faceRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.op_Equality(Microsoft.DirectX.Direct3D.ProgressiveMesh,Microsoft.DirectX.Direct3D.ProgressiveMesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.op_Inequality(Microsoft.DirectX.Direct3D.ProgressiveMesh,Microsoft.DirectX.Direct3D.ProgressiveMesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.TrimByFaces(System.Int32,System.Int32)">
      <summary>Modifies the minimum and maximum level of detail (LOD) of a  object.</summary>
      <param name="newFacesMin" />
      <param name="newFacesMax" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.TrimByFaces(System.Int32,System.Int32,System.Int32[]@,System.Int32[]@)">
      <summary>Modifies the minimum and maximum level of detail (LOD) of a  object.</summary>
      <param name="newFacesMin" />
      <param name="newFacesMax" />
      <param name="faceRemap" />
      <param name="vertRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.TrimByVertices(System.Int32,System.Int32)">
      <summary>Modifies the minimum and maximum level of detail (LOD) of a  object.</summary>
      <param name="newVerticesMin" />
      <param name="newVerticesMax" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.TrimByVertices(System.Int32,System.Int32,System.Int32[]@,System.Int32[]@)">
      <summary>Modifies the minimum and maximum level of detail (LOD) of a  object.</summary>
      <param name="newVerticesMin" />
      <param name="newVerticesMax" />
      <param name="faceRemap" />
      <param name="vertRemap" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.Adjacency">
      <summary>Returns the face adjacency array of the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.MaxFaces">
      <summary>Retrieves the maximum number of faces that the progressive mesh supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.MaxVertices">
      <summary>Retrieves the maximum number of vertices that the progressive mesh supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.MinFaces">
      <summary>Retrieves the minimum number of faces that the progressive mesh supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.MinVertices">
      <summary>Retrieves the minimum number of vertices that the progressive mesh supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.NumberFaces">
      <summary>Sets the current level of detail to as close to the specified number of faces as possible.</summary>
      <param name="faces" />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.NumberVertices">
      <summary>Sets the current level of detail to as close to the specified number of vertices as possible.</summary>
      <param name="vertices" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap">
      <summary>The RenderToEnvironmentMap object is used to generalize the process of rendering to environment maps.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Lost">
      <summary>Occurs when the object has been lost, normally just before a device has been reset.  OnLostDevice is called automatically for you.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.BeginCube(Microsoft.DirectX.Direct3D.CubeTexture)">
      <summary>Begins a scene for an environmental cube map.</summary>
      <param name="cubeTexture" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.BeginHemisphere(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Begins a scene for a hemisphere environment map.</summary>
      <param name="textureZPos" />
      <param name="textureZNeg" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.BeginParabolic(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Begins a scene for a parabolic environment map.</summary>
      <param name="textureZPos" />
      <param name="textureZNeg" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.BeginSphere(Microsoft.DirectX.Direct3D.Texture)">
      <summary>Begins a scene for a spherical environment map.</summary>
      <param name="texture" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="format" />
      <param name="depthStencil" />
      <param name="depthStencilFormat" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.End(System.Int32)">
      <summary>Ends a scene for an environmental map.</summary>
      <param name="faceMapFilter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Face(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)">
      <summary>Ends the current scene if one is active and begins a new scene on the specified face.</summary>
      <param name="face" />
      <param name="faceMapFilter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all stateblocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.OnResetDevice">
      <summary>Should be called after the device has been reset.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.op_Equality(Microsoft.DirectX.Direct3D.RenderToEnvironmentMap,Microsoft.DirectX.Direct3D.RenderToEnvironmentMap)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.op_Inequality(Microsoft.DirectX.Direct3D.RenderToEnvironmentMap,Microsoft.DirectX.Direct3D.RenderToEnvironmentMap)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.raise_Lost(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.raise_Reset(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Description">
      <summary>Retrieves the description of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Device">
      <summary>Retrieves the Microsoft® Direct3D® device associated with the environment map.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderToSurface">
      <summary>The RenderToSurface object is used to generalize the process of rendering to surfaces.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToSurface.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToSurface.Lost">
      <summary>Occurs when the effect has been lost, normally just before a device has been reset.  OnLostDevice is called automatically for you.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToSurface.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.BeginScene(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Viewport)">
      <summary>Begins a scene.</summary>
      <param name="surface" />
      <param name="viewport" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="width" />
      <param name="height" />
      <param name="format" />
      <param name="depthStencil" />
      <param name="depthStencilFormat" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.EndScene(Microsoft.DirectX.Direct3D.Filter)">
      <summary>Ends a scene.</summary>
      <param name="mipFilter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all stateblocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.OnResetDevice">
      <summary>Should be called after the device has been reset.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.op_Equality(Microsoft.DirectX.Direct3D.RenderToSurface,Microsoft.DirectX.Direct3D.RenderToSurface)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.op_Inequality(Microsoft.DirectX.Direct3D.RenderToSurface,Microsoft.DirectX.Direct3D.RenderToSurface)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.raise_Lost(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.raise_Reset(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurface.Description">
      <summary>Retrieves the parameters of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurface.Device">
      <summary>Retrieves the Microsoft® Direct3D® device associated with the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurface.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SaveUserData">
      <summary>This object is implemented by the application to save frame and mesh container objects. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.AddFrameChildData(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.XFileSaveObject,Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Load top level data from a .x file. </summary>
      <param name="frame" />
      <param name="xofSave" />
      <param name="xofFrameData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.AddMeshChildData(Microsoft.DirectX.Direct3D.MeshContainer,Microsoft.DirectX.Direct3D.XFileSaveObject,Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Load top level data from a .x file. </summary>
      <param name="meshContainer" />
      <param name="xofSave" />
      <param name="xofFrameData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.AddTopLevelDataObjectsPost(Microsoft.DirectX.Direct3D.XFileSaveObject)">
      <summary>Load top level data from a .x file. </summary>
      <param name="xofSave" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.AddTopLevelDataObjectsPre(Microsoft.DirectX.Direct3D.XFileSaveObject)">
      <summary>Load top level data from a .x file. </summary>
      <param name="xofSave" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.RegisterTemplates(Microsoft.DirectX.Direct3D.XFileManager)">
      <summary>Load top level data from a .x file. </summary>
      <param name="xfileApi" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.SaveTemplates(Microsoft.DirectX.Direct3D.XFileSaveObject)">
      <summary>Load top level data from a .x file. </summary>
      <param name="xofSave" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderLoader">
      <summary>Functionality for loading shader objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader(System.String,System.String,Microsoft.DirectX.Direct3D.Include,System.String,System.Int32)">
      <summary>Compile a shader file.</summary>
      <param name="data" />
      <param name="functionName" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader(System.String,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,System.Int32)">
      <summary>Compile a shader file.</summary>
      <param name="data" />
      <param name="functionName" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader(System.String,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,System.Int32,System.String@,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary>Compile a shader file.</summary>
      <param name="data" />
      <param name="functionName" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <param name="errorMessages" />
      <param name="table" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile(System.String,System.String,Microsoft.DirectX.Direct3D.Include,System.String,System.Int32)">
      <summary>Compile a shader file.</summary>
      <param name="file" />
      <param name="functionName" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile(System.String,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,System.Int32)">
      <summary>Compile a shader file.</summary>
      <param name="file" />
      <param name="functionName" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile(System.String,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,System.Int32,System.String@,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary>Compile a shader file.</summary>
      <param name="file" />
      <param name="functionName" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <param name="errorMessages" />
      <param name="table" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream(System.IO.Stream,System.String,Microsoft.DirectX.Direct3D.Include,System.String,System.Int32)">
      <summary>Compile a shader file.</summary>
      <param name="data" />
      <param name="functionName" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream(System.IO.Stream,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,System.Int32)">
      <summary>Compile a shader file.</summary>
      <param name="data" />
      <param name="functionName" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream(System.IO.Stream,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,System.Int32,System.String@,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary>Compile a shader file.</summary>
      <param name="data" />
      <param name="functionName" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="target" />
      <param name="flags" />
      <param name="errorMessages" />
      <param name="table" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assemble a shader.</summary>
      <param name="sourceFile" />
      <param name="includeFile" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assemble a shader.</summary>
      <param name="sourceFile" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromFile(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assemble a shader.</summary>
      <param name="sourceFile" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assemble a shader.</summary>
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assemble a shader.</summary>
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assemble a shader.</summary>
      <param name="sourceData" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assemble a shader.</summary>
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assemble a shader.</summary>
      <param name="sourceData" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromString(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assemble a shader.</summary>
      <param name="sourceData" />
      <param name="preprocessorDefines" />
      <param name="includeFile" />
      <param name="flags" />
      <param name="complilationErrors" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SimplificationMesh">
      <summary>Applications use the methods of the SimplificationMesh object to manipulate simplification mesh objects. A simplification mesh is used to simplify a given mesh to a lower number of faces.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.SimplificationMesh.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Int32[]@)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <param name="adjacencyOut" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Int32[]@)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <param name="adjacencyOut" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="vertexFormat" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Int32[]@)">
      <summary>Duplicates the object.</summary>
      <param name="options" />
      <param name="vertexFormat" />
      <param name="device" />
      <param name="adjacencyOut" />
      <param name="vertexRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones a progressive mesh using a  code.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Single[]@)">
      <summary>Clones a progressive mesh using a  code.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <param name="vertexRemapOut" />
      <param name="errorsByFace" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones a progressive mesh using a  code.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Single[]@)">
      <summary>Clones a progressive mesh using a  code.</summary>
      <param name="options" />
      <param name="declaration" />
      <param name="device" />
      <param name="vertexRemapOut" />
      <param name="errorsByFace" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones a progressive mesh using a  code.</summary>
      <param name="options" />
      <param name="vertexFormat" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Single[]@)">
      <summary>Clones a progressive mesh using a  code.</summary>
      <param name="options" />
      <param name="vertexFormat" />
      <param name="device" />
      <param name="vertexRemapOut" />
      <param name="errorsByFace" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="vertexWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Single[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="vertexWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,System.Single[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.AttributeWeights)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Direct3D.AttributeWeights,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
      <param name="vertexWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="mesh" />
      <param name="adjacency" />
      <param name="vertexAttributeWeights" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.op_Equality(Microsoft.DirectX.Direct3D.SimplificationMesh,Microsoft.DirectX.Direct3D.SimplificationMesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.op_Inequality(Microsoft.DirectX.Direct3D.SimplificationMesh,Microsoft.DirectX.Direct3D.SimplificationMesh)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.ReduceFaces(System.Int32)">
      <summary>Reduces the number of faces in a simplification mesh.</summary>
      <param name="faces" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.ReduceVertices(System.Int32)">
      <summary>Reduces the number of vertices in a simplification mesh.</summary>
      <param name="vertices" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.Declaration">
      <summary>Retrieves a declaration describing the vertices in the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.Device">
      <summary>Retrieves the device object associated with the simplification mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.MaxFaces">
      <summary>Retrieves the maximum number of faces that the simplification mesh supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.MaxVertices">
      <summary>Retrieves the maximum number of vertices that the simplification mesh supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.NumberFaces">
      <summary>Retrieves the number of faces in the simplification mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.NumberVertices">
      <summary>Retrieves the number of vertices in the simplification mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.Options">
      <summary>Retrieves the mesh options enabled for this simplification mesh at creation time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.VertexAttributeWeights">
      <summary>Returns the per vertex attribute weights used to create the SpmeshGraphicsd3dx object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.VertexFormat">
      <summary>Retrieves the TODO:MISSING TLA of the vertices in the simplification mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.VertexWeights">
      <summary>Returns the per vertex weights used to create the ID3DXSPMesh object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SkinInformation">
      <summary>Applications use this object to manipulate the bones that are used to animate a skin mesh.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.SkinInformation.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Clone">
      <summary>Duplicates the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@,System.Int32@,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@)">
      <summary>Takes a mesh and returns a new mesh with per-vertex blend weights and a bone combination table. The table describes which bones affect which subsets of the mesh.</summary>
      <param name="mesh" />
      <param name="options" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <param name="maxFaceInfl" />
      <param name="numBoneCombinations" />
      <param name="boneCombinationTable" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@,System.Int32@,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@)">
      <summary>Takes a mesh and returns a new mesh with per-vertex blend weights and a bone combination table. The table describes which bones affect which subsets of the mesh.</summary>
      <param name="mesh" />
      <param name="options" />
      <param name="adjacencyIn" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <param name="maxFaceInfl" />
      <param name="numBoneCombinations" />
      <param name="boneCombinationTable" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToIndexedBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@,System.Int32@,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@)">
      <summary>Takes a mesh and returns a new mesh with per-vertex blend weights, indices, and a bone combination table. The table describes which bone palettes affect which subsets of the mesh.</summary>
      <param name="mesh" />
      <param name="options" />
      <param name="adjacencyIn" />
      <param name="paletteSize" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <param name="maxFaceInfl" />
      <param name="numBoneCombinations" />
      <param name="boneCombinationTable" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToIndexedBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.Direct3D.GraphicsStream@,System.Int32@,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@)">
      <summary>Takes a mesh and returns a new mesh with per-vertex blend weights, indices, and a bone combination table. The table describes which bone palettes affect which subsets of the mesh.</summary>
      <param name="mesh" />
      <param name="options" />
      <param name="adjacencyIn" />
      <param name="paletteSize" />
      <param name="adjacencyOut" />
      <param name="faceRemap" />
      <param name="vertexRemap" />
      <param name="maxFaceInfl" />
      <param name="numBoneCombinations" />
      <param name="boneCombinationTable" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(Microsoft.DirectX.Direct3D.BaseMesh,System.Int32,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="baseMesh" />
      <param name="boneCombinationTableLength" />
      <param name="boneCombinationTable" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(Microsoft.DirectX.Direct3D.BaseMesh,Microsoft.DirectX.Direct3D.BoneCombination[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="baseMesh" />
      <param name="boneCombinationTable" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(System.Int32,Microsoft.DirectX.Direct3D.VertexFormats,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="numVertices" />
      <param name="vertexFormat" />
      <param name="numBones" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(System.Int32,Microsoft.DirectX.Direct3D.VertexElement[],System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="numVertices" />
      <param name="decl" />
      <param name="numBones" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(System.Int32,Microsoft.DirectX.Direct3D.GraphicsStream,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="numVertices" />
      <param name="declaration" />
      <param name="numBones" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetBoneInfluence(System.Int32,System.Int32[]@,System.Single[]@)">
      <summary>Get the number of bones.</summary>
      <param name="bone" />
      <param name="vertices" />
      <param name="weights" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetBoneName(System.Int32)">
      <summary>Get the bone name.</summary>
      <param name="bone" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetBoneOffsetMatrix(System.Int32)">
      <summary>Get the bone offset matrix.</summary>
      <param name="bone" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetMaxFaceInfluences(Microsoft.DirectX.Direct3D.IndexBuffer,System.Int32)">
      <summary>Get the maximum face influences in a triangle mesh with the specified index buffer.</summary>
      <param name="indexBuffer" />
      <param name="numFaces" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetNumBoneInfluences(System.Int32)">
      <summary>Get the number of influences for a bone.</summary>
      <param name="bone" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.op_Equality(Microsoft.DirectX.Direct3D.SkinInformation,Microsoft.DirectX.Direct3D.SkinInformation)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.op_Inequality(Microsoft.DirectX.Direct3D.SkinInformation,Microsoft.DirectX.Direct3D.SkinInformation)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Remap(System.Int32[])">
      <summary>Update bone influence information to match vertices after they are reordered. This should be called if the target vertex buffer has been reordered externally.</summary>
      <param name="vertRemap" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.SetBoneInfluence(System.Int32,System.Int32,System.Int32[],System.Single[])">
      <summary>Set the influence value for a bone.</summary>
      <param name="bone" />
      <param name="numInfluences" />
      <param name="vertices" />
      <param name="weights" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.SetBoneName(System.Int32,System.String)">
      <summary>Set the bone name.</summary>
      <param name="bone" />
      <param name="name" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.SetBoneOffsetMatrix(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Set the bone offset matrix.</summary>
      <param name="bone" />
      <param name="boneTransform" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.UpdateSkinnedMesh(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Array,System.Array@)">
      <summary>Apply software skinning to the target vertices based on the current pose matrices.</summary>
      <param name="boneTransforms" />
      <param name="boneInvTransforms" />
      <param name="verticesSource" />
      <param name="verticesDestination" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.Declaration">
      <summary>Get the vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.MaxVertexInfluences">
      <summary>Get the number of influences for a bone.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.MinBoneInfluence">
      <summary>Get the minimum bone influence. Influence values smaller than this are ignored.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.NumberBones">
      <summary>Get the number of bones.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.VertexFormat">
      <summary>Get the fixed function vertex value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SkinningNotSupportedException">
      <summary>Skinning is not supported. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinningNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinningNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinningNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinningNotSupportedException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Sprite">
      <summary>The Sprite object provides a set of methods that simplify the process of drawing sprites using Microsoft® Direct3D®.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Sprite.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Sprite.Lost">
      <summary>Occurs when the object has been lost, normally just before a device has been reset.  OnLostDevice is called automatically for you.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Sprite.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Begin">
      <summary>Prepares a device for drawing sprites.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.#ctor(Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2,System.Drawing.Color)">
      <summary>Draws a simple sprite in screen-space.</summary>
      <param name="srcTexture" />
      <param name="srcRectangle" />
      <param name="scaling" />
      <param name="rotationCenter" />
      <param name="rotation" />
      <param name="translation" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2,System.Int32)">
      <summary>Draws a simple sprite in screen-space.</summary>
      <param name="srcTexture" />
      <param name="srcRectangle" />
      <param name="scaling" />
      <param name="rotationCenter" />
      <param name="rotation" />
      <param name="translation" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.DrawTransform(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,Microsoft.DirectX.Matrix,System.Drawing.Color)">
      <summary>Provides a mechanism for drawing a sprite that is transformed by a specified matrix.</summary>
      <param name="srcTexture" />
      <param name="srcRectangle" />
      <param name="transform" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.DrawTransform(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Provides a mechanism for drawing a sprite that is transformed by a specified matrix.</summary>
      <param name="srcTexture" />
      <param name="srcRectangle" />
      <param name="transform" />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.End">
      <summary>Restores the device state to how it was when  was called.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all stateblocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.OnResetDevice">
      <summary>Should be called after the device has been reset.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.op_Equality(Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Direct3D.Sprite)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.op_Inequality(Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Direct3D.Sprite)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.raise_Lost(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.raise_Reset(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sprite.Device">
      <summary>Retrieves the Microsoft® Direct3D® device associated with the sprite object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sprite.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SurfaceLoader">
      <summary>Contains functions for loading and saving surfaces.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="srcFile" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="srcFile" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="srcFile" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="srcFile" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="srcFile" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="srcFile" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="srcFile" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="srcFile" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="stream" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="stream" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file in memory.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="srcSurface" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="srcSurface" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="srcSurface" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="srcSurface" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="destRectangle" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="srcSurface" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="srcSurface" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="srcSurface" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destRectangle" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface" />
      <param name="destPalette" />
      <param name="srcSurface" />
      <param name="srcRectangle" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Saves a surface to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcSurface" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Saves a surface to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle)">
      <summary>Saves a surface to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcSurface" />
      <param name="srcRectangle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle)">
      <summary>Saves a surface to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcSurface" />
      <param name="sourcePalette" />
      <param name="srcRectangle" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureLoader">
      <summary>Contains functions to load and save textures</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.CheckCubeTextureRequirements(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.CubeTextureRequirements@)">
      <summary>Checks cube-texture-creation parameters.</summary>
      <param name="device" />
      <param name="usage" />
      <param name="pool" />
      <param name="requirements" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.CheckTextureRequirements(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.TextureRequirements@)">
      <summary>Checks texture-creation parameters.</summary>
      <param name="device" />
      <param name="usage" />
      <param name="pool" />
      <param name="requirements" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.CheckVolumeTextureRequirements(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.VolumeTextureRequirements@)">
      <summary>Checks volume-texture-creation parameters.</summary>
      <param name="device" />
      <param name="pool" />
      <param name="requirements" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.ComputeNormalMap(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.NormalMap,Microsoft.DirectX.Direct3D.Channel,System.Single)">
      <summary>Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.</summary>
      <param name="texture" />
      <param name="srcTexture" />
      <param name="flags" />
      <param name="channel" />
      <param name="amplitude" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.ComputeNormalMap(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.NormalMap,Microsoft.DirectX.Direct3D.Channel,System.Single)">
      <summary>Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.</summary>
      <param name="texture" />
      <param name="srcTexture" />
      <param name="sourcePalette" />
      <param name="flags" />
      <param name="channel" />
      <param name="amplitude" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.VolumeTexture,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Vector4[])">
      <summary>Uses a user-provided function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture" />
      <param name="compiledCode" />
      <param name="constants" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.CubeTexture,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Vector4[])">
      <summary>Uses a user-provided function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture" />
      <param name="compiledCode" />
      <param name="constants" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.GraphicsStream,Microsoft.DirectX.Vector4[])">
      <summary>Uses a user-provided function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture" />
      <param name="compiledCode" />
      <param name="constants" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.VolumeTexture,Microsoft.DirectX.Direct3D.Fill3DTextureCallback)">
      <summary>Uses a user-provided function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture" />
      <param name="callbackFunction" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.CubeTexture,Microsoft.DirectX.Direct3D.Fill3DTextureCallback)">
      <summary>Uses a user-provided function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture" />
      <param name="callbackFunction" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Fill2DTextureCallback)">
      <summary>Uses a user-provided function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture" />
      <param name="callbackFunction" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FilterTexture(Microsoft.DirectX.Direct3D.BaseTexture,System.Int32,Microsoft.DirectX.Direct3D.Filter)">
      <summary>Filters mipmap levels of a texture.</summary>
      <param name="baseTexture" />
      <param name="srcLevel" />
      <param name="filter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FilterTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Int32,Microsoft.DirectX.Direct3D.Filter)">
      <summary>Filters mipmap levels of a texture.</summary>
      <param name="baseTexture" />
      <param name="palette" />
      <param name="srcLevel" />
      <param name="filter" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="size" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String)">
      <summary>Creates a texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="width" />
      <param name="height" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device" />
      <param name="srcFile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="width" />
      <param name="height" />
      <param name="depth" />
      <param name="mipLevels" />
      <param name="usage" />
      <param name="format" />
      <param name="pool" />
      <param name="filter" />
      <param name="mipFilter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <param name="palette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device" />
      <param name="stream" />
      <param name="readBytes" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.ImageInformationFromFile(System.String)">
      <summary>Retrieves information about a given image file.</summary>
      <param name="srcFile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Saves a texture to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcTexture" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Saves a texture to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcTexture" />
      <param name="sourcePalette" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TooManyInfluencesException">
      <summary>Too many influences specified. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyInfluencesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyInfluencesException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyInfluencesException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyInfluencesException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexInformation">
      <summary>Contains functions for retrieving vertex information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexInformation.DeclaratorFromFormat(Microsoft.DirectX.Direct3D.VertexFormats)">
      <summary>Returns a declarator from a flexible vertex format (FVF) code.</summary>
      <param name="vertexFormat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexInformation.FormatFromDeclarator(Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Returns a TODO:MISSING TLA code from a declarator.</summary>
      <param name="declarator" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexInformation.GetFormatSize(Microsoft.DirectX.Direct3D.VertexFormats)">
      <summary>Returns the size of a vertex for a flexible vertex format (FVF).</summary>
      <param name="vertexFormat" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeLoader">
      <summary>Contains functions for loading and saving volumes.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="srcFile" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="srcFile" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="srcFile" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="srcFile" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="srcFile" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="srcFile" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="srcFile" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="srcFile" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="srcFile" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="stream" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="stream" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="stream" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="stream" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="stream" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="stream" />
      <param name="readBytes" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="stream" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file in memory.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="stream" />
      <param name="filter" />
      <param name="colorKey" />
      <param name="srcInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="srcVolume" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="srcVolume" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="srcVolume" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="srcVolume" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="destBox" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="srcVolume" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="srcVolume" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="srcVolume" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destBox" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume" />
      <param name="destPalette" />
      <param name="srcVolume" />
      <param name="srcBox" />
      <param name="filter" />
      <param name="colorKey" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Volume)">
      <summary>Saves a volume to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcVolume" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Saves a volume to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box)">
      <summary>Saves a volume to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcVolume" />
      <param name="srcBox" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box)">
      <summary>Saves a volume to a file.</summary>
      <param name="destFile" />
      <param name="destFormat" />
      <param name="srcVolume" />
      <param name="sourcePalette" />
      <param name="srcBox" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Fill2DTextureCallback">
      <summary>Represents the method that will handle the FillTexture call.</summary>
      <param name="texCoord" />
      <param name="texelSize" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Fill3DTextureCallback">
      <summary>Represents the method that will handle the FillTexture call.</summary>
      <param name="texCoord" />
      <param name="texelSize" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Channel">
      <summary>These flags are used to specify which channels in a texture to operate on.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.Luminance">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.Alpha">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.Green">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.Blue">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.Red">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectDefaultType">
      <summary>Effect data types. The data is contained in the pValue member of EffectdefaultGraphicsd3dx.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EffectDefaultType.Floats">
      <summary>The data type is an array of floats. The number of floats in the array is specified by NumBytes in .</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EffectDefaultType.String">
      <summary>The data type is a NULL terminated ASCII text string.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EffectDefaultType.Integer">
      <summary>Forces this enumeration to compile to 32 bits in size. This value is not used.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Filter">
      <summary>Defines texture filtering modes for a texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.Linear">
      <summary>Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of a 2x2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer linearly interpolates pixel color, using the texels of the two nearest mipmap textures.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.None">
      <summary>Mipmapping disabled. The rasterizer should use the magnification filter instead.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.Point">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.Dither">
      <summary>The resulting image must be dithered using a 4x4 ordered dither algorithm.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.Mirror">
      <summary>Specifying this flag is the same as specifying the D3DX_FILTER_MIRROR_U, D3DX_FILTER_MIRROR_V, and D3DX_FILTER_MIRROR_W flags. This flag is always used internally for this function.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.MirrorW">
      <summary>Pixels off the edge of the texture on the w-axis should be mirrored, not wrapped.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.MirrorV">
      <summary>Pixels off the edge of the texture on the v-axis should be mirrored, not wrapped.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.MirrorU">
      <summary>Pixels off the edge of the texture on the u-axis should be mirrored, not wrapped.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.Box">
      <summary>Each pixel is computed by averaging a 2x2(x2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.Triangle">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FX">
      <summary>Flags for saving shader state</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FX.DoNotSaveShaderState">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FX.DoNotSaveState">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ImageFileFormat">
      <summary>Describes the supported image file formats.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.Dib">
      <summary>Microsoft Windows® bitmap file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.Ppm">
      <summary>Portable pixmap file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.Dds">
      <summary>Microsoft® DirectDraw® surface file format</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.Png">
      <summary>Portable Network Graphics file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.Tga">
      <summary>Truevision Targa image file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.Jpg">
      <summary>Joint Photographic Experts Group compressed file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.Bmp">
      <summary>Microsoft Windows® bitmap file format.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MeshFlags">
      <summary>Flags used to specify creation options for a mesh.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.OptimizeDoNotSplit">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.OptimizeIgnoreVerts">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.OptimizeStripeReorder">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.OptimizeVertexCache">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.OptimizeAttrSort">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.OptimizeCompact">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.SoftwareProcessing">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.Dynamic">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.WriteOnly">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.Managed">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.SystemMemory">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.UseHardwareOnly">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.VbShare">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.IbSoftwareProcessing">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.IbDynamic">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.IbManaged">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.IbSystemMem">
      <summary>Use the D3DPOOL_SYSTEMMEM memory class for index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.VbSoftwareProcessing">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.VbDynamic">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.VbWriteOnly">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.VbManaged">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.VbSystemMem">
      <summary>Use the D3DPOOL_SYSTEMMEM memory class for vertex buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.NPatches">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.RtPatches">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.Points">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.DoNotClip">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.Use32Bit">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.NormalMap">
      <summary>Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.ComputeOcclusion">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.InvertSign">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.Mirror">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.MirrorV">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.MirrorU">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ParameterClass">
      <summary>REGISTERSETGraphicsd3dx</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.Object">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.Struct">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.MatrixColumns">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.MatrixRows">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.Vector">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.Scalar">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ParameterType">
      <summary>Describes the data contained by the enumeration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Texture">
      <summary>Parameter is a texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Sampler">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.String">
      <summary>Parameter is a string.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.SamplerCube">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Sampler3D">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Sampler2D">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Sampler1D">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.TextureCube">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Texture3D">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Texture2D">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Texture1D">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.VertexShader">
      <summary>Parameter is a vertex shader.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.PixelShader">
      <summary>Parameter is a pixel shader.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Float">
      <summary>Parameter is one floating-point number.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Integer">
      <summary>Parameter is a single DWORD.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Boolean">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.Void">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchMeshOptions">
      <summary>Mesh patch types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchMeshOptions.Default">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RegisterSet">
      <summary>Data type of the register.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RegisterSet.Sampler">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RegisterSet.Float4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RegisterSet.Int4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RegisterSet.Boolean">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderFlags">
      <summary>Control the compile options during a shader compile.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.None">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.Debug">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.PackMatrixColumnMajor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.PackMatrixRowMajor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.SkipOptimization">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.SkipValidation">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TrackFlags">
      <summary>Track flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TrackFlags.HighPriority">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TrackFlags.LowPriority">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TransitionType">
      <summary>Flags used to specify the transition style between values of a mesh animation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransitionType.EaseInEaseOut">
      <summary>Ease-in, ease-out spline transition between values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransitionType.Linear">
      <summary>Linear transition between values.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags">
      <summary>Options for welding together vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.DoNotSplit">
      <summary>Instructs the weld to allow only modifications to vertices and not removal. This flag is valid only if D3DXWELDEPSILONS_WELDPARTIALMATCHES is set. It is useful to modify vertices to be equal, but not to allow vertices to be removed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.DoNotRemoveVertices">
      <summary>Instructs the weld to allow only modifications to vertices and not removal. This flag is valid only if D3DXWELDEPSILONS_WELDPARTIALMATCHES is set. It is useful to modify vertices to be equal, but not to allow vertices to be removed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.WeldPartialMatches">
      <summary>If a given vertex component is within epsilon, modify partially matched vertices so that both components are identical. If all components are equal, remove one of the vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.WeldAll">
      <summary>Weld all vertices marked by adjacency as being overlapping.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AnimationRootFrame">
      <summary>Contains the root frame and animation controller in a frame hierarchy.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationRootFrame.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationRootFrame.AnimationController">
      <summary>Animation controller corresponding to animation in the .x file. This is created with default max tracks and events. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationRootFrame.FrameHierarchy">
      <summary>Root node reference of the loaded frame hierarchy.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AttributeRange">
      <summary>Stores an attribute table entry.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AttributeRange.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AttributeRange.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.AttribId">
      <summary>Attribute table identifier.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.FaceCount">
      <summary>Face count.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.FaceStart">
      <summary>Starting face.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.VertexCount">
      <summary>Vertex count.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.VertexStart">
      <summary>Starting vertex.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AttributeWeights">
      <summary>Specifies mesh weight attributes.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AttributeWeights.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AttributeWeights.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Binormal">
      <summary>Binormal.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Boundary">
      <summary>Blend weight.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Diffuse">
      <summary>Diffuse lighting value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Normal">
      <summary>Normal.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Position">
      <summary>Position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Specular">
      <summary>Specular lighting value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Tangent">
      <summary>Tangent.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.TextureCoordinate">
      <summary>Eight texture coordinates.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BoneCombination">
      <summary>Describes a subset of the mesh that has the same attribute and bone combination.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BoneCombination.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BoneCombination.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.AttribId">
      <summary>Attribute table identifier.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.BoneId">
      <summary>Pointer to an array of values that identify each of the bones that can be drawn in a single drawing call. Note that the array can be of variable length to accommodate variable length bone combinations of SkininfoConvertToIndexedBlendedMeshGraphicsd3dx.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.FaceCount">
      <summary>Face count.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.FaceStart">
      <summary>Starting face.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.VertexCount">
      <summary>Vertex count.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.VertexStart">
      <summary>Starting vertex.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConstantDescription">
      <summary>A description of a constant in a constant table.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Class">
      <summary>Parameter class.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Columns">
      <summary>Number of columns.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.DefaultData">
      <summary>Reference to the default value</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Elements">
      <summary>Number of elements in the array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Name">
      <summary>Name of the constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.ParameterType">
      <summary>Parameter type. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.RegisterCount">
      <summary>Number of registers that contain data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.RegisterIndex">
      <summary>Zero-based index of the constant in the table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.RegisterSet">
      <summary>Constant data type. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Rows">
      <summary>Number of rows.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.StructMembers">
      <summary>Number of structure member sub-parameters.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConstantTableDescription">
      <summary>A description of the constant table.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTableDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTableDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTableDescription.Constants">
      <summary>Number of constants in the constant table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTableDescription.Creator">
      <summary>Name of the constant table creator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTableDescription.Version">
      <summary>Shader version.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CubeTextureRequirements">
      <summary>Contains cube texture creation parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTextureRequirements.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTextureRequirements.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CubeTextureRequirements.Format">
      <summary>Direct3D.Format of the cube-texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CubeTextureRequirements.NumberMipLevels">
      <summary>Number of mipmap levels of the cube-texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CubeTextureRequirements.Size">
      <summary>Width and height, in pixels, of the cube-texture.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplacementParameter">
      <summary>Mesh geometry displacement parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplacementParameter.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplacementParameter.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.LevelOfDetailBias">
      <summary>Level of detail bias value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.MagFilter">
      <summary>Magnification level. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.MinFilter">
      <summary>Minification level. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.MipFilter">
      <summary>Mip filter level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.Texture">
      <summary>Texture containing the displacement data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.Wrap">
      <summary>Texture address wrap mode.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectDefault">
      <summary>A data type for managing a default effect parameter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectDefault.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDefault.ParamName">
      <summary>Parameter name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDefault.Type">
      <summary>Data type in pValue. For more information, see EffectdefaulttypeGraphicsd3dx</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDefault.Value">
      <summary>Pointer to the memory location that contains the data.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectDescription">
      <summary>Describes an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDescription.Creator">
      <summary>String that contains the name of the effect creator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDescription.Functions">
      <summary>Number of functions that can render the effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDescription.Parameters">
      <summary>Number of parameters used for effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDescription.Techniques">
      <summary>Number of techniques that can render the effect.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectInstance">
      <summary>A data type for managing a set of default effect parameters.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EffectInstance.Defaults">
      <summary>Pointer to an array of EffectdefaultGraphicsd3dx elements, each of which contains an effect parameter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectInstance.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectInstance.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectInstance.EffectFilename">
      <summary>Name of the effect file.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ExtendedMaterial">
      <summary>Returns material information saved in Microsoft® Direct3D® (.x) files.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ExtendedMaterial.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ExtendedMaterial.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ExtendedMaterial.Material3D">
      <summary>Direct3D.Material structure that describes the material properties.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ExtendedMaterial.TextureFilename">
      <summary>String that specifies the file name of the texture.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FragmentDescription">
      <summary>Describes an annotation used by an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentDescription.Name">
      <summary>Fragment name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentDescription.Target">
      <summary>Fragment compile target. The compile target identifies the shader type (vertex or pixel) and the version number.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FunctionDescription">
      <summary>Describes a function used by an effect.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FunctionDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FunctionDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FunctionDescription.Annotations">
      <summary>Annotations are user-specific data that can be attached to any technique, pass, or parameter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FunctionDescription.Name">
      <summary>Function name.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GlyphMetricsFloat">
      <summary>Contains information about the position and orientation of the corresponding glyph in the string. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.BlackBoxX">
      <summary>Specifies the width of the smallest rectangle (the glyph's black box) that completely encloses the glyph. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.BlackBoxY">
      <summary>Specifies the height of the smallest rectangle (the glyph's black box) that completely encloses the glyph. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.CellIncX">
      <summary>Specifies the horizontal distance from the origin of the current character cell to the origin of the next character cell. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.CellIncY">
      <summary>Specifies the vertical distance from the origin of the current character cell to the origin of the next character cell. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.GlyphOrigin">
      <summary>Specifies the x and y coordinates of the upper-left corner of the smallest rectangle that completely encloses the glyph. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ImageInformation">
      <summary>Returns a description of the original contents of an image file.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ImageInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ImageInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.Depth">
      <summary>Depth of original image in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.Format">
      <summary>A value from the D3dformat enumerated type that most closely describes the data in the original image.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.Height">
      <summary>Height of original image in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.ImageFileFormat">
      <summary>Represents the format of the image file.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.MipLevels">
      <summary>Number of mip levels in original image.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.ResourceType">
      <summary>Represents the type of the texture stored in the file. It is either D3DRTYPE_TEXTURE, D3DRTYPE_VOLUMETEXTURE, or D3DRTYPE_CUBETEXTURE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.Width">
      <summary>Width of original image in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IntersectInformation">
      <summary>Describes a ray-triangle intersection.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IntersectInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IntersectInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IntersectInformation.Dist">
      <summary>Distance along the ray where the intersection occurred.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IntersectInformation.FaceIndex">
      <summary>Index of the triangle that hit the ray.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IntersectInformation.U">
      <summary>Barycentric coordinate within the triagle where the ray intersects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IntersectInformation.V">
      <summary>Barycentric coordinate within the triagle where the ray intersects.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.KeyQuaternion">
      <summary>Describes a quaternion key for use in keyframe animation and specifies a quaternion value at a given time. This is used for rotation keys.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyQuaternion.Time">
      <summary>Time.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyQuaternion.Value">
      <summary>Quaternion containing the value.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyQuaternion.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.KeyVector3">
      <summary>Describes a vector key for use in keyframe animation and specifies a vector at a given time. This is used for scale and translation keys.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyVector3.Time">
      <summary>Time.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyVector3.Value">
      <summary>Value.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyVector3.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Macro">
      <summary>Describes preprocessor definitions used by an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Macro.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Macro.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Macro.Definition">
      <summary>Definition name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Macro.Name">
      <summary>Preprocessor name.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MeshData">
      <summary>Contains mesh data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshData.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshData.Mesh">
      <summary>Returns the mesh contained in this object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshData.PatchMesh">
      <summary>Returns the patch mesh contained in this object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshData.ProgressiveMesh">
      <summary>Returns the progressive mesh contained in this object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MeshOptions">
      <summary>Specifies the type of mesh optimization to be performed.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshOptions.#ctor(Microsoft.DirectX.Direct3D.MeshFlags[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="initialFlags" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshOptions.#ctor(Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="initialFlag" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshOptions.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshOptions.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.DoNotClip">
      <summary>Do not clip while optimizing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Dynamic">
      <summary>Equivalent to specifying both VbDynamic and IbDynamic</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferDynamic">
      <summary>Use the Usage.Dynamic usage flag for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferManaged">
      <summary>Use the Usage.Managed usage flag for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferSoftwareProcessing">
      <summary>Use the Usage.SoftwareProcessing usage flag for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferSystemMem">
      <summary>Use the Usage.SystemMemory usage flag for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferWriteOnly">
      <summary>Use the Usage.WriteOnly usage flag for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Managed">
      <summary>Equivalent to specifying both VertexBufferManaged and IndexBufferManaged.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.NPatches">
      <summary>Specifying this flag causes the vertex and index buffer of the mesh to be created with Usage.NPatches flag. This is required if the mesh object is to be rendered using N-patch enhancement using Microsoft® Direct3D®.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Points">
      <summary>Use the Usage.Point usage flag for vertex and index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.RtPatches">
      <summary>Use the Usage.RtPatches usage flag for vertex and index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.SoftwareProcessing">
      <summary>Equivalent to specifying both VertexBufferSoftwareProcessing and IndexBufferSoftwareProcessing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.SystemMem">
      <summary>Equivalent to specifying both VertexBufferSystemMemory and IndexBufferSystemMemory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Use32Bit">
      <summary>The mesh has 32-bit indices instead of 16-bit indices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Value">
      <summary>Flags used to specify creation options for a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferDynamic">
      <summary>Use the Usage.Dynamic usage flag for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferManaged">
      <summary>Use the Pool.Managed usage flag for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferSoftwareProcessing">
      <summary>Use the Usage.SoftwareProcessing usage flag for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferSystemMem">
      <summary>Use the Pool.SystemMemory usage flag for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferWriteOnly">
      <summary>Use the Usage.WriteOnly usage flag for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.WriteOnly">
      <summary>Use the Usage.WriteOnly usage flag for vertex and index buffers.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ParameterDescription">
      <summary>Describes a parameter used for an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ParameterDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ParameterDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Annotations">
      <summary>The number of annotations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Bytes">
      <summary>The size of the parameter, in bytes. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Class">
      <summary>Parameter class. Set this to one of the values in PARAMETERCLASSGraphicsd3dx.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Columns">
      <summary>The number of columns in the array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Elements">
      <summary>The number of elements in the array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Flags">
      <summary>Parameter attributes. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Name">
      <summary>Name of the parameter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Rows">
      <summary>The number of rows in the array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Semantic">
      <summary>The semantic meaning, also called the usage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.StructMembers">
      <summary>Number of structure members.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Type">
      <summary>Parameter type. Set this to one of the values in ParametertypeGraphicsd3dx.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PassDescription">
      <summary>Describes a pass for an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PassDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PassDescription.GetPixelShaderSamplers">
      <summary>An array of pixel shader samplers</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PassDescription.GetPixelShaderSemantics">
      <summary>An array of the pixel shader semantics</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PassDescription.GetVertexShaderSemantics">
      <summary>An array of the vertex shader semantics. </summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PassDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PassDescription.Annotations">
      <summary>Annotations are user-specific data that can be attached to any technique, pass, or parameter. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PassDescription.Name">
      <summary>String value used for the pass.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PassDescription.PixelShaderVersion">
      <summary>Pixel shader version number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PassDescription.VertexShaderVersion">
      <summary>Vertex shader version number. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchInformation">
      <summary>Structure that contains the attributes of a patch mesh.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchInformation.BasisType">
      <summary>Basis type</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchInformation.Degree">
      <summary>Degree of the curves used to construct the patch. For information about the degrees supported, see D3ddegreetype.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchInformation.PatchType">
      <summary>The patch type. For information about patch types, see PatchmeshtypeGraphicsd3dx.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchInformation.TessellateLevel">
      <summary>Tesselation level.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PropertyDescription">
      <summary>Describes a property used for an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PropertyDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PropertyDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Bytes">
      <summary>The size of the property, in bytes. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Dimension">
      <summary>Dimension of the property</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Index">
      <summary>Index of the property</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Name">
      <summary>Name of the property.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Type">
      <summary>Property type.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription">
      <summary>Describes an off-screen render target.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.DepthStencil">
      <summary>Indicates if the z-buffer is needed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.DepthStencilFormat">
      <summary>Format of the depth buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.Format">
      <summary>Color buffer format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.MipLevels">
      <summary>Maximum level of detail (LOD) number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.Size">
      <summary>Width and height in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription">
      <summary>Describes a render surface.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.DepthStencil">
      <summary>If true, the render surface supports a depth-stencil surface; otherwise this member is set to false. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.DepthStencilFormat">
      <summary>If DepthStencil is set to true, this parameter is a member of the DepthFormat enumerated type, describing the depth-stencil format of the render surface. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.Format">
      <summary>Retrieves the parameters of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.Height">
      <summary>Retrieves the parameters of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.Width">
      <summary>Retrieves the parameters of the render surface.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ScaleRotateTranslate">
      <summary>Scale, rotate and tranlate members.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ScaleRotateTranslate.Rotate">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ScaleRotateTranslate.Scale">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ScaleRotateTranslate.Translate">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ScaleRotateTranslate.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Semantic">
      <summary>Semantics map a parameter to vertex or pixel shader registers. They can also be optional descriptive strings attached to non-register parameters. </summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Semantic.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Semantic.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Semantic.Usage">
      <summary>Options that identify how resources are used.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Semantic.UsageIndex">
      <summary>Options that modify how the usage is interpreted. </summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderConstantInformation">
      <summary>Shader constant information</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderConstantInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderConstantInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.DefaultValue">
      <summary>Default value of the shader constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.Name">
      <summary>Name of the shader constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.RegisterCount">
      <summary>Number of registers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.RegisterIndex">
      <summary>Register number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.RegisterSet">
      <summary>Register number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.TypeInformation">
      <summary>Type information of a shader constant.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderConstantTable">
      <summary>Get the shader constant table embedded inside shader.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderConstantTable.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderConstantTable.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.ConstantInformation">
      <summary>Constant information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Constants">
      <summary>Number of constants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Creator">
      <summary>String that contains the name of the effect creator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Size">
      <summary>The size of the constant, in bytes. </summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Version">
      <summary>Shader version.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderDebugInformation">
      <summary>Get shader debug information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderDebugInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderDebugInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Creator">
      <summary>Offset to the shader creator information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.EntryPointName">
      <summary>Entry point name</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.FileInformation">
      <summary>File information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Files">
      <summary>Files</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.InstructionInformation">
      <summary>Offset in bytes, from the start of the structure to the instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Instructions">
      <summary>The number of instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Size">
      <summary>Size of the debug information structure, in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.SourceCode">
      <summary>Offset in bytes, from the start of the structure to the source code.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.VariableInformation">
      <summary>Variable information</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Variables">
      <summary>Variables.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderFileInformation">
      <summary>Shader file information</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderFileInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderFileInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderFileInformation.Name">
      <summary>Name.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderInstructionInformation">
      <summary>Helper structure for retrieving shader instruction information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.File">
      <summary>Offset in bytes, from the beginning of the debug information to the filename string.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.Line">
      <summary>The shader line number that contains the instruction.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.Offset">
      <summary>Offset for shader instruction.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation">
      <summary>Shader struct member information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation.Name">
      <summary>Name</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation.TypeInformation">
      <summary>Type information</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderTypeInformation">
      <summary>Shader type information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderTypeInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderTypeInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.Class">
      <summary>Class for shader type information..</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.Columns">
      <summary>Number of columns</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.Elements">
      <summary>Number of elements.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.StructMemberInformation">
      <summary>Struct member information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.StructMembers">
      <summary>Structure members.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.Type">
      <summary>Type for shader type information</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderVariableInformation">
      <summary>Variable information</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderVariableInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderVariableInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.Name">
      <summary>Name of the variable</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.Scope">
      <summary>Scope of the variable</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.TypeInformation">
      <summary>Type of the variable</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.WriteInformation">
      <summary>Write information for the variable</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.Writes">
      <summary>Writes to the variable</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderWriteInformation">
      <summary>Shader write information</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderWriteInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderWriteInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderWriteInformation.Instruction">
      <summary>The instruction to write</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SkinMesh">
      <summary>Contains skin information and mesh data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.LoadFrom(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a skin mesh from a Microsoft® DirectX® .x file data object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.LoadFrom(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a skin mesh from a Microsoft® DirectX® .x file data object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.LoadFrom(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a skin mesh from a Microsoft® DirectX® .x file data object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="materials" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.LoadFrom(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@)">
      <summary>Loads a skin mesh from a Microsoft® DirectX® .x file data object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.LoadFrom(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a skin mesh from a Microsoft® DirectX® .x file data object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.LoadFrom(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance@)">
      <summary>Loads a skin mesh from a Microsoft® DirectX® .x file data object.</summary>
      <param name="xofObjMesh" />
      <param name="options" />
      <param name="device" />
      <param name="adjacency" />
      <param name="materials" />
      <param name="effects" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinMesh.Mesh">
      <summary>Mesh used with this skin information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinMesh.SkinInformation">
      <summary>SkinInformation object used for the skinning.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TechniqueDescription">
      <summary>Describes a technique used by an effect.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TechniqueDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TechniqueDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TechniqueDescription.Annotations">
      <summary>Describes a technique used by an effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TechniqueDescription.Name">
      <summary>A string that contains the technique name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TechniqueDescription.Passes">
      <summary>Number of rendering passes the technique requires. See Remarks.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureRequirements">
      <summary>Texture creation parameters</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureRequirements.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureRequirements.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureRequirements.Format">
      <summary>Gets or sets the desired pixel format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureRequirements.Height">
      <summary>Height for the texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureRequirements.NumberMipLevels">
      <summary>Number of mip-map levels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureRequirements.Width">
      <summary>Width of the texture</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TrackDescription">
      <summary>Describes an animation track and specifies a tracks's weight and speed at a given time. This data is used to scale and translate animation key frames.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrackDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrackDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.AnimationTime">
      <summary>Local animation time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Enable">
      <summary>Track enable/disable. To enable this track in the mixer, set to TRUE. To disable it, set to FALSE.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Flags">
      <summary>Unused.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Speed">
      <summary>Speed value. This is like a multiplier to scale the period of the track.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Weight">
      <summary>Weight value. The weight determines how much of this track to blend with other tracks in the mixer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeTextureRequirements">
      <summary>Volume texture creation parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.Depth">
      <summary>Depth, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.Format">
      <summary>Desired pixel format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.Height">
      <summary>Height of the volume texture, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.NumberMipLevels">
      <summary>Number of mipmap levels of the volume texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.Width">
      <summary>Width of the volume texture, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WeldEpsilons">
      <summary>Specifies a per-vertex value used for welding similar vertices together.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WeldEpsilons.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WeldEpsilons.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Binormal">
      <summary>Binormal.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.BlendWeights">
      <summary>Blend weight.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Diffuse">
      <summary>Diffuse lighting value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Normal">
      <summary>Normal.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.PointSize">
      <summary>Point size value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Position">
      <summary>Position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Specular">
      <summary>Specular lighting value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Tangent">
      <summary>Tangent.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.TessellateFactor">
      <summary>Tessellation factor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.TextureCoordinate">
      <summary>Eight texture coordinates.</summary>
    </member>
  </members>
</doc>